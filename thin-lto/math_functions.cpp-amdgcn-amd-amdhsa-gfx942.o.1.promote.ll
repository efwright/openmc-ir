; ModuleID = 'math_functions.cpp-amdgcn-amd-amdhsa-gfx942.o.1.promote.bc'
source_filename = "/g/g0/wright117/workspace/openmc/openmc-omp/openmc/src/math_functions.cpp"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

%"struct.std::array" = type { [6 x i32] }
%"struct.openmc::Position" = type { double, double, double }
%"class.std::complex" = type { { double, double } }

@__omp_rtl_debug_kind = available_externally hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_thread_state = available_externally hidden local_unnamed_addr addrspace(1) constant i32 0
@__omp_rtl_assume_no_nested_parallelism = available_externally hidden local_unnamed_addr addrspace(1) constant i32 0
@_ZN6openmcL12DEPLETION_RXE = internal addrspace(1) constant %"struct.std::array" { [6 x i32] [i32 102, i32 103, i32 107, i32 16, i32 17, i32 37] }, align 4
@"__ZN6openmcL12DEPLETION_RXE$ref" = internal constant ptr addrspace(1) @_ZN6openmcL12DEPLETION_RXE, align 8
@llvm.compiler.used = appending addrspace(1) global [1 x ptr] [ptr @"__ZN6openmcL12DEPLETION_RXE$ref"], section "llvm.metadata"

; Function Attrs: cold mustprogress noinline nounwind optsize
declare hidden { double, double } @__muldc3(double noundef, double noundef, double noundef, double noundef) local_unnamed_addr #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: cold mustprogress noinline nounwind optsize
declare hidden { double, double } @__divdc3(double noundef, double noundef, double noundef, double noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite)
define hidden void @calc_pn_c(i32 noundef %n, double noundef %x, ptr noundef captures(none) initializes((0, 8)) %pnx) local_unnamed_addr #2 {
entry:
  store double 1.000000e+00, ptr %pnx, align 8, !tbaa !10
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx1 = getelementptr inbounds nuw i8, ptr %pnx, i64 8
  store double %x, ptr %arrayidx1, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp214 = icmp sgt i32 %n, 1
  br i1 %cmp214, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end
  %arrayidx4.phi.trans.insert = getelementptr inbounds nuw i8, ptr %pnx, i64 8
  %.pre = load double, ptr %arrayidx4.phi.trans.insert, align 8, !tbaa !10
  %invariant.gep = getelementptr i8, ptr %pnx, i64 -8
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  ret void

for.body:                                         ; preds = %for.body, %for.body.preheader
  %0 = phi double [ %div, %for.body ], [ %.pre, %for.body.preheader ]
  %l.015 = phi i32 [ %add10, %for.body ], [ 1, %for.body.preheader ]
  %mul = shl nuw nsw i32 %l.015, 1
  %add = or disjoint i32 %mul, 1
  %conv = uitofp nneg i32 %add to double
  %mul3 = fmul double %x, %conv
  %idxprom = zext nneg i32 %l.015 to i64
  %conv6 = uitofp nneg i32 %l.015 to double
  %gep = getelementptr double, ptr %invariant.gep, i64 %idxprom
  %1 = load double, ptr %gep, align 8, !tbaa !10
  %2 = fneg double %conv6
  %neg = fmul double %1, %2
  %3 = tail call double @llvm.fmuladd.f64(double %mul3, double %0, double %neg)
  %add10 = add nuw nsw i32 %l.015, 1
  %conv11 = uitofp nneg i32 %add10 to double
  %div = fdiv double %3, %conv11
  %idxprom13 = zext nneg i32 %add10 to i64
  %arrayidx14 = getelementptr inbounds nuw double, ptr %pnx, i64 %idxprom13
  store double %div, ptr %arrayidx14, align 8, !tbaa !10
  %exitcond.not = icmp eq i32 %add10, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !14
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(argmem: write)
define hidden void @_ZN6openmc7calc_rnEiNS_8PositionEPd(i32 noundef %n, double %u.coerce0, double %u.coerce1, double %u.coerce2, ptr noundef writeonly initializes((0, 8)) %rn) local_unnamed_addr #3 {
entry:
  %cmp = fcmp oeq double %u.coerce0, 0.000000e+00
  br i1 %cmp, label %if.end, label %if.else

if.else:                                          ; preds = %entry
  %0 = tail call double @llvm.fabs.f64(double %u.coerce1) #7
  %1 = tail call double @llvm.fabs.f64(double %u.coerce0) #7
  %2 = tail call double @llvm.maxnum.f64(double %1, double %0) #7
  %3 = tail call double @llvm.minnum.f64(double %1, double %0) #7
  %4 = fdiv double %3, %2
  %5 = fmul double %4, %4
  %6 = tail call double @llvm.fma.f64(double %5, double 0x3EEBA404B5E68A13, double 0xBF23E260BD3237F4)
  %7 = tail call double @llvm.fma.f64(double %5, double %6, double 0x3F4B2BB069EFB384)
  %8 = tail call double @llvm.fma.f64(double %5, double %7, double 0xBF67952DAF56DE9B)
  %9 = tail call double @llvm.fma.f64(double %5, double %8, double 0x3F7D6D43A595C56F)
  %10 = tail call double @llvm.fma.f64(double %5, double %9, double 0xBF8C6EA4A57D9582)
  %11 = tail call double @llvm.fma.f64(double %5, double %10, double 0x3F967E295F08B19F)
  %12 = tail call double @llvm.fma.f64(double %5, double %11, double 0xBF9E9AE6FC27006A)
  %13 = tail call double @llvm.fma.f64(double %5, double %12, double 0x3FA2C15B5711927A)
  %14 = tail call double @llvm.fma.f64(double %5, double %13, double 0xBFA59976E82D3FF0)
  %15 = tail call double @llvm.fma.f64(double %5, double %14, double 0x3FA82D5D6EF28734)
  %16 = tail call double @llvm.fma.f64(double %5, double %15, double 0xBFAAE5CE6A214619)
  %17 = tail call double @llvm.fma.f64(double %5, double %16, double 0x3FAE1BB48427B883)
  %18 = tail call double @llvm.fma.f64(double %5, double %17, double 0xBFB110E48B207F05)
  %19 = tail call double @llvm.fma.f64(double %5, double %18, double 0x3FB3B13657B87036)
  %20 = tail call double @llvm.fma.f64(double %5, double %19, double 0xBFB745D119378E4F)
  %21 = tail call double @llvm.fma.f64(double %5, double %20, double 0x3FBC71C717E1913C)
  %22 = tail call double @llvm.fma.f64(double %5, double %21, double 0xBFC2492492376B7D)
  %23 = tail call double @llvm.fma.f64(double %5, double %22, double 0x3FC99999999952CC)
  %24 = tail call double @llvm.fma.f64(double %5, double %23, double 0xBFD5555555555523)
  %25 = fmul double %5, %24
  %26 = tail call double @llvm.fma.f64(double %4, double %25, double %4)
  %27 = fcmp uno double %u.coerce0, %u.coerce1
  %28 = fcmp oeq double %0, 0x7FF0000000000000
  %29 = fcmp oeq double %1, 0x7FF0000000000000
  %30 = and i1 %29, %28
  %31 = bitcast double %u.coerce0 to <2 x i32>
  %32 = extractelement <2 x i32> %31, i64 1
  %33 = icmp slt i32 %32, 0
  %34 = select i1 %33, double 0x4002D97C7F3321D2, double 0x3FE921FB54442D18
  %35 = tail call double @llvm.copysign.f64(double %34, double %u.coerce1) #7
  %36 = fcmp oeq double %u.coerce1, 0.000000e+00
  %37 = select i1 %33, double 0x400921FB54442D18, double 0.000000e+00
  %38 = fcmp olt double %1, %0
  %39 = fsub double 0x3FF921FB54442D18, %26
  %40 = select i1 %38, double %39, double %26
  %41 = fsub double 0x400921FB54442D18, %40
  %42 = select i1 %33, double %41, double %40
  %43 = select i1 %36, double %37, double %42
  %44 = select i1 %30, double %35, double %43
  %45 = select i1 %27, double 0x7FF8000000000000, double %44
  %46 = tail call noundef double @llvm.copysign.f64(double %45, double %u.coerce1) #7
  br label %if.end

if.end:                                           ; preds = %if.else, %entry
  %phi.0 = phi double [ %46, %if.else ], [ 0.000000e+00, %entry ]
  %neg = fneg double %u.coerce2
  %47 = tail call double @llvm.fmuladd.f64(double %neg, double %u.coerce2, double 1.000000e+00)
  store double 1.000000e+00, ptr %rn, align 8, !tbaa !10
  %cmp3.not1615 = icmp slt i32 %n, 1
  br i1 %cmp3.not1615, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %48 = fcmp oeq double %47, 1.000000e+00
  %49 = select i1 %48, double 1.000000e+00, double 5.000000e+00
  %50 = tail call double @llvm.fabs.f64(double %47) #7
  %51 = tail call double @llvm.amdgcn.frexp.mant.f64(double %50)
  %52 = fcmp olt double %51, 0x3FE5555555555555
  %.neg.i.i.i1465 = sext i1 %52 to i32
  %53 = select i1 %52, double 2.000000e+00, double 1.000000e+00
  %54 = fmul double %51, %53
  %55 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %50)
  %56 = add i32 %55, %.neg.i.i.i1465
  %57 = fadd double %54, -1.000000e+00
  %58 = fadd double %54, 1.000000e+00
  %59 = fadd double %58, -1.000000e+00
  %60 = fsub double %54, %59
  %61 = tail call double @llvm.amdgcn.rcp.f64(double %58)
  %62 = fneg double %58
  %63 = tail call double @llvm.fma.f64(double %62, double %61, double 1.000000e+00)
  %64 = tail call double @llvm.fma.f64(double %63, double %61, double %61)
  %65 = tail call double @llvm.fma.f64(double %62, double %64, double 1.000000e+00)
  %66 = tail call double @llvm.fma.f64(double %65, double %64, double %64)
  %67 = fmul double %57, %66
  %68 = fmul double %58, %67
  %69 = fneg double %68
  %70 = tail call double @llvm.fma.f64(double %67, double %58, double %69)
  %71 = tail call double @llvm.fma.f64(double %67, double %60, double %70)
  %72 = fadd double %68, %71
  %73 = fsub double %72, %68
  %74 = fsub double %57, %72
  %75 = fsub double %57, %74
  %76 = fsub double %75, %72
  %77 = fsub double %73, %71
  %78 = fadd double %77, %76
  %79 = fadd double %74, %78
  %80 = fmul double %66, %79
  %81 = fadd double %67, %80
  %82 = fsub double %81, %67
  %83 = fsub double %80, %82
  %84 = fmul double %81, %81
  %85 = fneg double %84
  %86 = tail call double @llvm.fma.f64(double %81, double %81, double %85)
  %87 = fmul double %83, 2.000000e+00
  %88 = tail call double @llvm.fma.f64(double %81, double %87, double %86)
  %89 = fadd double %84, %88
  %90 = fsub double %89, %84
  %91 = fsub double %88, %90
  %92 = tail call double @llvm.fma.f64(double %89, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %93 = tail call double @llvm.fma.f64(double %89, double %92, double 0x3FBE25E43ABE935A)
  %94 = tail call double @llvm.fma.f64(double %89, double %93, double 0x3FC110EF47E6C9C2)
  %95 = tail call double @llvm.fma.f64(double %89, double %94, double 0x3FC3B13BCFA74449)
  %96 = tail call double @llvm.fma.f64(double %89, double %95, double 0x3FC745D171BF3C30)
  %97 = tail call double @llvm.fma.f64(double %89, double %96, double 0x3FCC71C71C7792CE)
  %98 = tail call double @llvm.fma.f64(double %89, double %97, double 0x3FD24924924920DA)
  %99 = tail call double @llvm.fma.f64(double %89, double %98, double 0x3FD999999999999C)
  %100 = sitofp i32 %56 to double
  %101 = fmul double %100, 0x3FE62E42FEFA39EF
  %102 = fneg double %101
  %103 = tail call double @llvm.fma.f64(double %100, double 0x3FE62E42FEFA39EF, double %102)
  %104 = tail call double @llvm.fma.f64(double %100, double 0x3C7ABC9E3B39803F, double %103)
  %105 = fadd double %101, %104
  %106 = fsub double %105, %101
  %107 = fsub double %104, %106
  %108 = tail call double @llvm.ldexp.f64.i32(double %81, i32 1)
  %109 = tail call double @llvm.ldexp.f64.i32(double %83, i32 1)
  %110 = fmul double %81, %89
  %111 = fneg double %110
  %112 = tail call double @llvm.fma.f64(double %89, double %81, double %111)
  %113 = tail call double @llvm.fma.f64(double %89, double %83, double %112)
  %114 = tail call double @llvm.fma.f64(double %91, double %81, double %113)
  %115 = fadd double %110, %114
  %116 = fsub double %115, %110
  %117 = fsub double %114, %116
  %118 = fmul double %89, %99
  %119 = fneg double %118
  %120 = tail call double @llvm.fma.f64(double %89, double %99, double %119)
  %121 = tail call double @llvm.fma.f64(double %91, double %99, double %120)
  %122 = fadd double %118, %121
  %123 = fsub double %122, %118
  %124 = fsub double %121, %123
  %125 = fadd double %122, 0x3FE5555555555555
  %126 = fadd double %125, 0xBFE5555555555555
  %127 = fsub double %122, %126
  %128 = fadd double %124, 0x3C8543B0D5DF274D
  %129 = fadd double %128, %127
  %130 = fadd double %125, %129
  %131 = fsub double %125, %130
  %132 = fadd double %129, %131
  %133 = fmul double %115, %130
  %134 = fneg double %133
  %135 = tail call double @llvm.fma.f64(double %115, double %130, double %134)
  %136 = tail call double @llvm.fma.f64(double %115, double %132, double %135)
  %137 = tail call double @llvm.fma.f64(double %117, double %130, double %136)
  %138 = fadd double %133, %137
  %139 = fsub double %138, %133
  %140 = fsub double %137, %139
  %141 = fadd double %108, %138
  %142 = fsub double %141, %108
  %143 = fsub double %138, %142
  %144 = fadd double %109, %140
  %145 = fadd double %144, %143
  %146 = fadd double %141, %145
  %147 = fsub double %146, %141
  %148 = fsub double %145, %147
  %149 = fadd double %105, %146
  %150 = fsub double %149, %105
  %151 = fsub double %149, %150
  %152 = fsub double %105, %151
  %153 = fsub double %146, %150
  %154 = fadd double %153, %152
  %155 = fadd double %107, %148
  %156 = fsub double %155, %107
  %157 = fsub double %155, %156
  %158 = fsub double %107, %157
  %159 = fsub double %148, %156
  %160 = fadd double %159, %158
  %161 = fadd double %155, %154
  %162 = fadd double %149, %161
  %163 = fsub double %162, %149
  %164 = fsub double %161, %163
  %165 = fadd double %160, %164
  %166 = fadd double %162, %165
  %167 = fsub double %166, %162
  %168 = fsub double %165, %167
  %169 = fmul double %49, %166
  %170 = fneg double %169
  %171 = tail call double @llvm.fma.f64(double %49, double %166, double %170) #7
  %172 = tail call double @llvm.fma.f64(double %49, double %168, double %171) #7
  %173 = fadd double %169, %172
  %174 = fsub double %173, %169
  %175 = fsub double %172, %174
  %176 = tail call double @llvm.fabs.f64(double %169) #7
  %177 = fcmp oeq double %176, 0x7FF0000000000000
  %178 = select i1 %177, double %169, double %173
  %179 = tail call double @llvm.fabs.f64(double %178) #7
  %180 = fcmp oeq double %179, 0x7FF0000000000000
  %181 = select i1 %180, double 0.000000e+00, double %175
  %182 = fmul double %178, 0x3FF71547652B82FE
  %183 = tail call double @llvm.rint.f64(double %182)
  %184 = fneg double %183
  %185 = tail call double @llvm.fma.f64(double %184, double 0x3FE62E42FEFA39EF, double %178)
  %186 = tail call double @llvm.fma.f64(double %184, double 0x3C7ABC9E3B39803F, double %185)
  %187 = tail call double @llvm.fma.f64(double %186, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %188 = tail call double @llvm.fma.f64(double %186, double %187, double 0x3EC71DEE623FDE64)
  %189 = tail call double @llvm.fma.f64(double %186, double %188, double 0x3EFA01997C89E6B0)
  %190 = tail call double @llvm.fma.f64(double %186, double %189, double 0x3F2A01A014761F6E)
  %191 = tail call double @llvm.fma.f64(double %186, double %190, double 0x3F56C16C1852B7B0)
  %192 = tail call double @llvm.fma.f64(double %186, double %191, double 0x3F81111111122322)
  %193 = tail call double @llvm.fma.f64(double %186, double %192, double 0x3FA55555555502A1)
  %194 = tail call double @llvm.fma.f64(double %186, double %193, double 0x3FC5555555555511)
  %195 = tail call double @llvm.fma.f64(double %186, double %194, double 0x3FE000000000000B)
  %196 = tail call double @llvm.fma.f64(double %186, double %195, double 1.000000e+00)
  %197 = tail call double @llvm.fma.f64(double %186, double %196, double 1.000000e+00)
  %198 = fptosi double %183 to i32
  %199 = tail call double @llvm.ldexp.f64.i32(double %197, i32 %198)
  %200 = fcmp ogt double %178, 1.024000e+03
  %201 = select i1 %200, double 0x7FF0000000000000, double %199
  %202 = fcmp olt double %178, -1.075000e+03
  %203 = select i1 %202, double 0.000000e+00, double %201
  %204 = tail call double @llvm.fma.f64(double %203, double %181, double %203) #7
  %205 = tail call double @llvm.fabs.f64(double %203) #7
  %206 = fcmp oeq double %205, 0x7FF0000000000000
  %207 = select i1 %206, double %203, double %204
  %208 = tail call double @llvm.trunc.f64(double %49) #7
  %209 = fcmp oeq double %208, %49
  %210 = fmul double %49, 5.000000e-01
  %211 = tail call double @llvm.trunc.f64(double %210) #7
  %212 = fcmp une double %211, %210
  %213 = and i1 %209, %212
  %214 = select i1 %213, double %47, double 1.000000e+00
  %215 = tail call double @llvm.copysign.f64(double %207, double %214) #7
  %216 = fcmp olt double %47, 0.000000e+00
  %217 = select i1 %209, double %215, double 0x7FF8000000000000
  %218 = select i1 %216, double %217, double %215
  %219 = fcmp oeq double %50, 0x7FF0000000000000
  %220 = fcmp oeq double %47, 0.000000e+00
  %221 = or i1 %220, %219
  %222 = select i1 %220, double 0.000000e+00, double 0x7FF0000000000000
  %223 = select i1 %213, double %47, double 0.000000e+00
  %224 = tail call double @llvm.copysign.f64(double %222, double %223) #7
  %225 = select i1 %221, double %224, double %218
  %226 = fcmp uno double %47, 0.000000e+00
  %227 = fmul double %225, 0x3FE2FEFFF9430384
  %mul1182 = select i1 %226, double 0x7FF8000000000000, double %227
  %mul1183 = fmul double %phi.0, 1.000000e+01
  %228 = tail call double @llvm.fabs.f64(double %mul1183) #7
  %229 = fcmp olt double %228, 0x41D0000000000000
  %230 = tail call double @llvm.amdgcn.trig.preop.f64(double %228, i32 0)
  %231 = tail call double @llvm.amdgcn.trig.preop.f64(double %228, i32 1)
  %232 = fcmp oge double %228, 0x7B00000000000000
  %233 = tail call double @llvm.ldexp.f64.i32(double %228, i32 -128)
  %234 = select i1 %232, double %233, double %228
  %235 = fmul double %231, %234
  %236 = fmul double %230, %234
  %237 = fneg double %236
  %238 = tail call double @llvm.fma.f64(double %230, double %234, double %237)
  %239 = fadd double %235, %238
  %240 = fadd double %236, %239
  %241 = tail call double @llvm.ldexp.f64.i32(double %240, i32 -2)
  %242 = tail call double @llvm.floor.f64(double %241)
  %243 = fsub double %241, %242
  %244 = tail call double @llvm.minnum.f64(double %243, double 0x3FEFFFFFFFFFFFFF)
  %245 = fcmp uno double %241, 0.000000e+00
  %246 = select i1 %245, double %241, double %244
  %247 = tail call double @llvm.fabs.f64(double %241)
  %248 = fcmp oeq double %247, 0x7FF0000000000000
  %249 = select i1 %248, double 0.000000e+00, double %246
  %250 = fsub double %239, %235
  %251 = fsub double %238, %250
  %252 = fsub double %239, %250
  %253 = fsub double %235, %252
  %254 = fadd double %251, %253
  %255 = fneg double %235
  %256 = tail call double @llvm.fma.f64(double %231, double %234, double %255)
  %257 = tail call double @llvm.amdgcn.trig.preop.f64(double %228, i32 2)
  %258 = fmul double %257, %234
  %259 = fadd double %258, %256
  %260 = fadd double %259, %254
  %261 = fsub double %240, %236
  %262 = fsub double %239, %261
  %263 = fadd double %262, %260
  %264 = fsub double %263, %262
  %265 = fsub double %260, %264
  %266 = fsub double %260, %259
  %267 = fsub double %254, %266
  %268 = fsub double %260, %266
  %269 = fsub double %259, %268
  %270 = fadd double %267, %269
  %271 = fsub double %259, %258
  %272 = fsub double %256, %271
  %273 = fsub double %259, %271
  %274 = fsub double %258, %273
  %275 = fadd double %272, %274
  %276 = fadd double %275, %270
  %277 = fneg double %258
  %278 = tail call double @llvm.fma.f64(double %257, double %234, double %277)
  %279 = fadd double %278, %276
  %280 = fadd double %265, %279
  %281 = tail call double @llvm.ldexp.f64.i32(double %249, i32 2)
  %282 = fadd double %263, %281
  %283 = fcmp olt double %282, 0.000000e+00
  %284 = select i1 %283, double 4.000000e+00, double 0.000000e+00
  %285 = fadd double %281, %284
  %286 = fadd double %263, %285
  %287 = fptosi double %286 to i32
  %288 = sitofp i32 %287 to double
  %289 = fsub double %285, %288
  %290 = fadd double %263, %289
  %291 = fsub double %290, %289
  %292 = fsub double %263, %291
  %293 = fadd double %280, %292
  %294 = fcmp oge double %290, 5.000000e-01
  %295 = zext i1 %294 to i32
  %296 = add nsw i32 %295, %287
  %297 = select i1 %294, double 1.000000e+00, double 0.000000e+00
  %298 = fsub double %290, %297
  %299 = fadd double %298, %293
  %300 = fsub double %299, %298
  %301 = fsub double %293, %300
  %302 = fmul double %299, 0x3FF921FB54442D18
  %303 = fneg double %302
  %304 = tail call double @llvm.fma.f64(double %299, double 0x3FF921FB54442D18, double %303)
  %305 = tail call double @llvm.fma.f64(double %299, double 0x3C91A62633145C07, double %304)
  %306 = tail call double @llvm.fma.f64(double %301, double 0x3FF921FB54442D18, double %305)
  %307 = fadd double %302, %306
  %308 = fsub double %307, %302
  %309 = fsub double %306, %308
  %310 = fmul double %228, 0x3FE45F306DC9C883
  %311 = tail call double @llvm.rint.f64(double %310)
  %312 = tail call double @llvm.fma.f64(double %311, double 0xBFF921FB54442D18, double %228)
  %313 = tail call double @llvm.fma.f64(double %311, double 0xBC91A62633145C00, double %312)
  %314 = fmul double %311, 0x3C91A62633145C00
  %315 = fneg double %314
  %316 = tail call double @llvm.fma.f64(double %311, double 0x3C91A62633145C00, double %315)
  %317 = fsub double %312, %314
  %318 = fsub double %312, %317
  %319 = fsub double %318, %314
  %320 = fsub double %317, %313
  %321 = fadd double %320, %319
  %322 = fsub double %321, %316
  %323 = tail call double @llvm.fma.f64(double %311, double 0xB97B839A252049C0, double %322)
  %324 = fadd double %313, %323
  %325 = fsub double %324, %313
  %326 = fsub double %323, %325
  %327 = fptosi double %311 to i32
  %328 = bitcast double %mul1183 to <2 x i32>
  %329 = extractelement <2 x i32> %328, i64 1
  %330 = fcmp one double %228, 0x7FF0000000000000
  %mul1188 = fmul double %u.coerce2, 0x40053CFFC9C22129
  %331 = select i1 %48, double 1.000000e+00, double 4.500000e+00
  %332 = fmul double %331, %166
  %333 = fneg double %332
  %334 = tail call double @llvm.fma.f64(double %331, double %166, double %333) #7
  %335 = tail call double @llvm.fma.f64(double %331, double %168, double %334) #7
  %336 = fadd double %332, %335
  %337 = fsub double %336, %332
  %338 = fsub double %335, %337
  %339 = tail call double @llvm.fabs.f64(double %332) #7
  %340 = fcmp oeq double %339, 0x7FF0000000000000
  %341 = select i1 %340, double %332, double %336
  %342 = tail call double @llvm.fabs.f64(double %341) #7
  %343 = fcmp oeq double %342, 0x7FF0000000000000
  %344 = select i1 %343, double 0.000000e+00, double %338
  %345 = fmul double %341, 0x3FF71547652B82FE
  %346 = tail call double @llvm.rint.f64(double %345)
  %347 = fneg double %346
  %348 = tail call double @llvm.fma.f64(double %347, double 0x3FE62E42FEFA39EF, double %341)
  %349 = tail call double @llvm.fma.f64(double %347, double 0x3C7ABC9E3B39803F, double %348)
  %350 = tail call double @llvm.fma.f64(double %349, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %351 = tail call double @llvm.fma.f64(double %349, double %350, double 0x3EC71DEE623FDE64)
  %352 = tail call double @llvm.fma.f64(double %349, double %351, double 0x3EFA01997C89E6B0)
  %353 = tail call double @llvm.fma.f64(double %349, double %352, double 0x3F2A01A014761F6E)
  %354 = tail call double @llvm.fma.f64(double %349, double %353, double 0x3F56C16C1852B7B0)
  %355 = tail call double @llvm.fma.f64(double %349, double %354, double 0x3F81111111122322)
  %356 = tail call double @llvm.fma.f64(double %349, double %355, double 0x3FA55555555502A1)
  %357 = tail call double @llvm.fma.f64(double %349, double %356, double 0x3FC5555555555511)
  %358 = tail call double @llvm.fma.f64(double %349, double %357, double 0x3FE000000000000B)
  %359 = tail call double @llvm.fma.f64(double %349, double %358, double 1.000000e+00)
  %360 = tail call double @llvm.fma.f64(double %349, double %359, double 1.000000e+00)
  %361 = fptosi double %346 to i32
  %362 = tail call double @llvm.ldexp.f64.i32(double %360, i32 %361)
  %363 = fcmp ogt double %341, 1.024000e+03
  %364 = select i1 %363, double 0x7FF0000000000000, double %362
  %365 = fcmp olt double %341, -1.075000e+03
  %366 = select i1 %365, double 0.000000e+00, double %364
  %367 = tail call double @llvm.fma.f64(double %366, double %344, double %366) #7
  %368 = tail call double @llvm.fabs.f64(double %366) #7
  %369 = fcmp oeq double %368, 0x7FF0000000000000
  %370 = select i1 %369, double %366, double %367
  %371 = tail call double @llvm.trunc.f64(double %331) #7
  %372 = fcmp oeq double %371, %331
  %373 = fmul double %331, 5.000000e-01
  %374 = tail call double @llvm.trunc.f64(double %373) #7
  %375 = fcmp une double %374, %373
  %376 = and i1 %372, %375
  %377 = select i1 %376, double %47, double 1.000000e+00
  %378 = tail call double @llvm.copysign.f64(double %370, double %377) #7
  %379 = select i1 %372, double %378, double 0x7FF8000000000000
  %380 = select i1 %216, double %379, double %378
  %381 = select i1 %376, double %47, double 0.000000e+00
  %382 = tail call double @llvm.copysign.f64(double %222, double %381) #7
  %383 = select i1 %221, double %382, double %380
  %384 = select i1 %226, double 0x7FF8000000000000, double %383
  %mul1190 = fmul double %mul1188, %384
  %mul1191 = fmul double %phi.0, 9.000000e+00
  %385 = tail call double @llvm.fabs.f64(double %mul1191) #7
  %386 = fcmp olt double %385, 0x41D0000000000000
  %387 = tail call double @llvm.amdgcn.trig.preop.f64(double %385, i32 0)
  %388 = tail call double @llvm.amdgcn.trig.preop.f64(double %385, i32 1)
  %389 = fcmp oge double %385, 0x7B00000000000000
  %390 = tail call double @llvm.ldexp.f64.i32(double %385, i32 -128)
  %391 = select i1 %389, double %390, double %385
  %392 = fmul double %388, %391
  %393 = fmul double %387, %391
  %394 = fneg double %393
  %395 = tail call double @llvm.fma.f64(double %387, double %391, double %394)
  %396 = fadd double %392, %395
  %397 = fadd double %393, %396
  %398 = tail call double @llvm.ldexp.f64.i32(double %397, i32 -2)
  %399 = tail call double @llvm.floor.f64(double %398)
  %400 = fsub double %398, %399
  %401 = tail call double @llvm.minnum.f64(double %400, double 0x3FEFFFFFFFFFFFFF)
  %402 = fcmp uno double %398, 0.000000e+00
  %403 = select i1 %402, double %398, double %401
  %404 = tail call double @llvm.fabs.f64(double %398)
  %405 = fcmp oeq double %404, 0x7FF0000000000000
  %406 = select i1 %405, double 0.000000e+00, double %403
  %407 = fsub double %396, %392
  %408 = fsub double %395, %407
  %409 = fsub double %396, %407
  %410 = fsub double %392, %409
  %411 = fadd double %408, %410
  %412 = fneg double %392
  %413 = tail call double @llvm.fma.f64(double %388, double %391, double %412)
  %414 = tail call double @llvm.amdgcn.trig.preop.f64(double %385, i32 2)
  %415 = fmul double %414, %391
  %416 = fadd double %415, %413
  %417 = fadd double %416, %411
  %418 = fsub double %397, %393
  %419 = fsub double %396, %418
  %420 = fadd double %419, %417
  %421 = fsub double %420, %419
  %422 = fsub double %417, %421
  %423 = fsub double %417, %416
  %424 = fsub double %411, %423
  %425 = fsub double %417, %423
  %426 = fsub double %416, %425
  %427 = fadd double %424, %426
  %428 = fsub double %416, %415
  %429 = fsub double %413, %428
  %430 = fsub double %416, %428
  %431 = fsub double %415, %430
  %432 = fadd double %429, %431
  %433 = fadd double %432, %427
  %434 = fneg double %415
  %435 = tail call double @llvm.fma.f64(double %414, double %391, double %434)
  %436 = fadd double %435, %433
  %437 = fadd double %422, %436
  %438 = tail call double @llvm.ldexp.f64.i32(double %406, i32 2)
  %439 = fadd double %420, %438
  %440 = fcmp olt double %439, 0.000000e+00
  %441 = select i1 %440, double 4.000000e+00, double 0.000000e+00
  %442 = fadd double %438, %441
  %443 = fadd double %420, %442
  %444 = fptosi double %443 to i32
  %445 = sitofp i32 %444 to double
  %446 = fsub double %442, %445
  %447 = fadd double %420, %446
  %448 = fsub double %447, %446
  %449 = fsub double %420, %448
  %450 = fadd double %437, %449
  %451 = fcmp oge double %447, 5.000000e-01
  %452 = zext i1 %451 to i32
  %453 = add nsw i32 %452, %444
  %454 = select i1 %451, double 1.000000e+00, double 0.000000e+00
  %455 = fsub double %447, %454
  %456 = fadd double %455, %450
  %457 = fsub double %456, %455
  %458 = fsub double %450, %457
  %459 = fmul double %456, 0x3FF921FB54442D18
  %460 = fneg double %459
  %461 = tail call double @llvm.fma.f64(double %456, double 0x3FF921FB54442D18, double %460)
  %462 = tail call double @llvm.fma.f64(double %456, double 0x3C91A62633145C07, double %461)
  %463 = tail call double @llvm.fma.f64(double %458, double 0x3FF921FB54442D18, double %462)
  %464 = fadd double %459, %463
  %465 = fsub double %464, %459
  %466 = fsub double %463, %465
  %467 = fmul double %385, 0x3FE45F306DC9C883
  %468 = tail call double @llvm.rint.f64(double %467)
  %469 = tail call double @llvm.fma.f64(double %468, double 0xBFF921FB54442D18, double %385)
  %470 = tail call double @llvm.fma.f64(double %468, double 0xBC91A62633145C00, double %469)
  %471 = fmul double %468, 0x3C91A62633145C00
  %472 = fneg double %471
  %473 = tail call double @llvm.fma.f64(double %468, double 0x3C91A62633145C00, double %472)
  %474 = fsub double %469, %471
  %475 = fsub double %469, %474
  %476 = fsub double %475, %471
  %477 = fsub double %474, %470
  %478 = fadd double %477, %476
  %479 = fsub double %478, %473
  %480 = tail call double @llvm.fma.f64(double %468, double 0xB97B839A252049C0, double %479)
  %481 = fadd double %470, %480
  %482 = fsub double %481, %470
  %483 = fsub double %480, %482
  %484 = fptosi double %468 to i32
  %485 = bitcast double %mul1191 to <2 x i32>
  %486 = extractelement <2 x i32> %485, i64 1
  %487 = fcmp one double %385, 0x7FF0000000000000
  %488 = select i1 %48, double 1.000000e+00, double 4.000000e+00
  %489 = fmul double %488, %166
  %490 = fneg double %489
  %491 = tail call double @llvm.fma.f64(double %488, double %166, double %490) #7
  %492 = tail call double @llvm.fma.f64(double %488, double %168, double %491) #7
  %493 = fadd double %489, %492
  %494 = fsub double %493, %489
  %495 = fsub double %492, %494
  %496 = tail call double @llvm.fabs.f64(double %489) #7
  %497 = fcmp oeq double %496, 0x7FF0000000000000
  %498 = select i1 %497, double %489, double %493
  %499 = tail call double @llvm.fabs.f64(double %498) #7
  %500 = fcmp oeq double %499, 0x7FF0000000000000
  %501 = select i1 %500, double 0.000000e+00, double %495
  %502 = fmul double %498, 0x3FF71547652B82FE
  %503 = tail call double @llvm.rint.f64(double %502)
  %504 = fneg double %503
  %505 = tail call double @llvm.fma.f64(double %504, double 0x3FE62E42FEFA39EF, double %498)
  %506 = tail call double @llvm.fma.f64(double %504, double 0x3C7ABC9E3B39803F, double %505)
  %507 = tail call double @llvm.fma.f64(double %506, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %508 = tail call double @llvm.fma.f64(double %506, double %507, double 0x3EC71DEE623FDE64)
  %509 = tail call double @llvm.fma.f64(double %506, double %508, double 0x3EFA01997C89E6B0)
  %510 = tail call double @llvm.fma.f64(double %506, double %509, double 0x3F2A01A014761F6E)
  %511 = tail call double @llvm.fma.f64(double %506, double %510, double 0x3F56C16C1852B7B0)
  %512 = tail call double @llvm.fma.f64(double %506, double %511, double 0x3F81111111122322)
  %513 = tail call double @llvm.fma.f64(double %506, double %512, double 0x3FA55555555502A1)
  %514 = tail call double @llvm.fma.f64(double %506, double %513, double 0x3FC5555555555511)
  %515 = tail call double @llvm.fma.f64(double %506, double %514, double 0x3FE000000000000B)
  %516 = tail call double @llvm.fma.f64(double %506, double %515, double 1.000000e+00)
  %517 = tail call double @llvm.fma.f64(double %506, double %516, double 1.000000e+00)
  %518 = fptosi double %503 to i32
  %519 = tail call double @llvm.ldexp.f64.i32(double %517, i32 %518)
  %520 = fcmp ogt double %498, 1.024000e+03
  %521 = select i1 %520, double 0x7FF0000000000000, double %519
  %522 = fcmp olt double %498, -1.075000e+03
  %523 = select i1 %522, double 0.000000e+00, double %521
  %524 = tail call double @llvm.fma.f64(double %523, double %501, double %523) #7
  %525 = tail call double @llvm.fabs.f64(double %523) #7
  %526 = fcmp oeq double %525, 0x7FF0000000000000
  %527 = select i1 %526, double %523, double %524
  %528 = tail call double @llvm.trunc.f64(double %488) #7
  %529 = fcmp oeq double %528, %488
  %530 = fmul double %488, 5.000000e-01
  %531 = tail call double @llvm.trunc.f64(double %530) #7
  %532 = fcmp une double %531, %530
  %533 = and i1 %529, %532
  %534 = select i1 %533, double %47, double 1.000000e+00
  %535 = tail call double @llvm.copysign.f64(double %527, double %534) #7
  %536 = select i1 %529, double %535, double 0x7FF8000000000000
  %537 = select i1 %216, double %536, double %535
  %538 = select i1 %533, double %47, double 0.000000e+00
  %539 = tail call double @llvm.copysign.f64(double %222, double %538) #7
  %540 = select i1 %221, double %539, double %537
  %541 = fmul double %540, 0x3E5AD6AC749DC03B
  %mul1199 = select i1 %226, double 0x7FF8000000000000, double %541
  %mul1200 = fmul double %u.coerce2, 0x41B3832FB9800000
  %542 = tail call double @llvm.fmuladd.f64(double %mul1200, double %u.coerce2, double 0xC1706E7908000000)
  %mul1202 = fmul double %542, %mul1199
  %mul1203 = fmul double %phi.0, 8.000000e+00
  %543 = tail call double @llvm.fabs.f64(double %mul1203) #7
  %544 = fcmp olt double %543, 0x41D0000000000000
  %545 = tail call double @llvm.amdgcn.trig.preop.f64(double %543, i32 0)
  %546 = tail call double @llvm.amdgcn.trig.preop.f64(double %543, i32 1)
  %547 = fcmp oge double %543, 0x7B00000000000000
  %548 = tail call double @llvm.ldexp.f64.i32(double %543, i32 -128)
  %549 = select i1 %547, double %548, double %543
  %550 = fmul double %546, %549
  %551 = fmul double %545, %549
  %552 = fneg double %551
  %553 = tail call double @llvm.fma.f64(double %545, double %549, double %552)
  %554 = fadd double %550, %553
  %555 = fadd double %551, %554
  %556 = tail call double @llvm.ldexp.f64.i32(double %555, i32 -2)
  %557 = tail call double @llvm.floor.f64(double %556)
  %558 = fsub double %556, %557
  %559 = tail call double @llvm.minnum.f64(double %558, double 0x3FEFFFFFFFFFFFFF)
  %560 = fcmp uno double %556, 0.000000e+00
  %561 = select i1 %560, double %556, double %559
  %562 = tail call double @llvm.fabs.f64(double %556)
  %563 = fcmp oeq double %562, 0x7FF0000000000000
  %564 = select i1 %563, double 0.000000e+00, double %561
  %565 = fsub double %554, %550
  %566 = fsub double %553, %565
  %567 = fsub double %554, %565
  %568 = fsub double %550, %567
  %569 = fadd double %566, %568
  %570 = fneg double %550
  %571 = tail call double @llvm.fma.f64(double %546, double %549, double %570)
  %572 = tail call double @llvm.amdgcn.trig.preop.f64(double %543, i32 2)
  %573 = fmul double %572, %549
  %574 = fadd double %573, %571
  %575 = fadd double %574, %569
  %576 = fsub double %555, %551
  %577 = fsub double %554, %576
  %578 = fadd double %577, %575
  %579 = fsub double %578, %577
  %580 = fsub double %575, %579
  %581 = fsub double %575, %574
  %582 = fsub double %569, %581
  %583 = fsub double %575, %581
  %584 = fsub double %574, %583
  %585 = fadd double %582, %584
  %586 = fsub double %574, %573
  %587 = fsub double %571, %586
  %588 = fsub double %574, %586
  %589 = fsub double %573, %588
  %590 = fadd double %587, %589
  %591 = fadd double %590, %585
  %592 = fneg double %573
  %593 = tail call double @llvm.fma.f64(double %572, double %549, double %592)
  %594 = fadd double %593, %591
  %595 = fadd double %580, %594
  %596 = tail call double @llvm.ldexp.f64.i32(double %564, i32 2)
  %597 = fadd double %578, %596
  %598 = fcmp olt double %597, 0.000000e+00
  %599 = select i1 %598, double 4.000000e+00, double 0.000000e+00
  %600 = fadd double %596, %599
  %601 = fadd double %578, %600
  %602 = fptosi double %601 to i32
  %603 = sitofp i32 %602 to double
  %604 = fsub double %600, %603
  %605 = fadd double %578, %604
  %606 = fsub double %605, %604
  %607 = fsub double %578, %606
  %608 = fadd double %595, %607
  %609 = fcmp oge double %605, 5.000000e-01
  %610 = zext i1 %609 to i32
  %611 = add nsw i32 %610, %602
  %612 = select i1 %609, double 1.000000e+00, double 0.000000e+00
  %613 = fsub double %605, %612
  %614 = fadd double %613, %608
  %615 = fsub double %614, %613
  %616 = fsub double %608, %615
  %617 = fmul double %614, 0x3FF921FB54442D18
  %618 = fneg double %617
  %619 = tail call double @llvm.fma.f64(double %614, double 0x3FF921FB54442D18, double %618)
  %620 = tail call double @llvm.fma.f64(double %614, double 0x3C91A62633145C07, double %619)
  %621 = tail call double @llvm.fma.f64(double %616, double 0x3FF921FB54442D18, double %620)
  %622 = fadd double %617, %621
  %623 = fsub double %622, %617
  %624 = fsub double %621, %623
  %625 = fmul double %543, 0x3FE45F306DC9C883
  %626 = tail call double @llvm.rint.f64(double %625)
  %627 = tail call double @llvm.fma.f64(double %626, double 0xBFF921FB54442D18, double %543)
  %628 = tail call double @llvm.fma.f64(double %626, double 0xBC91A62633145C00, double %627)
  %629 = fmul double %626, 0x3C91A62633145C00
  %630 = fneg double %629
  %631 = tail call double @llvm.fma.f64(double %626, double 0x3C91A62633145C00, double %630)
  %632 = fsub double %627, %629
  %633 = fsub double %627, %632
  %634 = fsub double %633, %629
  %635 = fsub double %632, %628
  %636 = fadd double %635, %634
  %637 = fsub double %636, %631
  %638 = tail call double @llvm.fma.f64(double %626, double 0xB97B839A252049C0, double %637)
  %639 = fadd double %628, %638
  %640 = fsub double %639, %628
  %641 = fsub double %638, %640
  %642 = fptosi double %626 to i32
  %643 = bitcast double %mul1203 to <2 x i32>
  %644 = extractelement <2 x i32> %643, i64 1
  %645 = fcmp one double %543, 0x7FF0000000000000
  %646 = select i1 %48, double 1.000000e+00, double 3.500000e+00
  %647 = fmul double %646, %166
  %648 = fneg double %647
  %649 = tail call double @llvm.fma.f64(double %646, double %166, double %648) #7
  %650 = tail call double @llvm.fma.f64(double %646, double %168, double %649) #7
  %651 = fadd double %647, %650
  %652 = fsub double %651, %647
  %653 = fsub double %650, %652
  %654 = tail call double @llvm.fabs.f64(double %647) #7
  %655 = fcmp oeq double %654, 0x7FF0000000000000
  %656 = select i1 %655, double %647, double %651
  %657 = tail call double @llvm.fabs.f64(double %656) #7
  %658 = fcmp oeq double %657, 0x7FF0000000000000
  %659 = select i1 %658, double 0.000000e+00, double %653
  %660 = fmul double %656, 0x3FF71547652B82FE
  %661 = tail call double @llvm.rint.f64(double %660)
  %662 = fneg double %661
  %663 = tail call double @llvm.fma.f64(double %662, double 0x3FE62E42FEFA39EF, double %656)
  %664 = tail call double @llvm.fma.f64(double %662, double 0x3C7ABC9E3B39803F, double %663)
  %665 = tail call double @llvm.fma.f64(double %664, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %666 = tail call double @llvm.fma.f64(double %664, double %665, double 0x3EC71DEE623FDE64)
  %667 = tail call double @llvm.fma.f64(double %664, double %666, double 0x3EFA01997C89E6B0)
  %668 = tail call double @llvm.fma.f64(double %664, double %667, double 0x3F2A01A014761F6E)
  %669 = tail call double @llvm.fma.f64(double %664, double %668, double 0x3F56C16C1852B7B0)
  %670 = tail call double @llvm.fma.f64(double %664, double %669, double 0x3F81111111122322)
  %671 = tail call double @llvm.fma.f64(double %664, double %670, double 0x3FA55555555502A1)
  %672 = tail call double @llvm.fma.f64(double %664, double %671, double 0x3FC5555555555511)
  %673 = tail call double @llvm.fma.f64(double %664, double %672, double 0x3FE000000000000B)
  %674 = tail call double @llvm.fma.f64(double %664, double %673, double 1.000000e+00)
  %675 = tail call double @llvm.fma.f64(double %664, double %674, double 1.000000e+00)
  %676 = fptosi double %661 to i32
  %677 = tail call double @llvm.ldexp.f64.i32(double %675, i32 %676)
  %678 = fcmp ogt double %656, 1.024000e+03
  %679 = select i1 %678, double 0x7FF0000000000000, double %677
  %680 = fcmp olt double %656, -1.075000e+03
  %681 = select i1 %680, double 0.000000e+00, double %679
  %682 = tail call double @llvm.fma.f64(double %681, double %659, double %681) #7
  %683 = tail call double @llvm.fabs.f64(double %681) #7
  %684 = fcmp oeq double %683, 0x7FF0000000000000
  %685 = select i1 %684, double %681, double %682
  %686 = tail call double @llvm.trunc.f64(double %646) #7
  %687 = fcmp oeq double %686, %646
  %688 = fmul double %646, 5.000000e-01
  %689 = tail call double @llvm.trunc.f64(double %688) #7
  %690 = fcmp une double %689, %688
  %691 = and i1 %687, %690
  %692 = select i1 %691, double %47, double 1.000000e+00
  %693 = tail call double @llvm.copysign.f64(double %685, double %692) #7
  %694 = select i1 %687, double %693, double 0x7FF8000000000000
  %695 = select i1 %216, double %694, double %693
  %696 = select i1 %691, double %47, double 0.000000e+00
  %697 = tail call double @llvm.copysign.f64(double %222, double %696) #7
  %698 = select i1 %221, double %697, double %695
  %699 = fmul double %698, 0x3E88A71DE2BC0955
  %mul1210 = select i1 %226, double 0x7FF8000000000000, double %699
  %700 = fcmp oeq double %u.coerce2, 1.000000e+00
  %701 = select i1 %700, double 1.000000e+00, double 3.000000e+00
  %702 = tail call double @llvm.fabs.f64(double %u.coerce2) #7
  %703 = tail call double @llvm.amdgcn.frexp.mant.f64(double %702)
  %704 = fcmp olt double %703, 0x3FE5555555555555
  %.neg.i.i.i1484 = sext i1 %704 to i32
  %705 = select i1 %704, double 2.000000e+00, double 1.000000e+00
  %706 = fmul double %703, %705
  %707 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %702)
  %708 = add i32 %707, %.neg.i.i.i1484
  %709 = fadd double %706, -1.000000e+00
  %710 = fadd double %706, 1.000000e+00
  %711 = fadd double %710, -1.000000e+00
  %712 = fsub double %706, %711
  %713 = tail call double @llvm.amdgcn.rcp.f64(double %710)
  %714 = fneg double %710
  %715 = tail call double @llvm.fma.f64(double %714, double %713, double 1.000000e+00)
  %716 = tail call double @llvm.fma.f64(double %715, double %713, double %713)
  %717 = tail call double @llvm.fma.f64(double %714, double %716, double 1.000000e+00)
  %718 = tail call double @llvm.fma.f64(double %717, double %716, double %716)
  %719 = fmul double %709, %718
  %720 = fmul double %710, %719
  %721 = fneg double %720
  %722 = tail call double @llvm.fma.f64(double %719, double %710, double %721)
  %723 = tail call double @llvm.fma.f64(double %719, double %712, double %722)
  %724 = fadd double %720, %723
  %725 = fsub double %724, %720
  %726 = fsub double %709, %724
  %727 = fsub double %709, %726
  %728 = fsub double %727, %724
  %729 = fsub double %725, %723
  %730 = fadd double %729, %728
  %731 = fadd double %726, %730
  %732 = fmul double %718, %731
  %733 = fadd double %719, %732
  %734 = fsub double %733, %719
  %735 = fsub double %732, %734
  %736 = fmul double %733, %733
  %737 = fneg double %736
  %738 = tail call double @llvm.fma.f64(double %733, double %733, double %737)
  %739 = fmul double %735, 2.000000e+00
  %740 = tail call double @llvm.fma.f64(double %733, double %739, double %738)
  %741 = fadd double %736, %740
  %742 = fsub double %741, %736
  %743 = fsub double %740, %742
  %744 = tail call double @llvm.fma.f64(double %741, double 0x3FBDEE674222DE17, double 0x3FBA6564968915A9)
  %745 = tail call double @llvm.fma.f64(double %741, double %744, double 0x3FBE25E43ABE935A)
  %746 = tail call double @llvm.fma.f64(double %741, double %745, double 0x3FC110EF47E6C9C2)
  %747 = tail call double @llvm.fma.f64(double %741, double %746, double 0x3FC3B13BCFA74449)
  %748 = tail call double @llvm.fma.f64(double %741, double %747, double 0x3FC745D171BF3C30)
  %749 = tail call double @llvm.fma.f64(double %741, double %748, double 0x3FCC71C71C7792CE)
  %750 = tail call double @llvm.fma.f64(double %741, double %749, double 0x3FD24924924920DA)
  %751 = tail call double @llvm.fma.f64(double %741, double %750, double 0x3FD999999999999C)
  %752 = sitofp i32 %708 to double
  %753 = fmul double %752, 0x3FE62E42FEFA39EF
  %754 = fneg double %753
  %755 = tail call double @llvm.fma.f64(double %752, double 0x3FE62E42FEFA39EF, double %754)
  %756 = tail call double @llvm.fma.f64(double %752, double 0x3C7ABC9E3B39803F, double %755)
  %757 = fadd double %753, %756
  %758 = fsub double %757, %753
  %759 = fsub double %756, %758
  %760 = tail call double @llvm.ldexp.f64.i32(double %733, i32 1)
  %761 = tail call double @llvm.ldexp.f64.i32(double %735, i32 1)
  %762 = fmul double %733, %741
  %763 = fneg double %762
  %764 = tail call double @llvm.fma.f64(double %741, double %733, double %763)
  %765 = tail call double @llvm.fma.f64(double %741, double %735, double %764)
  %766 = tail call double @llvm.fma.f64(double %743, double %733, double %765)
  %767 = fadd double %762, %766
  %768 = fsub double %767, %762
  %769 = fsub double %766, %768
  %770 = fmul double %741, %751
  %771 = fneg double %770
  %772 = tail call double @llvm.fma.f64(double %741, double %751, double %771)
  %773 = tail call double @llvm.fma.f64(double %743, double %751, double %772)
  %774 = fadd double %770, %773
  %775 = fsub double %774, %770
  %776 = fsub double %773, %775
  %777 = fadd double %774, 0x3FE5555555555555
  %778 = fadd double %777, 0xBFE5555555555555
  %779 = fsub double %774, %778
  %780 = fadd double %776, 0x3C8543B0D5DF274D
  %781 = fadd double %780, %779
  %782 = fadd double %777, %781
  %783 = fsub double %777, %782
  %784 = fadd double %781, %783
  %785 = fmul double %767, %782
  %786 = fneg double %785
  %787 = tail call double @llvm.fma.f64(double %767, double %782, double %786)
  %788 = tail call double @llvm.fma.f64(double %767, double %784, double %787)
  %789 = tail call double @llvm.fma.f64(double %769, double %782, double %788)
  %790 = fadd double %785, %789
  %791 = fsub double %790, %785
  %792 = fsub double %789, %791
  %793 = fadd double %760, %790
  %794 = fsub double %793, %760
  %795 = fsub double %790, %794
  %796 = fadd double %761, %792
  %797 = fadd double %796, %795
  %798 = fadd double %793, %797
  %799 = fsub double %798, %793
  %800 = fsub double %797, %799
  %801 = fadd double %757, %798
  %802 = fsub double %801, %757
  %803 = fsub double %801, %802
  %804 = fsub double %757, %803
  %805 = fsub double %798, %802
  %806 = fadd double %805, %804
  %807 = fadd double %759, %800
  %808 = fsub double %807, %759
  %809 = fsub double %807, %808
  %810 = fsub double %759, %809
  %811 = fsub double %800, %808
  %812 = fadd double %811, %810
  %813 = fadd double %807, %806
  %814 = fadd double %801, %813
  %815 = fsub double %814, %801
  %816 = fsub double %813, %815
  %817 = fadd double %812, %816
  %818 = fadd double %814, %817
  %819 = fsub double %818, %814
  %820 = fsub double %817, %819
  %821 = fmul double %701, %818
  %822 = fneg double %821
  %823 = tail call double @llvm.fma.f64(double %701, double %818, double %822) #7
  %824 = tail call double @llvm.fma.f64(double %701, double %820, double %823) #7
  %825 = fadd double %821, %824
  %826 = fsub double %825, %821
  %827 = fsub double %824, %826
  %828 = tail call double @llvm.fabs.f64(double %821) #7
  %829 = fcmp oeq double %828, 0x7FF0000000000000
  %830 = select i1 %829, double %821, double %825
  %831 = tail call double @llvm.fabs.f64(double %830) #7
  %832 = fcmp oeq double %831, 0x7FF0000000000000
  %833 = select i1 %832, double 0.000000e+00, double %827
  %834 = fmul double %830, 0x3FF71547652B82FE
  %835 = tail call double @llvm.rint.f64(double %834)
  %836 = fneg double %835
  %837 = tail call double @llvm.fma.f64(double %836, double 0x3FE62E42FEFA39EF, double %830)
  %838 = tail call double @llvm.fma.f64(double %836, double 0x3C7ABC9E3B39803F, double %837)
  %839 = tail call double @llvm.fma.f64(double %838, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %840 = tail call double @llvm.fma.f64(double %838, double %839, double 0x3EC71DEE623FDE64)
  %841 = tail call double @llvm.fma.f64(double %838, double %840, double 0x3EFA01997C89E6B0)
  %842 = tail call double @llvm.fma.f64(double %838, double %841, double 0x3F2A01A014761F6E)
  %843 = tail call double @llvm.fma.f64(double %838, double %842, double 0x3F56C16C1852B7B0)
  %844 = tail call double @llvm.fma.f64(double %838, double %843, double 0x3F81111111122322)
  %845 = tail call double @llvm.fma.f64(double %838, double %844, double 0x3FA55555555502A1)
  %846 = tail call double @llvm.fma.f64(double %838, double %845, double 0x3FC5555555555511)
  %847 = tail call double @llvm.fma.f64(double %838, double %846, double 0x3FE000000000000B)
  %848 = tail call double @llvm.fma.f64(double %838, double %847, double 1.000000e+00)
  %849 = tail call double @llvm.fma.f64(double %838, double %848, double 1.000000e+00)
  %850 = fptosi double %835 to i32
  %851 = tail call double @llvm.ldexp.f64.i32(double %849, i32 %850)
  %852 = fcmp ogt double %830, 1.024000e+03
  %853 = select i1 %852, double 0x7FF0000000000000, double %851
  %854 = fcmp olt double %830, -1.075000e+03
  %855 = select i1 %854, double 0.000000e+00, double %853
  %856 = tail call double @llvm.fma.f64(double %855, double %833, double %855) #7
  %857 = tail call double @llvm.fabs.f64(double %855) #7
  %858 = fcmp oeq double %857, 0x7FF0000000000000
  %859 = select i1 %858, double %855, double %856
  %860 = tail call double @llvm.trunc.f64(double %701) #7
  %861 = fcmp oeq double %860, %701
  %862 = fmul double %701, 5.000000e-01
  %863 = tail call double @llvm.trunc.f64(double %862) #7
  %864 = fcmp une double %863, %862
  %865 = and i1 %861, %864
  %866 = select i1 %865, double %u.coerce2, double 1.000000e+00
  %867 = tail call double @llvm.copysign.f64(double %859, double %866) #7
  %868 = fcmp olt double %u.coerce2, 0.000000e+00
  %869 = select i1 %861, double %867, double 0x7FF8000000000000
  %870 = select i1 %868, double %869, double %867
  %871 = fcmp oeq double %702, 0x7FF0000000000000
  %872 = fcmp oeq double %u.coerce2, 0.000000e+00
  %873 = or i1 %872, %871
  %874 = select i1 %872, double 0.000000e+00, double 0x7FF0000000000000
  %875 = select i1 %865, double %u.coerce2, double 0.000000e+00
  %876 = tail call double @llvm.copysign.f64(double %874, double %875) #7
  %877 = select i1 %873, double %876, double %870
  %878 = fcmp uno double %u.coerce2, 0.000000e+00
  %879 = select i1 %878, double 0x7FF8000000000000, double %877
  %neg1214 = fmul double %u.coerce2, 0xC1706E7908000000
  %880 = tail call double @llvm.fmuladd.f64(double %879, double 0x419A043FA2000000, double %neg1214)
  %mul1215 = fmul double %880, %mul1210
  %mul1216 = fmul double %phi.0, 7.000000e+00
  %881 = tail call double @llvm.fabs.f64(double %mul1216) #7
  %882 = fcmp olt double %881, 0x41D0000000000000
  %883 = tail call double @llvm.amdgcn.trig.preop.f64(double %881, i32 0)
  %884 = tail call double @llvm.amdgcn.trig.preop.f64(double %881, i32 1)
  %885 = fcmp oge double %881, 0x7B00000000000000
  %886 = tail call double @llvm.ldexp.f64.i32(double %881, i32 -128)
  %887 = select i1 %885, double %886, double %881
  %888 = fmul double %884, %887
  %889 = fmul double %883, %887
  %890 = fneg double %889
  %891 = tail call double @llvm.fma.f64(double %883, double %887, double %890)
  %892 = fadd double %888, %891
  %893 = fadd double %889, %892
  %894 = tail call double @llvm.ldexp.f64.i32(double %893, i32 -2)
  %895 = tail call double @llvm.floor.f64(double %894)
  %896 = fsub double %894, %895
  %897 = tail call double @llvm.minnum.f64(double %896, double 0x3FEFFFFFFFFFFFFF)
  %898 = fcmp uno double %894, 0.000000e+00
  %899 = select i1 %898, double %894, double %897
  %900 = tail call double @llvm.fabs.f64(double %894)
  %901 = fcmp oeq double %900, 0x7FF0000000000000
  %902 = select i1 %901, double 0.000000e+00, double %899
  %903 = fsub double %892, %888
  %904 = fsub double %891, %903
  %905 = fsub double %892, %903
  %906 = fsub double %888, %905
  %907 = fadd double %904, %906
  %908 = fneg double %888
  %909 = tail call double @llvm.fma.f64(double %884, double %887, double %908)
  %910 = tail call double @llvm.amdgcn.trig.preop.f64(double %881, i32 2)
  %911 = fmul double %910, %887
  %912 = fadd double %911, %909
  %913 = fadd double %912, %907
  %914 = fsub double %893, %889
  %915 = fsub double %892, %914
  %916 = fadd double %915, %913
  %917 = fsub double %916, %915
  %918 = fsub double %913, %917
  %919 = fsub double %913, %912
  %920 = fsub double %907, %919
  %921 = fsub double %913, %919
  %922 = fsub double %912, %921
  %923 = fadd double %920, %922
  %924 = fsub double %912, %911
  %925 = fsub double %909, %924
  %926 = fsub double %912, %924
  %927 = fsub double %911, %926
  %928 = fadd double %925, %927
  %929 = fadd double %928, %923
  %930 = fneg double %911
  %931 = tail call double @llvm.fma.f64(double %910, double %887, double %930)
  %932 = fadd double %931, %929
  %933 = fadd double %918, %932
  %934 = tail call double @llvm.ldexp.f64.i32(double %902, i32 2)
  %935 = fadd double %916, %934
  %936 = fcmp olt double %935, 0.000000e+00
  %937 = select i1 %936, double 4.000000e+00, double 0.000000e+00
  %938 = fadd double %934, %937
  %939 = fadd double %916, %938
  %940 = fptosi double %939 to i32
  %941 = sitofp i32 %940 to double
  %942 = fsub double %938, %941
  %943 = fadd double %916, %942
  %944 = fsub double %943, %942
  %945 = fsub double %916, %944
  %946 = fadd double %933, %945
  %947 = fcmp oge double %943, 5.000000e-01
  %948 = zext i1 %947 to i32
  %949 = add nsw i32 %948, %940
  %950 = select i1 %947, double 1.000000e+00, double 0.000000e+00
  %951 = fsub double %943, %950
  %952 = fadd double %951, %946
  %953 = fsub double %952, %951
  %954 = fsub double %946, %953
  %955 = fmul double %952, 0x3FF921FB54442D18
  %956 = fneg double %955
  %957 = tail call double @llvm.fma.f64(double %952, double 0x3FF921FB54442D18, double %956)
  %958 = tail call double @llvm.fma.f64(double %952, double 0x3C91A62633145C07, double %957)
  %959 = tail call double @llvm.fma.f64(double %954, double 0x3FF921FB54442D18, double %958)
  %960 = fadd double %955, %959
  %961 = fsub double %960, %955
  %962 = fsub double %959, %961
  %963 = fmul double %881, 0x3FE45F306DC9C883
  %964 = tail call double @llvm.rint.f64(double %963)
  %965 = tail call double @llvm.fma.f64(double %964, double 0xBFF921FB54442D18, double %881)
  %966 = tail call double @llvm.fma.f64(double %964, double 0xBC91A62633145C00, double %965)
  %967 = fmul double %964, 0x3C91A62633145C00
  %968 = fneg double %967
  %969 = tail call double @llvm.fma.f64(double %964, double 0x3C91A62633145C00, double %968)
  %970 = fsub double %965, %967
  %971 = fsub double %965, %970
  %972 = fsub double %971, %967
  %973 = fsub double %970, %966
  %974 = fadd double %973, %972
  %975 = fsub double %974, %969
  %976 = tail call double @llvm.fma.f64(double %964, double 0xB97B839A252049C0, double %975)
  %977 = fadd double %966, %976
  %978 = fsub double %977, %966
  %979 = fsub double %976, %978
  %980 = fptosi double %964 to i32
  %981 = bitcast double %mul1216 to <2 x i32>
  %982 = extractelement <2 x i32> %981, i64 1
  %983 = fcmp one double %881, 0x7FF0000000000000
  %984 = select i1 %48, double 1.000000e+00, double 3.000000e+00
  %985 = fmul double %984, %166
  %986 = fneg double %985
  %987 = tail call double @llvm.fma.f64(double %984, double %166, double %986) #7
  %988 = tail call double @llvm.fma.f64(double %984, double %168, double %987) #7
  %989 = fadd double %985, %988
  %990 = fsub double %989, %985
  %991 = fsub double %988, %990
  %992 = tail call double @llvm.fabs.f64(double %985) #7
  %993 = fcmp oeq double %992, 0x7FF0000000000000
  %994 = select i1 %993, double %985, double %989
  %995 = tail call double @llvm.fabs.f64(double %994) #7
  %996 = fcmp oeq double %995, 0x7FF0000000000000
  %997 = select i1 %996, double 0.000000e+00, double %991
  %998 = fmul double %994, 0x3FF71547652B82FE
  %999 = tail call double @llvm.rint.f64(double %998)
  %1000 = fneg double %999
  %1001 = tail call double @llvm.fma.f64(double %1000, double 0x3FE62E42FEFA39EF, double %994)
  %1002 = tail call double @llvm.fma.f64(double %1000, double 0x3C7ABC9E3B39803F, double %1001)
  %1003 = tail call double @llvm.fma.f64(double %1002, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1004 = tail call double @llvm.fma.f64(double %1002, double %1003, double 0x3EC71DEE623FDE64)
  %1005 = tail call double @llvm.fma.f64(double %1002, double %1004, double 0x3EFA01997C89E6B0)
  %1006 = tail call double @llvm.fma.f64(double %1002, double %1005, double 0x3F2A01A014761F6E)
  %1007 = tail call double @llvm.fma.f64(double %1002, double %1006, double 0x3F56C16C1852B7B0)
  %1008 = tail call double @llvm.fma.f64(double %1002, double %1007, double 0x3F81111111122322)
  %1009 = tail call double @llvm.fma.f64(double %1002, double %1008, double 0x3FA55555555502A1)
  %1010 = tail call double @llvm.fma.f64(double %1002, double %1009, double 0x3FC5555555555511)
  %1011 = tail call double @llvm.fma.f64(double %1002, double %1010, double 0x3FE000000000000B)
  %1012 = tail call double @llvm.fma.f64(double %1002, double %1011, double 1.000000e+00)
  %1013 = tail call double @llvm.fma.f64(double %1002, double %1012, double 1.000000e+00)
  %1014 = fptosi double %999 to i32
  %1015 = tail call double @llvm.ldexp.f64.i32(double %1013, i32 %1014)
  %1016 = fcmp ogt double %994, 1.024000e+03
  %1017 = select i1 %1016, double 0x7FF0000000000000, double %1015
  %1018 = fcmp olt double %994, -1.075000e+03
  %1019 = select i1 %1018, double 0.000000e+00, double %1017
  %1020 = tail call double @llvm.fma.f64(double %1019, double %997, double %1019) #7
  %1021 = tail call double @llvm.fabs.f64(double %1019) #7
  %1022 = fcmp oeq double %1021, 0x7FF0000000000000
  %1023 = select i1 %1022, double %1019, double %1020
  %1024 = tail call double @llvm.trunc.f64(double %984) #7
  %1025 = fcmp oeq double %1024, %984
  %1026 = fmul double %984, 5.000000e-01
  %1027 = tail call double @llvm.trunc.f64(double %1026) #7
  %1028 = fcmp une double %1027, %1026
  %1029 = and i1 %1025, %1028
  %1030 = select i1 %1029, double %47, double 1.000000e+00
  %1031 = tail call double @llvm.copysign.f64(double %1023, double %1030) #7
  %1032 = select i1 %1025, double %1031, double 0x7FF8000000000000
  %1033 = select i1 %216, double %1032, double %1031
  %1034 = select i1 %1029, double %47, double 0.000000e+00
  %1035 = tail call double @llvm.copysign.f64(double %222, double %1034) #7
  %1036 = select i1 %221, double %1035, double %1033
  %1037 = fmul double %1036, 0x3EB96959A8FA065F
  %mul1224 = select i1 %226, double 0x7FF8000000000000, double %1037
  %1038 = select i1 %700, double 1.000000e+00, double 4.000000e+00
  %1039 = fmul double %1038, %818
  %1040 = fneg double %1039
  %1041 = tail call double @llvm.fma.f64(double %1038, double %818, double %1040) #7
  %1042 = tail call double @llvm.fma.f64(double %1038, double %820, double %1041) #7
  %1043 = fadd double %1039, %1042
  %1044 = fsub double %1043, %1039
  %1045 = fsub double %1042, %1044
  %1046 = tail call double @llvm.fabs.f64(double %1039) #7
  %1047 = fcmp oeq double %1046, 0x7FF0000000000000
  %1048 = select i1 %1047, double %1039, double %1043
  %1049 = tail call double @llvm.fabs.f64(double %1048) #7
  %1050 = fcmp oeq double %1049, 0x7FF0000000000000
  %1051 = select i1 %1050, double 0.000000e+00, double %1045
  %1052 = fmul double %1048, 0x3FF71547652B82FE
  %1053 = tail call double @llvm.rint.f64(double %1052)
  %1054 = fneg double %1053
  %1055 = tail call double @llvm.fma.f64(double %1054, double 0x3FE62E42FEFA39EF, double %1048)
  %1056 = tail call double @llvm.fma.f64(double %1054, double 0x3C7ABC9E3B39803F, double %1055)
  %1057 = tail call double @llvm.fma.f64(double %1056, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1058 = tail call double @llvm.fma.f64(double %1056, double %1057, double 0x3EC71DEE623FDE64)
  %1059 = tail call double @llvm.fma.f64(double %1056, double %1058, double 0x3EFA01997C89E6B0)
  %1060 = tail call double @llvm.fma.f64(double %1056, double %1059, double 0x3F2A01A014761F6E)
  %1061 = tail call double @llvm.fma.f64(double %1056, double %1060, double 0x3F56C16C1852B7B0)
  %1062 = tail call double @llvm.fma.f64(double %1056, double %1061, double 0x3F81111111122322)
  %1063 = tail call double @llvm.fma.f64(double %1056, double %1062, double 0x3FA55555555502A1)
  %1064 = tail call double @llvm.fma.f64(double %1056, double %1063, double 0x3FC5555555555511)
  %1065 = tail call double @llvm.fma.f64(double %1056, double %1064, double 0x3FE000000000000B)
  %1066 = tail call double @llvm.fma.f64(double %1056, double %1065, double 1.000000e+00)
  %1067 = tail call double @llvm.fma.f64(double %1056, double %1066, double 1.000000e+00)
  %1068 = fptosi double %1053 to i32
  %1069 = tail call double @llvm.ldexp.f64.i32(double %1067, i32 %1068)
  %1070 = fcmp ogt double %1048, 1.024000e+03
  %1071 = select i1 %1070, double 0x7FF0000000000000, double %1069
  %1072 = fcmp olt double %1048, -1.075000e+03
  %1073 = select i1 %1072, double 0.000000e+00, double %1071
  %1074 = tail call double @llvm.fma.f64(double %1073, double %1051, double %1073) #7
  %1075 = tail call double @llvm.fabs.f64(double %1073) #7
  %1076 = fcmp oeq double %1075, 0x7FF0000000000000
  %1077 = select i1 %1076, double %1073, double %1074
  %1078 = tail call double @llvm.trunc.f64(double %1038) #7
  %1079 = fcmp oeq double %1078, %1038
  %1080 = fmul double %1038, 5.000000e-01
  %1081 = tail call double @llvm.trunc.f64(double %1080) #7
  %1082 = fcmp une double %1081, %1080
  %1083 = and i1 %1079, %1082
  %1084 = select i1 %1083, double %u.coerce2, double 1.000000e+00
  %1085 = tail call double @llvm.copysign.f64(double %1077, double %1084) #7
  %1086 = select i1 %1079, double %1085, double 0x7FF8000000000000
  %1087 = select i1 %868, double %1086, double %1085
  %1088 = select i1 %1083, double %u.coerce2, double 0.000000e+00
  %1089 = tail call double @llvm.copysign.f64(double %874, double %1088) #7
  %1090 = select i1 %873, double %1089, double %1087
  %1091 = select i1 %878, double 0x7FF8000000000000, double %1090
  %mul1227 = fmul double %u.coerce2, 0x41606E7908000000
  %neg1229 = fmul double %mul1227, %neg
  %1092 = tail call double @llvm.fmuladd.f64(double %1091, double 0x417A043FA2000000, double %neg1229)
  %add1230 = fadd double %1092, 0x410EEE1100000000
  %mul1231 = fmul double %mul1224, %add1230
  %mul1232 = fmul double %phi.0, 6.000000e+00
  %1093 = tail call double @llvm.fabs.f64(double %mul1232) #7
  %1094 = fcmp olt double %1093, 0x41D0000000000000
  %1095 = tail call double @llvm.amdgcn.trig.preop.f64(double %1093, i32 0)
  %1096 = tail call double @llvm.amdgcn.trig.preop.f64(double %1093, i32 1)
  %1097 = fcmp oge double %1093, 0x7B00000000000000
  %1098 = tail call double @llvm.ldexp.f64.i32(double %1093, i32 -128)
  %1099 = select i1 %1097, double %1098, double %1093
  %1100 = fmul double %1096, %1099
  %1101 = fmul double %1095, %1099
  %1102 = fneg double %1101
  %1103 = tail call double @llvm.fma.f64(double %1095, double %1099, double %1102)
  %1104 = fadd double %1100, %1103
  %1105 = fadd double %1101, %1104
  %1106 = tail call double @llvm.ldexp.f64.i32(double %1105, i32 -2)
  %1107 = tail call double @llvm.floor.f64(double %1106)
  %1108 = fsub double %1106, %1107
  %1109 = tail call double @llvm.minnum.f64(double %1108, double 0x3FEFFFFFFFFFFFFF)
  %1110 = fcmp uno double %1106, 0.000000e+00
  %1111 = select i1 %1110, double %1106, double %1109
  %1112 = tail call double @llvm.fabs.f64(double %1106)
  %1113 = fcmp oeq double %1112, 0x7FF0000000000000
  %1114 = select i1 %1113, double 0.000000e+00, double %1111
  %1115 = fsub double %1104, %1100
  %1116 = fsub double %1103, %1115
  %1117 = fsub double %1104, %1115
  %1118 = fsub double %1100, %1117
  %1119 = fadd double %1116, %1118
  %1120 = fneg double %1100
  %1121 = tail call double @llvm.fma.f64(double %1096, double %1099, double %1120)
  %1122 = tail call double @llvm.amdgcn.trig.preop.f64(double %1093, i32 2)
  %1123 = fmul double %1122, %1099
  %1124 = fadd double %1123, %1121
  %1125 = fadd double %1124, %1119
  %1126 = fsub double %1105, %1101
  %1127 = fsub double %1104, %1126
  %1128 = fadd double %1127, %1125
  %1129 = fsub double %1128, %1127
  %1130 = fsub double %1125, %1129
  %1131 = fsub double %1125, %1124
  %1132 = fsub double %1119, %1131
  %1133 = fsub double %1125, %1131
  %1134 = fsub double %1124, %1133
  %1135 = fadd double %1132, %1134
  %1136 = fsub double %1124, %1123
  %1137 = fsub double %1121, %1136
  %1138 = fsub double %1124, %1136
  %1139 = fsub double %1123, %1138
  %1140 = fadd double %1137, %1139
  %1141 = fadd double %1140, %1135
  %1142 = fneg double %1123
  %1143 = tail call double @llvm.fma.f64(double %1122, double %1099, double %1142)
  %1144 = fadd double %1143, %1141
  %1145 = fadd double %1130, %1144
  %1146 = tail call double @llvm.ldexp.f64.i32(double %1114, i32 2)
  %1147 = fadd double %1128, %1146
  %1148 = fcmp olt double %1147, 0.000000e+00
  %1149 = select i1 %1148, double 4.000000e+00, double 0.000000e+00
  %1150 = fadd double %1146, %1149
  %1151 = fadd double %1128, %1150
  %1152 = fptosi double %1151 to i32
  %1153 = sitofp i32 %1152 to double
  %1154 = fsub double %1150, %1153
  %1155 = fadd double %1128, %1154
  %1156 = fsub double %1155, %1154
  %1157 = fsub double %1128, %1156
  %1158 = fadd double %1145, %1157
  %1159 = fcmp oge double %1155, 5.000000e-01
  %1160 = zext i1 %1159 to i32
  %1161 = add nsw i32 %1160, %1152
  %1162 = select i1 %1159, double 1.000000e+00, double 0.000000e+00
  %1163 = fsub double %1155, %1162
  %1164 = fadd double %1163, %1158
  %1165 = fsub double %1164, %1163
  %1166 = fsub double %1158, %1165
  %1167 = fmul double %1164, 0x3FF921FB54442D18
  %1168 = fneg double %1167
  %1169 = tail call double @llvm.fma.f64(double %1164, double 0x3FF921FB54442D18, double %1168)
  %1170 = tail call double @llvm.fma.f64(double %1164, double 0x3C91A62633145C07, double %1169)
  %1171 = tail call double @llvm.fma.f64(double %1166, double 0x3FF921FB54442D18, double %1170)
  %1172 = fadd double %1167, %1171
  %1173 = fsub double %1172, %1167
  %1174 = fsub double %1171, %1173
  %1175 = fmul double %1093, 0x3FE45F306DC9C883
  %1176 = tail call double @llvm.rint.f64(double %1175)
  %1177 = tail call double @llvm.fma.f64(double %1176, double 0xBFF921FB54442D18, double %1093)
  %1178 = tail call double @llvm.fma.f64(double %1176, double 0xBC91A62633145C00, double %1177)
  %1179 = fmul double %1176, 0x3C91A62633145C00
  %1180 = fneg double %1179
  %1181 = tail call double @llvm.fma.f64(double %1176, double 0x3C91A62633145C00, double %1180)
  %1182 = fsub double %1177, %1179
  %1183 = fsub double %1177, %1182
  %1184 = fsub double %1183, %1179
  %1185 = fsub double %1182, %1178
  %1186 = fadd double %1185, %1184
  %1187 = fsub double %1186, %1181
  %1188 = tail call double @llvm.fma.f64(double %1176, double 0xB97B839A252049C0, double %1187)
  %1189 = fadd double %1178, %1188
  %1190 = fsub double %1189, %1178
  %1191 = fsub double %1188, %1190
  %1192 = fptosi double %1176 to i32
  %1193 = bitcast double %mul1232 to <2 x i32>
  %1194 = extractelement <2 x i32> %1193, i64 1
  %1195 = fcmp one double %1093, 0x7FF0000000000000
  %1196 = select i1 %48, double 1.000000e+00, double 2.500000e+00
  %1197 = fmul double %1196, %166
  %1198 = fneg double %1197
  %1199 = tail call double @llvm.fma.f64(double %1196, double %166, double %1198) #7
  %1200 = tail call double @llvm.fma.f64(double %1196, double %168, double %1199) #7
  %1201 = fadd double %1197, %1200
  %1202 = fsub double %1201, %1197
  %1203 = fsub double %1200, %1202
  %1204 = tail call double @llvm.fabs.f64(double %1197) #7
  %1205 = fcmp oeq double %1204, 0x7FF0000000000000
  %1206 = select i1 %1205, double %1197, double %1201
  %1207 = tail call double @llvm.fabs.f64(double %1206) #7
  %1208 = fcmp oeq double %1207, 0x7FF0000000000000
  %1209 = select i1 %1208, double 0.000000e+00, double %1203
  %1210 = fmul double %1206, 0x3FF71547652B82FE
  %1211 = tail call double @llvm.rint.f64(double %1210)
  %1212 = fneg double %1211
  %1213 = tail call double @llvm.fma.f64(double %1212, double 0x3FE62E42FEFA39EF, double %1206)
  %1214 = tail call double @llvm.fma.f64(double %1212, double 0x3C7ABC9E3B39803F, double %1213)
  %1215 = tail call double @llvm.fma.f64(double %1214, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1216 = tail call double @llvm.fma.f64(double %1214, double %1215, double 0x3EC71DEE623FDE64)
  %1217 = tail call double @llvm.fma.f64(double %1214, double %1216, double 0x3EFA01997C89E6B0)
  %1218 = tail call double @llvm.fma.f64(double %1214, double %1217, double 0x3F2A01A014761F6E)
  %1219 = tail call double @llvm.fma.f64(double %1214, double %1218, double 0x3F56C16C1852B7B0)
  %1220 = tail call double @llvm.fma.f64(double %1214, double %1219, double 0x3F81111111122322)
  %1221 = tail call double @llvm.fma.f64(double %1214, double %1220, double 0x3FA55555555502A1)
  %1222 = tail call double @llvm.fma.f64(double %1214, double %1221, double 0x3FC5555555555511)
  %1223 = tail call double @llvm.fma.f64(double %1214, double %1222, double 0x3FE000000000000B)
  %1224 = tail call double @llvm.fma.f64(double %1214, double %1223, double 1.000000e+00)
  %1225 = tail call double @llvm.fma.f64(double %1214, double %1224, double 1.000000e+00)
  %1226 = fptosi double %1211 to i32
  %1227 = tail call double @llvm.ldexp.f64.i32(double %1225, i32 %1226)
  %1228 = fcmp ogt double %1206, 1.024000e+03
  %1229 = select i1 %1228, double 0x7FF0000000000000, double %1227
  %1230 = fcmp olt double %1206, -1.075000e+03
  %1231 = select i1 %1230, double 0.000000e+00, double %1229
  %1232 = tail call double @llvm.fma.f64(double %1231, double %1209, double %1231) #7
  %1233 = tail call double @llvm.fabs.f64(double %1231) #7
  %1234 = fcmp oeq double %1233, 0x7FF0000000000000
  %1235 = select i1 %1234, double %1231, double %1232
  %1236 = tail call double @llvm.trunc.f64(double %1196) #7
  %1237 = fcmp oeq double %1236, %1196
  %1238 = fmul double %1196, 5.000000e-01
  %1239 = tail call double @llvm.trunc.f64(double %1238) #7
  %1240 = fcmp une double %1239, %1238
  %1241 = and i1 %1237, %1240
  %1242 = select i1 %1241, double %47, double 1.000000e+00
  %1243 = tail call double @llvm.copysign.f64(double %1235, double %1242) #7
  %1244 = select i1 %1237, double %1243, double 0x7FF8000000000000
  %1245 = select i1 %216, double %1244, double %1243
  %1246 = select i1 %1241, double %47, double 0.000000e+00
  %1247 = tail call double @llvm.copysign.f64(double %222, double %1246) #7
  %1248 = select i1 %221, double %1247, double %1245
  %1249 = fmul double %1248, 0x3EEC6933E23FC60C
  %mul1239 = select i1 %226, double 0x7FF8000000000000, double %1249
  %1250 = select i1 %700, double 1.000000e+00, double 5.000000e+00
  %1251 = fmul double %1250, %818
  %1252 = fneg double %1251
  %1253 = tail call double @llvm.fma.f64(double %1250, double %818, double %1252) #7
  %1254 = tail call double @llvm.fma.f64(double %1250, double %820, double %1253) #7
  %1255 = fadd double %1251, %1254
  %1256 = fsub double %1255, %1251
  %1257 = fsub double %1254, %1256
  %1258 = tail call double @llvm.fabs.f64(double %1251) #7
  %1259 = fcmp oeq double %1258, 0x7FF0000000000000
  %1260 = select i1 %1259, double %1251, double %1255
  %1261 = tail call double @llvm.fabs.f64(double %1260) #7
  %1262 = fcmp oeq double %1261, 0x7FF0000000000000
  %1263 = select i1 %1262, double 0.000000e+00, double %1257
  %1264 = fmul double %1260, 0x3FF71547652B82FE
  %1265 = tail call double @llvm.rint.f64(double %1264)
  %1266 = fneg double %1265
  %1267 = tail call double @llvm.fma.f64(double %1266, double 0x3FE62E42FEFA39EF, double %1260)
  %1268 = tail call double @llvm.fma.f64(double %1266, double 0x3C7ABC9E3B39803F, double %1267)
  %1269 = tail call double @llvm.fma.f64(double %1268, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1270 = tail call double @llvm.fma.f64(double %1268, double %1269, double 0x3EC71DEE623FDE64)
  %1271 = tail call double @llvm.fma.f64(double %1268, double %1270, double 0x3EFA01997C89E6B0)
  %1272 = tail call double @llvm.fma.f64(double %1268, double %1271, double 0x3F2A01A014761F6E)
  %1273 = tail call double @llvm.fma.f64(double %1268, double %1272, double 0x3F56C16C1852B7B0)
  %1274 = tail call double @llvm.fma.f64(double %1268, double %1273, double 0x3F81111111122322)
  %1275 = tail call double @llvm.fma.f64(double %1268, double %1274, double 0x3FA55555555502A1)
  %1276 = tail call double @llvm.fma.f64(double %1268, double %1275, double 0x3FC5555555555511)
  %1277 = tail call double @llvm.fma.f64(double %1268, double %1276, double 0x3FE000000000000B)
  %1278 = tail call double @llvm.fma.f64(double %1268, double %1277, double 1.000000e+00)
  %1279 = tail call double @llvm.fma.f64(double %1268, double %1278, double 1.000000e+00)
  %1280 = fptosi double %1265 to i32
  %1281 = tail call double @llvm.ldexp.f64.i32(double %1279, i32 %1280)
  %1282 = fcmp ogt double %1260, 1.024000e+03
  %1283 = select i1 %1282, double 0x7FF0000000000000, double %1281
  %1284 = fcmp olt double %1260, -1.075000e+03
  %1285 = select i1 %1284, double 0.000000e+00, double %1283
  %1286 = tail call double @llvm.fma.f64(double %1285, double %1263, double %1285) #7
  %1287 = tail call double @llvm.fabs.f64(double %1285) #7
  %1288 = fcmp oeq double %1287, 0x7FF0000000000000
  %1289 = select i1 %1288, double %1285, double %1286
  %1290 = tail call double @llvm.trunc.f64(double %1250) #7
  %1291 = fcmp oeq double %1290, %1250
  %1292 = fmul double %1250, 5.000000e-01
  %1293 = tail call double @llvm.trunc.f64(double %1292) #7
  %1294 = fcmp une double %1293, %1292
  %1295 = and i1 %1291, %1294
  %1296 = select i1 %1295, double %u.coerce2, double 1.000000e+00
  %1297 = tail call double @llvm.copysign.f64(double %1289, double %1296) #7
  %1298 = select i1 %1291, double %1297, double 0x7FF8000000000000
  %1299 = select i1 %868, double %1298, double %1297
  %1300 = select i1 %1295, double %u.coerce2, double 0.000000e+00
  %1301 = tail call double @llvm.copysign.f64(double %874, double %1300) #7
  %1302 = select i1 %873, double %1301, double %1299
  %1303 = select i1 %878, double 0x7FF8000000000000, double %1302
  %neg1244 = fmul double %879, 0xC145E8A160000000
  %1304 = tail call double @llvm.fmuladd.f64(double %1303, double 0x4154D032E8000000, double %neg1244)
  %1305 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0x410EEE1100000000, double %1304)
  %mul1246 = fmul double %mul1239, %1305
  %mul1247 = fmul double %phi.0, 5.000000e+00
  %1306 = tail call double @llvm.fabs.f64(double %mul1247) #7
  %1307 = fcmp olt double %1306, 0x41D0000000000000
  %1308 = tail call double @llvm.amdgcn.trig.preop.f64(double %1306, i32 0)
  %1309 = tail call double @llvm.amdgcn.trig.preop.f64(double %1306, i32 1)
  %1310 = fcmp oge double %1306, 0x7B00000000000000
  %1311 = tail call double @llvm.ldexp.f64.i32(double %1306, i32 -128)
  %1312 = select i1 %1310, double %1311, double %1306
  %1313 = fmul double %1309, %1312
  %1314 = fmul double %1308, %1312
  %1315 = fneg double %1314
  %1316 = tail call double @llvm.fma.f64(double %1308, double %1312, double %1315)
  %1317 = fadd double %1313, %1316
  %1318 = fadd double %1314, %1317
  %1319 = tail call double @llvm.ldexp.f64.i32(double %1318, i32 -2)
  %1320 = tail call double @llvm.floor.f64(double %1319)
  %1321 = fsub double %1319, %1320
  %1322 = tail call double @llvm.minnum.f64(double %1321, double 0x3FEFFFFFFFFFFFFF)
  %1323 = fcmp uno double %1319, 0.000000e+00
  %1324 = select i1 %1323, double %1319, double %1322
  %1325 = tail call double @llvm.fabs.f64(double %1319)
  %1326 = fcmp oeq double %1325, 0x7FF0000000000000
  %1327 = select i1 %1326, double 0.000000e+00, double %1324
  %1328 = fsub double %1317, %1313
  %1329 = fsub double %1316, %1328
  %1330 = fsub double %1317, %1328
  %1331 = fsub double %1313, %1330
  %1332 = fadd double %1329, %1331
  %1333 = fneg double %1313
  %1334 = tail call double @llvm.fma.f64(double %1309, double %1312, double %1333)
  %1335 = tail call double @llvm.amdgcn.trig.preop.f64(double %1306, i32 2)
  %1336 = fmul double %1335, %1312
  %1337 = fadd double %1336, %1334
  %1338 = fadd double %1337, %1332
  %1339 = fsub double %1318, %1314
  %1340 = fsub double %1317, %1339
  %1341 = fadd double %1340, %1338
  %1342 = fsub double %1341, %1340
  %1343 = fsub double %1338, %1342
  %1344 = fsub double %1338, %1337
  %1345 = fsub double %1332, %1344
  %1346 = fsub double %1338, %1344
  %1347 = fsub double %1337, %1346
  %1348 = fadd double %1345, %1347
  %1349 = fsub double %1337, %1336
  %1350 = fsub double %1334, %1349
  %1351 = fsub double %1337, %1349
  %1352 = fsub double %1336, %1351
  %1353 = fadd double %1350, %1352
  %1354 = fadd double %1353, %1348
  %1355 = fneg double %1336
  %1356 = tail call double @llvm.fma.f64(double %1335, double %1312, double %1355)
  %1357 = fadd double %1356, %1354
  %1358 = fadd double %1343, %1357
  %1359 = tail call double @llvm.ldexp.f64.i32(double %1327, i32 2)
  %1360 = fadd double %1341, %1359
  %1361 = fcmp olt double %1360, 0.000000e+00
  %1362 = select i1 %1361, double 4.000000e+00, double 0.000000e+00
  %1363 = fadd double %1359, %1362
  %1364 = fadd double %1341, %1363
  %1365 = fptosi double %1364 to i32
  %1366 = sitofp i32 %1365 to double
  %1367 = fsub double %1363, %1366
  %1368 = fadd double %1341, %1367
  %1369 = fsub double %1368, %1367
  %1370 = fsub double %1341, %1369
  %1371 = fadd double %1358, %1370
  %1372 = fcmp oge double %1368, 5.000000e-01
  %1373 = zext i1 %1372 to i32
  %1374 = add nsw i32 %1373, %1365
  %1375 = select i1 %1372, double 1.000000e+00, double 0.000000e+00
  %1376 = fsub double %1368, %1375
  %1377 = fadd double %1376, %1371
  %1378 = fsub double %1377, %1376
  %1379 = fsub double %1371, %1378
  %1380 = fmul double %1377, 0x3FF921FB54442D18
  %1381 = fneg double %1380
  %1382 = tail call double @llvm.fma.f64(double %1377, double 0x3FF921FB54442D18, double %1381)
  %1383 = tail call double @llvm.fma.f64(double %1377, double 0x3C91A62633145C07, double %1382)
  %1384 = tail call double @llvm.fma.f64(double %1379, double 0x3FF921FB54442D18, double %1383)
  %1385 = fadd double %1380, %1384
  %1386 = fsub double %1385, %1380
  %1387 = fsub double %1384, %1386
  %1388 = fmul double %1306, 0x3FE45F306DC9C883
  %1389 = tail call double @llvm.rint.f64(double %1388)
  %1390 = tail call double @llvm.fma.f64(double %1389, double 0xBFF921FB54442D18, double %1306)
  %1391 = tail call double @llvm.fma.f64(double %1389, double 0xBC91A62633145C00, double %1390)
  %1392 = fmul double %1389, 0x3C91A62633145C00
  %1393 = fneg double %1392
  %1394 = tail call double @llvm.fma.f64(double %1389, double 0x3C91A62633145C00, double %1393)
  %1395 = fsub double %1390, %1392
  %1396 = fsub double %1390, %1395
  %1397 = fsub double %1396, %1392
  %1398 = fsub double %1395, %1391
  %1399 = fadd double %1398, %1397
  %1400 = fsub double %1399, %1394
  %1401 = tail call double @llvm.fma.f64(double %1389, double 0xB97B839A252049C0, double %1400)
  %1402 = fadd double %1391, %1401
  %1403 = fsub double %1402, %1391
  %1404 = fsub double %1401, %1403
  %1405 = fptosi double %1389 to i32
  %1406 = bitcast double %mul1247 to <2 x i32>
  %1407 = extractelement <2 x i32> %1406, i64 1
  %1408 = fcmp one double %1306, 0x7FF0000000000000
  %mul1254 = fmul double %47, 0x3F20D87A8B27CB3D
  %mul1255 = fmul double %47, %mul1254
  %1409 = select i1 %700, double 1.000000e+00, double 6.000000e+00
  %1410 = fmul double %1409, %818
  %1411 = fneg double %1410
  %1412 = tail call double @llvm.fma.f64(double %1409, double %818, double %1411) #7
  %1413 = tail call double @llvm.fma.f64(double %1409, double %820, double %1412) #7
  %1414 = fadd double %1410, %1413
  %1415 = fsub double %1414, %1410
  %1416 = fsub double %1413, %1415
  %1417 = tail call double @llvm.fabs.f64(double %1410) #7
  %1418 = fcmp oeq double %1417, 0x7FF0000000000000
  %1419 = select i1 %1418, double %1410, double %1414
  %1420 = tail call double @llvm.fabs.f64(double %1419) #7
  %1421 = fcmp oeq double %1420, 0x7FF0000000000000
  %1422 = select i1 %1421, double 0.000000e+00, double %1416
  %1423 = fmul double %1419, 0x3FF71547652B82FE
  %1424 = tail call double @llvm.rint.f64(double %1423)
  %1425 = fneg double %1424
  %1426 = tail call double @llvm.fma.f64(double %1425, double 0x3FE62E42FEFA39EF, double %1419)
  %1427 = tail call double @llvm.fma.f64(double %1425, double 0x3C7ABC9E3B39803F, double %1426)
  %1428 = tail call double @llvm.fma.f64(double %1427, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1429 = tail call double @llvm.fma.f64(double %1427, double %1428, double 0x3EC71DEE623FDE64)
  %1430 = tail call double @llvm.fma.f64(double %1427, double %1429, double 0x3EFA01997C89E6B0)
  %1431 = tail call double @llvm.fma.f64(double %1427, double %1430, double 0x3F2A01A014761F6E)
  %1432 = tail call double @llvm.fma.f64(double %1427, double %1431, double 0x3F56C16C1852B7B0)
  %1433 = tail call double @llvm.fma.f64(double %1427, double %1432, double 0x3F81111111122322)
  %1434 = tail call double @llvm.fma.f64(double %1427, double %1433, double 0x3FA55555555502A1)
  %1435 = tail call double @llvm.fma.f64(double %1427, double %1434, double 0x3FC5555555555511)
  %1436 = tail call double @llvm.fma.f64(double %1427, double %1435, double 0x3FE000000000000B)
  %1437 = tail call double @llvm.fma.f64(double %1427, double %1436, double 1.000000e+00)
  %1438 = tail call double @llvm.fma.f64(double %1427, double %1437, double 1.000000e+00)
  %1439 = fptosi double %1424 to i32
  %1440 = tail call double @llvm.ldexp.f64.i32(double %1438, i32 %1439)
  %1441 = fcmp ogt double %1419, 1.024000e+03
  %1442 = select i1 %1441, double 0x7FF0000000000000, double %1440
  %1443 = fcmp olt double %1419, -1.075000e+03
  %1444 = select i1 %1443, double 0.000000e+00, double %1442
  %1445 = tail call double @llvm.fma.f64(double %1444, double %1422, double %1444) #7
  %1446 = tail call double @llvm.fabs.f64(double %1444) #7
  %1447 = fcmp oeq double %1446, 0x7FF0000000000000
  %1448 = select i1 %1447, double %1444, double %1445
  %1449 = tail call double @llvm.trunc.f64(double %1409) #7
  %1450 = fcmp oeq double %1449, %1409
  %1451 = fmul double %1409, 5.000000e-01
  %1452 = tail call double @llvm.trunc.f64(double %1451) #7
  %1453 = fcmp une double %1452, %1451
  %1454 = and i1 %1450, %1453
  %1455 = select i1 %1454, double %u.coerce2, double 1.000000e+00
  %1456 = tail call double @llvm.copysign.f64(double %1448, double %1455) #7
  %1457 = select i1 %1450, double %1456, double 0x7FF8000000000000
  %1458 = select i1 %868, double %1457, double %1456
  %1459 = select i1 %1454, double %u.coerce2, double 0.000000e+00
  %1460 = tail call double @llvm.copysign.f64(double %874, double %1459) #7
  %1461 = select i1 %873, double %1460, double %1458
  %1462 = select i1 %878, double 0x7FF8000000000000, double %1461
  %neg1260 = fmul double %1091, 0xC125E8A160000000
  %1463 = tail call double @llvm.fmuladd.f64(double %1462, double 0x412BC043E0000000, double %neg1260)
  %mul1261 = fmul double %u.coerce2, 0x40FEEE1100000000
  %1464 = tail call double @llvm.fmuladd.f64(double %mul1261, double %u.coerce2, double %1463)
  %sub1263 = fadd double %1464, 0xC0A5FEA000000000
  %mul1264 = fmul double %mul1255, %sub1263
  %mul1265 = fmul double %phi.0, 4.000000e+00
  %1465 = tail call double @llvm.fabs.f64(double %mul1265) #7
  %1466 = fcmp olt double %1465, 0x41D0000000000000
  %1467 = tail call double @llvm.amdgcn.trig.preop.f64(double %1465, i32 0)
  %1468 = tail call double @llvm.amdgcn.trig.preop.f64(double %1465, i32 1)
  %1469 = fcmp oge double %1465, 0x7B00000000000000
  %1470 = tail call double @llvm.ldexp.f64.i32(double %1465, i32 -128)
  %1471 = select i1 %1469, double %1470, double %1465
  %1472 = fmul double %1468, %1471
  %1473 = fmul double %1467, %1471
  %1474 = fneg double %1473
  %1475 = tail call double @llvm.fma.f64(double %1467, double %1471, double %1474)
  %1476 = fadd double %1472, %1475
  %1477 = fadd double %1473, %1476
  %1478 = tail call double @llvm.ldexp.f64.i32(double %1477, i32 -2)
  %1479 = tail call double @llvm.floor.f64(double %1478)
  %1480 = fsub double %1478, %1479
  %1481 = tail call double @llvm.minnum.f64(double %1480, double 0x3FEFFFFFFFFFFFFF)
  %1482 = fcmp uno double %1478, 0.000000e+00
  %1483 = select i1 %1482, double %1478, double %1481
  %1484 = tail call double @llvm.fabs.f64(double %1478)
  %1485 = fcmp oeq double %1484, 0x7FF0000000000000
  %1486 = select i1 %1485, double 0.000000e+00, double %1483
  %1487 = fsub double %1476, %1472
  %1488 = fsub double %1475, %1487
  %1489 = fsub double %1476, %1487
  %1490 = fsub double %1472, %1489
  %1491 = fadd double %1488, %1490
  %1492 = fneg double %1472
  %1493 = tail call double @llvm.fma.f64(double %1468, double %1471, double %1492)
  %1494 = tail call double @llvm.amdgcn.trig.preop.f64(double %1465, i32 2)
  %1495 = fmul double %1494, %1471
  %1496 = fadd double %1495, %1493
  %1497 = fadd double %1496, %1491
  %1498 = fsub double %1477, %1473
  %1499 = fsub double %1476, %1498
  %1500 = fadd double %1499, %1497
  %1501 = fsub double %1500, %1499
  %1502 = fsub double %1497, %1501
  %1503 = fsub double %1497, %1496
  %1504 = fsub double %1491, %1503
  %1505 = fsub double %1497, %1503
  %1506 = fsub double %1496, %1505
  %1507 = fadd double %1504, %1506
  %1508 = fsub double %1496, %1495
  %1509 = fsub double %1493, %1508
  %1510 = fsub double %1496, %1508
  %1511 = fsub double %1495, %1510
  %1512 = fadd double %1509, %1511
  %1513 = fadd double %1512, %1507
  %1514 = fneg double %1495
  %1515 = tail call double @llvm.fma.f64(double %1494, double %1471, double %1514)
  %1516 = fadd double %1515, %1513
  %1517 = fadd double %1502, %1516
  %1518 = tail call double @llvm.ldexp.f64.i32(double %1486, i32 2)
  %1519 = fadd double %1500, %1518
  %1520 = fcmp olt double %1519, 0.000000e+00
  %1521 = select i1 %1520, double 4.000000e+00, double 0.000000e+00
  %1522 = fadd double %1518, %1521
  %1523 = fadd double %1500, %1522
  %1524 = fptosi double %1523 to i32
  %1525 = sitofp i32 %1524 to double
  %1526 = fsub double %1522, %1525
  %1527 = fadd double %1500, %1526
  %1528 = fsub double %1527, %1526
  %1529 = fsub double %1500, %1528
  %1530 = fadd double %1517, %1529
  %1531 = fcmp oge double %1527, 5.000000e-01
  %1532 = zext i1 %1531 to i32
  %1533 = add nsw i32 %1532, %1524
  %1534 = select i1 %1531, double 1.000000e+00, double 0.000000e+00
  %1535 = fsub double %1527, %1534
  %1536 = fadd double %1535, %1530
  %1537 = fsub double %1536, %1535
  %1538 = fsub double %1530, %1537
  %1539 = fmul double %1536, 0x3FF921FB54442D18
  %1540 = fneg double %1539
  %1541 = tail call double @llvm.fma.f64(double %1536, double 0x3FF921FB54442D18, double %1540)
  %1542 = tail call double @llvm.fma.f64(double %1536, double 0x3C91A62633145C07, double %1541)
  %1543 = tail call double @llvm.fma.f64(double %1538, double 0x3FF921FB54442D18, double %1542)
  %1544 = fadd double %1539, %1543
  %1545 = fsub double %1544, %1539
  %1546 = fsub double %1543, %1545
  %1547 = fmul double %1465, 0x3FE45F306DC9C883
  %1548 = tail call double @llvm.rint.f64(double %1547)
  %1549 = tail call double @llvm.fma.f64(double %1548, double 0xBFF921FB54442D18, double %1465)
  %1550 = tail call double @llvm.fma.f64(double %1548, double 0xBC91A62633145C00, double %1549)
  %1551 = fmul double %1548, 0x3C91A62633145C00
  %1552 = fneg double %1551
  %1553 = tail call double @llvm.fma.f64(double %1548, double 0x3C91A62633145C00, double %1552)
  %1554 = fsub double %1549, %1551
  %1555 = fsub double %1549, %1554
  %1556 = fsub double %1555, %1551
  %1557 = fsub double %1554, %1550
  %1558 = fadd double %1557, %1556
  %1559 = fsub double %1558, %1553
  %1560 = tail call double @llvm.fma.f64(double %1548, double 0xB97B839A252049C0, double %1559)
  %1561 = fadd double %1550, %1560
  %1562 = fsub double %1561, %1550
  %1563 = fsub double %1560, %1562
  %1564 = fptosi double %1548 to i32
  %1565 = bitcast double %mul1265 to <2 x i32>
  %1566 = extractelement <2 x i32> %1565, i64 1
  %1567 = fcmp one double %1465, 0x7FF0000000000000
  %1568 = select i1 %48, double 1.000000e+00, double 1.500000e+00
  %1569 = fmul double %1568, %166
  %1570 = fneg double %1569
  %1571 = tail call double @llvm.fma.f64(double %1568, double %166, double %1570) #7
  %1572 = tail call double @llvm.fma.f64(double %1568, double %168, double %1571) #7
  %1573 = fadd double %1569, %1572
  %1574 = fsub double %1573, %1569
  %1575 = fsub double %1572, %1574
  %1576 = tail call double @llvm.fabs.f64(double %1569) #7
  %1577 = fcmp oeq double %1576, 0x7FF0000000000000
  %1578 = select i1 %1577, double %1569, double %1573
  %1579 = tail call double @llvm.fabs.f64(double %1578) #7
  %1580 = fcmp oeq double %1579, 0x7FF0000000000000
  %1581 = select i1 %1580, double 0.000000e+00, double %1575
  %1582 = fmul double %1578, 0x3FF71547652B82FE
  %1583 = tail call double @llvm.rint.f64(double %1582)
  %1584 = fneg double %1583
  %1585 = tail call double @llvm.fma.f64(double %1584, double 0x3FE62E42FEFA39EF, double %1578)
  %1586 = tail call double @llvm.fma.f64(double %1584, double 0x3C7ABC9E3B39803F, double %1585)
  %1587 = tail call double @llvm.fma.f64(double %1586, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1588 = tail call double @llvm.fma.f64(double %1586, double %1587, double 0x3EC71DEE623FDE64)
  %1589 = tail call double @llvm.fma.f64(double %1586, double %1588, double 0x3EFA01997C89E6B0)
  %1590 = tail call double @llvm.fma.f64(double %1586, double %1589, double 0x3F2A01A014761F6E)
  %1591 = tail call double @llvm.fma.f64(double %1586, double %1590, double 0x3F56C16C1852B7B0)
  %1592 = tail call double @llvm.fma.f64(double %1586, double %1591, double 0x3F81111111122322)
  %1593 = tail call double @llvm.fma.f64(double %1586, double %1592, double 0x3FA55555555502A1)
  %1594 = tail call double @llvm.fma.f64(double %1586, double %1593, double 0x3FC5555555555511)
  %1595 = tail call double @llvm.fma.f64(double %1586, double %1594, double 0x3FE000000000000B)
  %1596 = tail call double @llvm.fma.f64(double %1586, double %1595, double 1.000000e+00)
  %1597 = tail call double @llvm.fma.f64(double %1586, double %1596, double 1.000000e+00)
  %1598 = fptosi double %1583 to i32
  %1599 = tail call double @llvm.ldexp.f64.i32(double %1597, i32 %1598)
  %1600 = fcmp ogt double %1578, 1.024000e+03
  %1601 = select i1 %1600, double 0x7FF0000000000000, double %1599
  %1602 = fcmp olt double %1578, -1.075000e+03
  %1603 = select i1 %1602, double 0.000000e+00, double %1601
  %1604 = tail call double @llvm.fma.f64(double %1603, double %1581, double %1603) #7
  %1605 = tail call double @llvm.fabs.f64(double %1603) #7
  %1606 = fcmp oeq double %1605, 0x7FF0000000000000
  %1607 = select i1 %1606, double %1603, double %1604
  %1608 = tail call double @llvm.trunc.f64(double %1568) #7
  %1609 = fcmp oeq double %1608, %1568
  %1610 = fmul double %1568, 5.000000e-01
  %1611 = tail call double @llvm.trunc.f64(double %1610) #7
  %1612 = fcmp une double %1611, %1610
  %1613 = and i1 %1609, %1612
  %1614 = select i1 %1613, double %47, double 1.000000e+00
  %1615 = tail call double @llvm.copysign.f64(double %1607, double %1614) #7
  %1616 = select i1 %1609, double %1615, double 0x7FF8000000000000
  %1617 = select i1 %216, double %1616, double %1615
  %1618 = select i1 %1613, double %47, double 0.000000e+00
  %1619 = tail call double @llvm.copysign.f64(double %222, double %1618) #7
  %1620 = select i1 %221, double %1619, double %1617
  %1621 = fmul double %1620, 0x3F54D86B8C9D193F
  %mul1272 = select i1 %226, double 0x7FF8000000000000, double %1621
  %1622 = select i1 %700, double 1.000000e+00, double 7.000000e+00
  %1623 = fmul double %1622, %818
  %1624 = fneg double %1623
  %1625 = tail call double @llvm.fma.f64(double %1622, double %818, double %1624) #7
  %1626 = tail call double @llvm.fma.f64(double %1622, double %820, double %1625) #7
  %1627 = fadd double %1623, %1626
  %1628 = fsub double %1627, %1623
  %1629 = fsub double %1626, %1628
  %1630 = tail call double @llvm.fabs.f64(double %1623) #7
  %1631 = fcmp oeq double %1630, 0x7FF0000000000000
  %1632 = select i1 %1631, double %1623, double %1627
  %1633 = tail call double @llvm.fabs.f64(double %1632) #7
  %1634 = fcmp oeq double %1633, 0x7FF0000000000000
  %1635 = select i1 %1634, double 0.000000e+00, double %1629
  %1636 = fmul double %1632, 0x3FF71547652B82FE
  %1637 = tail call double @llvm.rint.f64(double %1636)
  %1638 = fneg double %1637
  %1639 = tail call double @llvm.fma.f64(double %1638, double 0x3FE62E42FEFA39EF, double %1632)
  %1640 = tail call double @llvm.fma.f64(double %1638, double 0x3C7ABC9E3B39803F, double %1639)
  %1641 = tail call double @llvm.fma.f64(double %1640, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1642 = tail call double @llvm.fma.f64(double %1640, double %1641, double 0x3EC71DEE623FDE64)
  %1643 = tail call double @llvm.fma.f64(double %1640, double %1642, double 0x3EFA01997C89E6B0)
  %1644 = tail call double @llvm.fma.f64(double %1640, double %1643, double 0x3F2A01A014761F6E)
  %1645 = tail call double @llvm.fma.f64(double %1640, double %1644, double 0x3F56C16C1852B7B0)
  %1646 = tail call double @llvm.fma.f64(double %1640, double %1645, double 0x3F81111111122322)
  %1647 = tail call double @llvm.fma.f64(double %1640, double %1646, double 0x3FA55555555502A1)
  %1648 = tail call double @llvm.fma.f64(double %1640, double %1647, double 0x3FC5555555555511)
  %1649 = tail call double @llvm.fma.f64(double %1640, double %1648, double 0x3FE000000000000B)
  %1650 = tail call double @llvm.fma.f64(double %1640, double %1649, double 1.000000e+00)
  %1651 = tail call double @llvm.fma.f64(double %1640, double %1650, double 1.000000e+00)
  %1652 = fptosi double %1637 to i32
  %1653 = tail call double @llvm.ldexp.f64.i32(double %1651, i32 %1652)
  %1654 = fcmp ogt double %1632, 1.024000e+03
  %1655 = select i1 %1654, double 0x7FF0000000000000, double %1653
  %1656 = fcmp olt double %1632, -1.075000e+03
  %1657 = select i1 %1656, double 0.000000e+00, double %1655
  %1658 = tail call double @llvm.fma.f64(double %1657, double %1635, double %1657) #7
  %1659 = tail call double @llvm.fabs.f64(double %1657) #7
  %1660 = fcmp oeq double %1659, 0x7FF0000000000000
  %1661 = select i1 %1660, double %1657, double %1658
  %1662 = tail call double @llvm.trunc.f64(double %1622) #7
  %1663 = fcmp oeq double %1662, %1622
  %1664 = fmul double %1622, 5.000000e-01
  %1665 = tail call double @llvm.trunc.f64(double %1664) #7
  %1666 = fcmp une double %1665, %1664
  %1667 = and i1 %1663, %1666
  %1668 = select i1 %1667, double %u.coerce2, double 1.000000e+00
  %1669 = tail call double @llvm.copysign.f64(double %1661, double %1668) #7
  %1670 = select i1 %1663, double %1669, double 0x7FF8000000000000
  %1671 = select i1 %868, double %1670, double %1669
  %1672 = select i1 %1667, double %u.coerce2, double 0.000000e+00
  %1673 = tail call double @llvm.copysign.f64(double %874, double %1672) #7
  %1674 = select i1 %873, double %1673, double %1671
  %1675 = select i1 %878, double 0x7FF8000000000000, double %1674
  %neg1277 = fmul double %1303, 0xC10186E780000000
  %1676 = tail call double @llvm.fmuladd.f64(double %1675, double 0x40FFB72900000000, double %neg1277)
  %1677 = tail call double @llvm.fmuladd.f64(double %879, double 0x40E49EB600000000, double %1676)
  %1678 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0xC0A5FEA000000000, double %1677)
  %mul1281 = fmul double %mul1272, %1678
  %mul1282 = fmul double %phi.0, 3.000000e+00
  %1679 = tail call double @llvm.fabs.f64(double %mul1282) #7
  %1680 = fcmp olt double %1679, 0x41D0000000000000
  %1681 = tail call double @llvm.amdgcn.trig.preop.f64(double %1679, i32 0)
  %1682 = tail call double @llvm.amdgcn.trig.preop.f64(double %1679, i32 1)
  %1683 = fcmp oge double %1679, 0x7B00000000000000
  %1684 = tail call double @llvm.ldexp.f64.i32(double %1679, i32 -128)
  %1685 = select i1 %1683, double %1684, double %1679
  %1686 = fmul double %1682, %1685
  %1687 = fmul double %1681, %1685
  %1688 = fneg double %1687
  %1689 = tail call double @llvm.fma.f64(double %1681, double %1685, double %1688)
  %1690 = fadd double %1686, %1689
  %1691 = fadd double %1687, %1690
  %1692 = tail call double @llvm.ldexp.f64.i32(double %1691, i32 -2)
  %1693 = tail call double @llvm.floor.f64(double %1692)
  %1694 = fsub double %1692, %1693
  %1695 = tail call double @llvm.minnum.f64(double %1694, double 0x3FEFFFFFFFFFFFFF)
  %1696 = fcmp uno double %1692, 0.000000e+00
  %1697 = select i1 %1696, double %1692, double %1695
  %1698 = tail call double @llvm.fabs.f64(double %1692)
  %1699 = fcmp oeq double %1698, 0x7FF0000000000000
  %1700 = select i1 %1699, double 0.000000e+00, double %1697
  %1701 = fsub double %1690, %1686
  %1702 = fsub double %1689, %1701
  %1703 = fsub double %1690, %1701
  %1704 = fsub double %1686, %1703
  %1705 = fadd double %1702, %1704
  %1706 = fneg double %1686
  %1707 = tail call double @llvm.fma.f64(double %1682, double %1685, double %1706)
  %1708 = tail call double @llvm.amdgcn.trig.preop.f64(double %1679, i32 2)
  %1709 = fmul double %1708, %1685
  %1710 = fadd double %1709, %1707
  %1711 = fadd double %1710, %1705
  %1712 = fsub double %1691, %1687
  %1713 = fsub double %1690, %1712
  %1714 = fadd double %1713, %1711
  %1715 = fsub double %1714, %1713
  %1716 = fsub double %1711, %1715
  %1717 = fsub double %1711, %1710
  %1718 = fsub double %1705, %1717
  %1719 = fsub double %1711, %1717
  %1720 = fsub double %1710, %1719
  %1721 = fadd double %1718, %1720
  %1722 = fsub double %1710, %1709
  %1723 = fsub double %1707, %1722
  %1724 = fsub double %1710, %1722
  %1725 = fsub double %1709, %1724
  %1726 = fadd double %1723, %1725
  %1727 = fadd double %1726, %1721
  %1728 = fneg double %1709
  %1729 = tail call double @llvm.fma.f64(double %1708, double %1685, double %1728)
  %1730 = fadd double %1729, %1727
  %1731 = fadd double %1716, %1730
  %1732 = tail call double @llvm.ldexp.f64.i32(double %1700, i32 2)
  %1733 = fadd double %1714, %1732
  %1734 = fcmp olt double %1733, 0.000000e+00
  %1735 = select i1 %1734, double 4.000000e+00, double 0.000000e+00
  %1736 = fadd double %1732, %1735
  %1737 = fadd double %1714, %1736
  %1738 = fptosi double %1737 to i32
  %1739 = sitofp i32 %1738 to double
  %1740 = fsub double %1736, %1739
  %1741 = fadd double %1714, %1740
  %1742 = fsub double %1741, %1740
  %1743 = fsub double %1714, %1742
  %1744 = fadd double %1731, %1743
  %1745 = fcmp oge double %1741, 5.000000e-01
  %1746 = zext i1 %1745 to i32
  %1747 = add nsw i32 %1746, %1738
  %1748 = select i1 %1745, double 1.000000e+00, double 0.000000e+00
  %1749 = fsub double %1741, %1748
  %1750 = fadd double %1749, %1744
  %1751 = fsub double %1750, %1749
  %1752 = fsub double %1744, %1751
  %1753 = fmul double %1750, 0x3FF921FB54442D18
  %1754 = fneg double %1753
  %1755 = tail call double @llvm.fma.f64(double %1750, double 0x3FF921FB54442D18, double %1754)
  %1756 = tail call double @llvm.fma.f64(double %1750, double 0x3C91A62633145C07, double %1755)
  %1757 = tail call double @llvm.fma.f64(double %1752, double 0x3FF921FB54442D18, double %1756)
  %1758 = fadd double %1753, %1757
  %1759 = fsub double %1758, %1753
  %1760 = fsub double %1757, %1759
  %1761 = fmul double %1679, 0x3FE45F306DC9C883
  %1762 = tail call double @llvm.rint.f64(double %1761)
  %1763 = tail call double @llvm.fma.f64(double %1762, double 0xBFF921FB54442D18, double %1679)
  %1764 = tail call double @llvm.fma.f64(double %1762, double 0xBC91A62633145C00, double %1763)
  %1765 = fmul double %1762, 0x3C91A62633145C00
  %1766 = fneg double %1765
  %1767 = tail call double @llvm.fma.f64(double %1762, double 0x3C91A62633145C00, double %1766)
  %1768 = fsub double %1763, %1765
  %1769 = fsub double %1763, %1768
  %1770 = fsub double %1769, %1765
  %1771 = fsub double %1768, %1764
  %1772 = fadd double %1771, %1770
  %1773 = fsub double %1772, %1767
  %1774 = tail call double @llvm.fma.f64(double %1762, double 0xB97B839A252049C0, double %1773)
  %1775 = fadd double %1764, %1774
  %1776 = fsub double %1775, %1764
  %1777 = fsub double %1774, %1776
  %1778 = fptosi double %1762 to i32
  %1779 = bitcast double %mul1282 to <2 x i32>
  %1780 = extractelement <2 x i32> %1779, i64 1
  %1781 = fcmp one double %1679, 0x7FF0000000000000
  %mul1289 = fmul double %47, 0x3F8A92A0A8AF9738
  %1782 = select i1 %700, double 1.000000e+00, double 8.000000e+00
  %1783 = fmul double %1782, %818
  %1784 = fneg double %1783
  %1785 = tail call double @llvm.fma.f64(double %1782, double %818, double %1784) #7
  %1786 = tail call double @llvm.fma.f64(double %1782, double %820, double %1785) #7
  %1787 = fadd double %1783, %1786
  %1788 = fsub double %1787, %1783
  %1789 = fsub double %1786, %1788
  %1790 = tail call double @llvm.fabs.f64(double %1783) #7
  %1791 = fcmp oeq double %1790, 0x7FF0000000000000
  %1792 = select i1 %1791, double %1783, double %1787
  %1793 = tail call double @llvm.fabs.f64(double %1792) #7
  %1794 = fcmp oeq double %1793, 0x7FF0000000000000
  %1795 = select i1 %1794, double 0.000000e+00, double %1789
  %1796 = fmul double %1792, 0x3FF71547652B82FE
  %1797 = tail call double @llvm.rint.f64(double %1796)
  %1798 = fneg double %1797
  %1799 = tail call double @llvm.fma.f64(double %1798, double 0x3FE62E42FEFA39EF, double %1792)
  %1800 = tail call double @llvm.fma.f64(double %1798, double 0x3C7ABC9E3B39803F, double %1799)
  %1801 = tail call double @llvm.fma.f64(double %1800, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1802 = tail call double @llvm.fma.f64(double %1800, double %1801, double 0x3EC71DEE623FDE64)
  %1803 = tail call double @llvm.fma.f64(double %1800, double %1802, double 0x3EFA01997C89E6B0)
  %1804 = tail call double @llvm.fma.f64(double %1800, double %1803, double 0x3F2A01A014761F6E)
  %1805 = tail call double @llvm.fma.f64(double %1800, double %1804, double 0x3F56C16C1852B7B0)
  %1806 = tail call double @llvm.fma.f64(double %1800, double %1805, double 0x3F81111111122322)
  %1807 = tail call double @llvm.fma.f64(double %1800, double %1806, double 0x3FA55555555502A1)
  %1808 = tail call double @llvm.fma.f64(double %1800, double %1807, double 0x3FC5555555555511)
  %1809 = tail call double @llvm.fma.f64(double %1800, double %1808, double 0x3FE000000000000B)
  %1810 = tail call double @llvm.fma.f64(double %1800, double %1809, double 1.000000e+00)
  %1811 = tail call double @llvm.fma.f64(double %1800, double %1810, double 1.000000e+00)
  %1812 = fptosi double %1797 to i32
  %1813 = tail call double @llvm.ldexp.f64.i32(double %1811, i32 %1812)
  %1814 = fcmp ogt double %1792, 1.024000e+03
  %1815 = select i1 %1814, double 0x7FF0000000000000, double %1813
  %1816 = fcmp olt double %1792, -1.075000e+03
  %1817 = select i1 %1816, double 0.000000e+00, double %1815
  %1818 = tail call double @llvm.fma.f64(double %1817, double %1795, double %1817) #7
  %1819 = tail call double @llvm.fabs.f64(double %1817) #7
  %1820 = fcmp oeq double %1819, 0x7FF0000000000000
  %1821 = select i1 %1820, double %1817, double %1818
  %1822 = tail call double @llvm.trunc.f64(double %1782) #7
  %1823 = fcmp oeq double %1822, %1782
  %1824 = fmul double %1782, 5.000000e-01
  %1825 = tail call double @llvm.trunc.f64(double %1824) #7
  %1826 = fcmp une double %1825, %1824
  %1827 = and i1 %1823, %1826
  %1828 = select i1 %1827, double %u.coerce2, double 1.000000e+00
  %1829 = tail call double @llvm.copysign.f64(double %1821, double %1828) #7
  %1830 = select i1 %1823, double %1829, double 0x7FF8000000000000
  %1831 = select i1 %868, double %1830, double %1829
  %1832 = select i1 %1827, double %u.coerce2, double 0.000000e+00
  %1833 = tail call double @llvm.copysign.f64(double %874, double %1832) #7
  %1834 = select i1 %873, double %1833, double %1831
  %1835 = select i1 %878, double 0x7FF8000000000000, double %1834
  %neg1294 = fmul double %1462, 0xC0D75E8A00000000
  %1836 = tail call double @llvm.fmuladd.f64(double %1835, double 0x40CFB72900000000, double %neg1294)
  %1837 = tail call double @llvm.fmuladd.f64(double %1091, double 0x40C49EB600000000, double %1836)
  %neg1299 = fmul double %u.coerce2, 0xC095FEA000000000
  %1838 = tail call double @llvm.fmuladd.f64(double %neg1299, double %u.coerce2, double %1837)
  %add1300 = fadd double %1838, 0x403B120000000000
  %mul1301 = fmul double %mul1289, %add1300
  %mul1302 = fmul double %phi.0, 2.000000e+00
  %1839 = tail call double @llvm.fabs.f64(double %mul1302) #7
  %1840 = fcmp olt double %1839, 0x41D0000000000000
  %1841 = tail call double @llvm.amdgcn.trig.preop.f64(double %1839, i32 0)
  %1842 = tail call double @llvm.amdgcn.trig.preop.f64(double %1839, i32 1)
  %1843 = fcmp oge double %1839, 0x7B00000000000000
  %1844 = tail call double @llvm.ldexp.f64.i32(double %1839, i32 -128)
  %1845 = select i1 %1843, double %1844, double %1839
  %1846 = fmul double %1842, %1845
  %1847 = fmul double %1841, %1845
  %1848 = fneg double %1847
  %1849 = tail call double @llvm.fma.f64(double %1841, double %1845, double %1848)
  %1850 = fadd double %1846, %1849
  %1851 = fadd double %1847, %1850
  %1852 = tail call double @llvm.ldexp.f64.i32(double %1851, i32 -2)
  %1853 = tail call double @llvm.floor.f64(double %1852)
  %1854 = fsub double %1852, %1853
  %1855 = tail call double @llvm.minnum.f64(double %1854, double 0x3FEFFFFFFFFFFFFF)
  %1856 = fcmp uno double %1852, 0.000000e+00
  %1857 = select i1 %1856, double %1852, double %1855
  %1858 = tail call double @llvm.fabs.f64(double %1852)
  %1859 = fcmp oeq double %1858, 0x7FF0000000000000
  %1860 = select i1 %1859, double 0.000000e+00, double %1857
  %1861 = fsub double %1850, %1846
  %1862 = fsub double %1849, %1861
  %1863 = fsub double %1850, %1861
  %1864 = fsub double %1846, %1863
  %1865 = fadd double %1862, %1864
  %1866 = fneg double %1846
  %1867 = tail call double @llvm.fma.f64(double %1842, double %1845, double %1866)
  %1868 = tail call double @llvm.amdgcn.trig.preop.f64(double %1839, i32 2)
  %1869 = fmul double %1868, %1845
  %1870 = fadd double %1869, %1867
  %1871 = fadd double %1870, %1865
  %1872 = fsub double %1851, %1847
  %1873 = fsub double %1850, %1872
  %1874 = fadd double %1873, %1871
  %1875 = fsub double %1874, %1873
  %1876 = fsub double %1871, %1875
  %1877 = fsub double %1871, %1870
  %1878 = fsub double %1865, %1877
  %1879 = fsub double %1871, %1877
  %1880 = fsub double %1870, %1879
  %1881 = fadd double %1878, %1880
  %1882 = fsub double %1870, %1869
  %1883 = fsub double %1867, %1882
  %1884 = fsub double %1870, %1882
  %1885 = fsub double %1869, %1884
  %1886 = fadd double %1883, %1885
  %1887 = fadd double %1886, %1881
  %1888 = fneg double %1869
  %1889 = tail call double @llvm.fma.f64(double %1868, double %1845, double %1888)
  %1890 = fadd double %1889, %1887
  %1891 = fadd double %1876, %1890
  %1892 = tail call double @llvm.ldexp.f64.i32(double %1860, i32 2)
  %1893 = fadd double %1874, %1892
  %1894 = fcmp olt double %1893, 0.000000e+00
  %1895 = select i1 %1894, double 4.000000e+00, double 0.000000e+00
  %1896 = fadd double %1892, %1895
  %1897 = fadd double %1874, %1896
  %1898 = fptosi double %1897 to i32
  %1899 = sitofp i32 %1898 to double
  %1900 = fsub double %1896, %1899
  %1901 = fadd double %1874, %1900
  %1902 = fsub double %1901, %1900
  %1903 = fsub double %1874, %1902
  %1904 = fadd double %1891, %1903
  %1905 = fcmp oge double %1901, 5.000000e-01
  %1906 = zext i1 %1905 to i32
  %1907 = add nsw i32 %1906, %1898
  %1908 = select i1 %1905, double 1.000000e+00, double 0.000000e+00
  %1909 = fsub double %1901, %1908
  %1910 = fadd double %1909, %1904
  %1911 = fsub double %1910, %1909
  %1912 = fsub double %1904, %1911
  %1913 = fmul double %1910, 0x3FF921FB54442D18
  %1914 = fneg double %1913
  %1915 = tail call double @llvm.fma.f64(double %1910, double 0x3FF921FB54442D18, double %1914)
  %1916 = tail call double @llvm.fma.f64(double %1910, double 0x3C91A62633145C07, double %1915)
  %1917 = tail call double @llvm.fma.f64(double %1912, double 0x3FF921FB54442D18, double %1916)
  %1918 = fadd double %1913, %1917
  %1919 = fsub double %1918, %1913
  %1920 = fsub double %1917, %1919
  %1921 = fmul double %1839, 0x3FE45F306DC9C883
  %1922 = tail call double @llvm.rint.f64(double %1921)
  %1923 = tail call double @llvm.fma.f64(double %1922, double 0xBFF921FB54442D18, double %1839)
  %1924 = tail call double @llvm.fma.f64(double %1922, double 0xBC91A62633145C00, double %1923)
  %1925 = fmul double %1922, 0x3C91A62633145C00
  %1926 = fneg double %1925
  %1927 = tail call double @llvm.fma.f64(double %1922, double 0x3C91A62633145C00, double %1926)
  %1928 = fsub double %1923, %1925
  %1929 = fsub double %1923, %1928
  %1930 = fsub double %1929, %1925
  %1931 = fsub double %1928, %1924
  %1932 = fadd double %1931, %1930
  %1933 = fsub double %1932, %1927
  %1934 = tail call double @llvm.fma.f64(double %1922, double 0xB97B839A252049C0, double %1933)
  %1935 = fadd double %1924, %1934
  %1936 = fsub double %1935, %1924
  %1937 = fsub double %1934, %1936
  %1938 = fptosi double %1922 to i32
  %1939 = bitcast double %mul1302 to <2 x i32>
  %1940 = extractelement <2 x i32> %1939, i64 1
  %1941 = fcmp one double %1839, 0x7FF0000000000000
  %1942 = tail call double @llvm.sqrt.f64(double %47) #7
  %mul1309 = fmul double %1942, 0x3FC1426FAC0654CC
  %1943 = select i1 %700, double 1.000000e+00, double 9.000000e+00
  %1944 = fmul double %1943, %818
  %1945 = fneg double %1944
  %1946 = tail call double @llvm.fma.f64(double %1943, double %818, double %1945) #7
  %1947 = tail call double @llvm.fma.f64(double %1943, double %820, double %1946) #7
  %1948 = fadd double %1944, %1947
  %1949 = fsub double %1948, %1944
  %1950 = fsub double %1947, %1949
  %1951 = tail call double @llvm.fabs.f64(double %1944) #7
  %1952 = fcmp oeq double %1951, 0x7FF0000000000000
  %1953 = select i1 %1952, double %1944, double %1948
  %1954 = tail call double @llvm.fabs.f64(double %1953) #7
  %1955 = fcmp oeq double %1954, 0x7FF0000000000000
  %1956 = select i1 %1955, double 0.000000e+00, double %1950
  %1957 = fmul double %1953, 0x3FF71547652B82FE
  %1958 = tail call double @llvm.rint.f64(double %1957)
  %1959 = fneg double %1958
  %1960 = tail call double @llvm.fma.f64(double %1959, double 0x3FE62E42FEFA39EF, double %1953)
  %1961 = tail call double @llvm.fma.f64(double %1959, double 0x3C7ABC9E3B39803F, double %1960)
  %1962 = tail call double @llvm.fma.f64(double %1961, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %1963 = tail call double @llvm.fma.f64(double %1961, double %1962, double 0x3EC71DEE623FDE64)
  %1964 = tail call double @llvm.fma.f64(double %1961, double %1963, double 0x3EFA01997C89E6B0)
  %1965 = tail call double @llvm.fma.f64(double %1961, double %1964, double 0x3F2A01A014761F6E)
  %1966 = tail call double @llvm.fma.f64(double %1961, double %1965, double 0x3F56C16C1852B7B0)
  %1967 = tail call double @llvm.fma.f64(double %1961, double %1966, double 0x3F81111111122322)
  %1968 = tail call double @llvm.fma.f64(double %1961, double %1967, double 0x3FA55555555502A1)
  %1969 = tail call double @llvm.fma.f64(double %1961, double %1968, double 0x3FC5555555555511)
  %1970 = tail call double @llvm.fma.f64(double %1961, double %1969, double 0x3FE000000000000B)
  %1971 = tail call double @llvm.fma.f64(double %1961, double %1970, double 1.000000e+00)
  %1972 = tail call double @llvm.fma.f64(double %1961, double %1971, double 1.000000e+00)
  %1973 = fptosi double %1958 to i32
  %1974 = tail call double @llvm.ldexp.f64.i32(double %1972, i32 %1973)
  %1975 = fcmp ogt double %1953, 1.024000e+03
  %1976 = select i1 %1975, double 0x7FF0000000000000, double %1974
  %1977 = fcmp olt double %1953, -1.075000e+03
  %1978 = select i1 %1977, double 0.000000e+00, double %1976
  %1979 = tail call double @llvm.fma.f64(double %1978, double %1956, double %1978) #7
  %1980 = tail call double @llvm.fabs.f64(double %1978) #7
  %1981 = fcmp oeq double %1980, 0x7FF0000000000000
  %1982 = select i1 %1981, double %1978, double %1979
  %1983 = tail call double @llvm.trunc.f64(double %1943) #7
  %1984 = fcmp oeq double %1983, %1943
  %1985 = fmul double %1943, 5.000000e-01
  %1986 = tail call double @llvm.trunc.f64(double %1985) #7
  %1987 = fcmp une double %1986, %1985
  %1988 = and i1 %1984, %1987
  %1989 = select i1 %1988, double %u.coerce2, double 1.000000e+00
  %1990 = tail call double @llvm.copysign.f64(double %1982, double %1989) #7
  %1991 = select i1 %1984, double %1990, double 0x7FF8000000000000
  %1992 = select i1 %868, double %1991, double %1990
  %1993 = select i1 %1988, double %u.coerce2, double 0.000000e+00
  %1994 = tail call double @llvm.copysign.f64(double %874, double %1993) #7
  %1995 = select i1 %873, double %1994, double %1992
  %neg1314 = fmul double %1675, 0xC0AAB53000000000
  %1996 = tail call double @llvm.fmuladd.f64(double %1995, double 0x409C310800000000, double %neg1314)
  %1997 = tail call double @llvm.fmuladd.f64(double %1303, double 0x40A07EF800000000, double %1996)
  %1998 = tail call double @llvm.fmuladd.f64(double %879, double 0xC07D538000000000, double %1997)
  %1999 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0x403B120000000000, double %1998)
  %2000 = select i1 %878, double 0x7FF8000000000000, double %1999
  %mul1320 = fmul double %mul1309, %2000
  %2001 = tail call double @llvm.fabs.f64(double %phi.0) #7
  %2002 = fcmp olt double %2001, 0x41D0000000000000
  %2003 = tail call double @llvm.amdgcn.trig.preop.f64(double %2001, i32 0)
  %2004 = tail call double @llvm.amdgcn.trig.preop.f64(double %2001, i32 1)
  %2005 = fcmp oge double %2001, 0x7B00000000000000
  %2006 = tail call double @llvm.ldexp.f64.i32(double %2001, i32 -128)
  %2007 = select i1 %2005, double %2006, double %2001
  %2008 = fmul double %2004, %2007
  %2009 = fmul double %2003, %2007
  %2010 = fneg double %2009
  %2011 = tail call double @llvm.fma.f64(double %2003, double %2007, double %2010)
  %2012 = fadd double %2008, %2011
  %2013 = fadd double %2009, %2012
  %2014 = tail call double @llvm.ldexp.f64.i32(double %2013, i32 -2)
  %2015 = tail call double @llvm.floor.f64(double %2014)
  %2016 = fsub double %2014, %2015
  %2017 = tail call double @llvm.minnum.f64(double %2016, double 0x3FEFFFFFFFFFFFFF)
  %2018 = fcmp uno double %2014, 0.000000e+00
  %2019 = select i1 %2018, double %2014, double %2017
  %2020 = tail call double @llvm.fabs.f64(double %2014)
  %2021 = fcmp oeq double %2020, 0x7FF0000000000000
  %2022 = select i1 %2021, double 0.000000e+00, double %2019
  %2023 = fsub double %2012, %2008
  %2024 = fsub double %2011, %2023
  %2025 = fsub double %2012, %2023
  %2026 = fsub double %2008, %2025
  %2027 = fadd double %2024, %2026
  %2028 = fneg double %2008
  %2029 = tail call double @llvm.fma.f64(double %2004, double %2007, double %2028)
  %2030 = tail call double @llvm.amdgcn.trig.preop.f64(double %2001, i32 2)
  %2031 = fmul double %2030, %2007
  %2032 = fadd double %2031, %2029
  %2033 = fadd double %2032, %2027
  %2034 = fsub double %2013, %2009
  %2035 = fsub double %2012, %2034
  %2036 = fadd double %2035, %2033
  %2037 = fsub double %2036, %2035
  %2038 = fsub double %2033, %2037
  %2039 = fsub double %2033, %2032
  %2040 = fsub double %2027, %2039
  %2041 = fsub double %2033, %2039
  %2042 = fsub double %2032, %2041
  %2043 = fadd double %2040, %2042
  %2044 = fsub double %2032, %2031
  %2045 = fsub double %2029, %2044
  %2046 = fsub double %2032, %2044
  %2047 = fsub double %2031, %2046
  %2048 = fadd double %2045, %2047
  %2049 = fadd double %2048, %2043
  %2050 = fneg double %2031
  %2051 = tail call double @llvm.fma.f64(double %2030, double %2007, double %2050)
  %2052 = fadd double %2051, %2049
  %2053 = fadd double %2038, %2052
  %2054 = tail call double @llvm.ldexp.f64.i32(double %2022, i32 2)
  %2055 = fadd double %2036, %2054
  %2056 = fcmp olt double %2055, 0.000000e+00
  %2057 = select i1 %2056, double 4.000000e+00, double 0.000000e+00
  %2058 = fadd double %2054, %2057
  %2059 = fadd double %2036, %2058
  %2060 = fptosi double %2059 to i32
  %2061 = sitofp i32 %2060 to double
  %2062 = fsub double %2058, %2061
  %2063 = fadd double %2036, %2062
  %2064 = fsub double %2063, %2062
  %2065 = fsub double %2036, %2064
  %2066 = fadd double %2053, %2065
  %2067 = fcmp oge double %2063, 5.000000e-01
  %2068 = zext i1 %2067 to i32
  %2069 = add nsw i32 %2068, %2060
  %2070 = select i1 %2067, double 1.000000e+00, double 0.000000e+00
  %2071 = fsub double %2063, %2070
  %2072 = fadd double %2071, %2066
  %2073 = fsub double %2072, %2071
  %2074 = fsub double %2066, %2073
  %2075 = fmul double %2072, 0x3FF921FB54442D18
  %2076 = fneg double %2075
  %2077 = tail call double @llvm.fma.f64(double %2072, double 0x3FF921FB54442D18, double %2076)
  %2078 = tail call double @llvm.fma.f64(double %2072, double 0x3C91A62633145C07, double %2077)
  %2079 = tail call double @llvm.fma.f64(double %2074, double 0x3FF921FB54442D18, double %2078)
  %2080 = fadd double %2075, %2079
  %2081 = fsub double %2080, %2075
  %2082 = fsub double %2079, %2081
  %2083 = fmul double %2001, 0x3FE45F306DC9C883
  %2084 = tail call double @llvm.rint.f64(double %2083)
  %2085 = tail call double @llvm.fma.f64(double %2084, double 0xBFF921FB54442D18, double %2001)
  %2086 = tail call double @llvm.fma.f64(double %2084, double 0xBC91A62633145C00, double %2085)
  %2087 = fmul double %2084, 0x3C91A62633145C00
  %2088 = fneg double %2087
  %2089 = tail call double @llvm.fma.f64(double %2084, double 0x3C91A62633145C00, double %2088)
  %2090 = fsub double %2085, %2087
  %2091 = fsub double %2085, %2090
  %2092 = fsub double %2091, %2087
  %2093 = fsub double %2090, %2086
  %2094 = fadd double %2093, %2092
  %2095 = fsub double %2094, %2089
  %2096 = tail call double @llvm.fma.f64(double %2084, double 0xB97B839A252049C0, double %2095)
  %2097 = fadd double %2086, %2096
  %2098 = fsub double %2097, %2086
  %2099 = fsub double %2096, %2098
  %2100 = fptosi double %2084 to i32
  %2101 = bitcast double %phi.0 to <2 x i32>
  %2102 = extractelement <2 x i32> %2101, i64 1
  %2103 = fcmp one double %2001, 0x7FF0000000000000
  %2104 = select i1 %700, double 1.000000e+00, double 1.000000e+01
  %2105 = fmul double %2104, %818
  %2106 = fneg double %2105
  %2107 = tail call double @llvm.fma.f64(double %2104, double %818, double %2106) #7
  %2108 = tail call double @llvm.fma.f64(double %2104, double %820, double %2107) #7
  %2109 = fadd double %2105, %2108
  %2110 = fsub double %2109, %2105
  %2111 = fsub double %2108, %2110
  %2112 = tail call double @llvm.fabs.f64(double %2105) #7
  %2113 = fcmp oeq double %2112, 0x7FF0000000000000
  %2114 = select i1 %2113, double %2105, double %2109
  %2115 = tail call double @llvm.fabs.f64(double %2114) #7
  %2116 = fcmp oeq double %2115, 0x7FF0000000000000
  %2117 = select i1 %2116, double 0.000000e+00, double %2111
  %2118 = fmul double %2114, 0x3FF71547652B82FE
  %2119 = tail call double @llvm.rint.f64(double %2118)
  %2120 = fneg double %2119
  %2121 = tail call double @llvm.fma.f64(double %2120, double 0x3FE62E42FEFA39EF, double %2114)
  %2122 = tail call double @llvm.fma.f64(double %2120, double 0x3C7ABC9E3B39803F, double %2121)
  %2123 = tail call double @llvm.fma.f64(double %2122, double 0x3E5ADE156A5DCB37, double 0x3E928AF3FCA7AB0C)
  %2124 = tail call double @llvm.fma.f64(double %2122, double %2123, double 0x3EC71DEE623FDE64)
  %2125 = tail call double @llvm.fma.f64(double %2122, double %2124, double 0x3EFA01997C89E6B0)
  %2126 = tail call double @llvm.fma.f64(double %2122, double %2125, double 0x3F2A01A014761F6E)
  %2127 = tail call double @llvm.fma.f64(double %2122, double %2126, double 0x3F56C16C1852B7B0)
  %2128 = tail call double @llvm.fma.f64(double %2122, double %2127, double 0x3F81111111122322)
  %2129 = tail call double @llvm.fma.f64(double %2122, double %2128, double 0x3FA55555555502A1)
  %2130 = tail call double @llvm.fma.f64(double %2122, double %2129, double 0x3FC5555555555511)
  %2131 = tail call double @llvm.fma.f64(double %2122, double %2130, double 0x3FE000000000000B)
  %2132 = tail call double @llvm.fma.f64(double %2122, double %2131, double 1.000000e+00)
  %2133 = tail call double @llvm.fma.f64(double %2122, double %2132, double 1.000000e+00)
  %2134 = fptosi double %2119 to i32
  %2135 = tail call double @llvm.ldexp.f64.i32(double %2133, i32 %2134)
  %2136 = fcmp ogt double %2114, 1.024000e+03
  %2137 = select i1 %2136, double 0x7FF0000000000000, double %2135
  %2138 = fcmp olt double %2114, -1.075000e+03
  %2139 = select i1 %2138, double 0.000000e+00, double %2137
  %2140 = tail call double @llvm.fma.f64(double %2139, double %2117, double %2139) #7
  %2141 = tail call double @llvm.fabs.f64(double %2139) #7
  %2142 = fcmp oeq double %2141, 0x7FF0000000000000
  %2143 = select i1 %2142, double %2139, double %2140
  %2144 = tail call double @llvm.trunc.f64(double %2104) #7
  %2145 = fcmp oeq double %2144, %2104
  %2146 = fmul double %2104, 5.000000e-01
  %2147 = tail call double @llvm.trunc.f64(double %2146) #7
  %2148 = fcmp une double %2147, %2146
  %2149 = and i1 %2145, %2148
  %2150 = select i1 %2149, double %u.coerce2, double 1.000000e+00
  %2151 = tail call double @llvm.copysign.f64(double %2143, double %2150) #7
  %2152 = select i1 %2145, double %2151, double 0x7FF8000000000000
  %2153 = select i1 %868, double %2152, double %2151
  %2154 = select i1 %2149, double %u.coerce2, double 0.000000e+00
  %2155 = tail call double @llvm.copysign.f64(double %874, double %2154) #7
  %2156 = select i1 %873, double %2155, double %2153
  %neg1331 = fmul double %1835, 0xC07AB53000000000
  %2157 = tail call double @llvm.fmuladd.f64(double %2156, double 0x40668DA000000000, double %neg1331)
  %2158 = tail call double @llvm.fmuladd.f64(double %1462, double 0x4075FEA000000000, double %2157)
  %2159 = tail call double @llvm.fmuladd.f64(double %1091, double 0xC05D538000000000, double %2158)
  %mul1336 = fmul double %u.coerce2, 0x402B120000000000
  %2160 = tail call double @llvm.fmuladd.f64(double %mul1336, double %u.coerce2, double %2159)
  %2161 = fadd double %2160, 0xBFCF800000000000
  %sub1338 = select i1 %878, double 0x7FF8000000000000, double %2161
  %2162 = fmul double %383, 0x3FE37D5526A15C9A
  %mul913 = select i1 %226, double 0x7FF8000000000000, double %2162
  %mul920 = fmul double %u.coerce2, 0x4004ABFC845A43B6
  %2163 = select i1 %226, double 0x7FF8000000000000, double %540
  %mul922 = fmul double %mul920, %2163
  %2164 = fmul double %698, 0x3E9D57BB3E3A55A1
  %mul930 = select i1 %226, double 0x7FF8000000000000, double %2164
  %mul931 = fmul double %u.coerce2, 0x41706E7908000000
  %2165 = tail call double @llvm.fmuladd.f64(double %mul931, double %u.coerce2, double 0xC12EEE1100000000)
  %mul933 = fmul double %2165, %mul930
  %2166 = fmul double %1036, 0x3EC96959A8FA065F
  %mul942 = select i1 %226, double 0x7FF8000000000000, double %2166
  %neg946 = fmul double %u.coerce2, 0xC12EEE1100000000
  %2167 = tail call double @llvm.fmuladd.f64(double %879, double 0x4155E8A160000000, double %neg946)
  %mul947 = fmul double %2167, %mul942
  %2168 = fmul double %1248, 0x3EF89AC73D5B85FB
  %mul955 = select i1 %226, double 0x7FF8000000000000, double %2168
  %mul958 = fmul double %u.coerce2, 0x411EEE1100000000
  %neg960 = fmul double %mul958, %neg
  %2169 = tail call double @llvm.fmuladd.f64(double %1091, double 0x4135E8A160000000, double %neg960)
  %add961 = fadd double %2169, 0x40D07EF800000000
  %mul962 = fmul double %mul955, %add961
  %mul970 = fmul double %47, 0x3F29BB6B855AE78D
  %mul971 = fmul double %47, %mul970
  %neg976 = fmul double %879, 0xC1049EB600000000
  %2170 = tail call double @llvm.fmuladd.f64(double %1303, double 0x411186E780000000, double %neg976)
  %2171 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0x40D07EF800000000, double %2170)
  %mul978 = fmul double %mul971, %2171
  %2172 = fmul double %1620, 0x3F5C685095137120
  %mul986 = select i1 %226, double 0x7FF8000000000000, double %2172
  %neg991 = fmul double %1091, 0xC0E49EB600000000
  %2173 = tail call double @llvm.fmuladd.f64(double %1462, double 0x40E75E8A00000000, double %neg991)
  %mul992 = fmul double %u.coerce2, 0x40C07EF800000000
  %2174 = tail call double @llvm.fmuladd.f64(double %mul992, double %u.coerce2, double %2173)
  %sub994 = fadd double %2174, 0xC06B120000000000
  %mul995 = fmul double %mul986, %sub994
  %mul1003 = fmul double %47, 0x3F9045BDDA95A9A7
  %neg1008 = fmul double %1303, 0xC0C07EF800000000
  %2175 = tail call double @llvm.fmuladd.f64(double %1675, double 0x40BAB53000000000, double %neg1008)
  %2176 = tail call double @llvm.fmuladd.f64(double %879, double 0x40A5FEA000000000, double %2175)
  %2177 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0xC06B120000000000, double %2176)
  %mul1012 = fmul double %mul1003, %2177
  %mul1020 = fmul double %1942, 0x3FC314C3D92A9E92
  %neg1025 = fmul double %1462, 0xC095FEA000000000
  %2178 = tail call double @llvm.fmuladd.f64(double %1834, double 0x408AB53000000000, double %neg1025)
  %2179 = tail call double @llvm.fmuladd.f64(double %1091, double 0x4085FEA000000000, double %2178)
  %neg1030 = fmul double %u.coerce2, 0xC05B120000000000
  %2180 = tail call double @llvm.fmuladd.f64(double %neg1030, double %u.coerce2, double %2179)
  %2181 = fadd double %2180, 0x4003B00000000000
  %add1031 = select i1 %878, double 0x7FF8000000000000, double %2181
  %mul1032 = fmul double %mul1020, %add1031
  %neg1043 = fmul double %1675, 0xC069230000000000
  %2182 = tail call double @llvm.fmuladd.f64(double %1995, double 0x4057BD8000000000, double %neg1043)
  %2183 = tail call double @llvm.fmuladd.f64(double %1303, double 0x4061988000000000, double %2182)
  %2184 = tail call double @llvm.fmuladd.f64(double %879, double 0xC0420C0000000000, double %2183)
  %2185 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0x4003B00000000000, double %2184)
  %2186 = select i1 %878, double 0x7FF8000000000000, double %2185
  %2187 = fmul double %540, 0x3FE40DFB1D04B0B1
  %mul685 = select i1 %226, double 0x7FF8000000000000, double %2187
  %mul691 = fmul double %u.coerce2, 0x40040DFB1D04B0BA
  %2188 = select i1 %226, double 0x7FF8000000000000, double %698
  %mul693 = fmul double %mul691, %2188
  %2189 = fmul double %1036, 0x3EDC6933E23FC618
  %mul702 = select i1 %226, double 0x7FF8000000000000, double %2189
  %mul703 = fmul double %u.coerce2, 0x412EEE1100000000
  %2190 = tail call double @llvm.fmuladd.f64(double %mul703, double %u.coerce2, double -6.756750e+04)
  %mul705 = fmul double %2190, %mul702
  %2191 = fmul double %1248, 0x3F0703F7B2A69C55
  %mul713 = select i1 %226, double 0x7FF8000000000000, double %2191
  %neg717 = fmul double %u.coerce2, -6.756750e+04
  %2192 = tail call double @llvm.fmuladd.f64(double %879, double 0x41149EB600000000, double %neg717)
  %mul718 = fmul double %2192, %mul713
  %mul726 = fmul double %47, 0x3F34BEF2A2CAF894
  %mul727 = fmul double %47, %mul726
  %mul730 = fmul double %u.coerce2, 0x40E07EF800000000
  %neg732 = fmul double %mul730, %neg
  %2193 = tail call double @llvm.fmuladd.f64(double %1091, double 0x40F49EB600000000, double %neg732)
  %add733 = fadd double %2193, 0x40944D8000000000
  %mul734 = fmul double %mul727, %add733
  %2194 = fmul double %1620, 0x3F64164D9772130F
  %mul742 = select i1 %226, double 0x7FF8000000000000, double %2194
  %neg747 = fmul double %879, 0xC0C5FEA000000000
  %2195 = tail call double @llvm.fmuladd.f64(double %1303, double 0x40D07EF800000000, double %neg747)
  %2196 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 0x40944D8000000000, double %2195)
  %mul749 = fmul double %mul742, %2196
  %mul757 = fmul double %47, 0x3F94660891E3948E
  %neg762 = fmul double %1091, 0xC0A5FEA000000000
  %2197 = tail call double @llvm.fmuladd.f64(double %1462, double 0x40A5FEA000000000, double %neg762)
  %mul763 = fmul double %u.coerce2, 0x40844D8000000000
  %2198 = tail call double @llvm.fmuladd.f64(double %mul763, double %u.coerce2, double %2197)
  %sub765 = fadd double %2198, -1.968750e+01
  %mul766 = fmul double %mul757, %sub765
  %mul774 = fmul double %1942, 0x3FC5555555555561
  %neg779 = fmul double %1303, 0xC081988000000000
  %2199 = tail call double @llvm.fmuladd.f64(double %1674, double 0x4079230000000000, double %neg779)
  %2200 = tail call double @llvm.fmuladd.f64(double %879, double 0x406B120000000000, double %2199)
  %2201 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double -1.968750e+01, double %2200)
  %2202 = select i1 %878, double 0x7FF8000000000000, double %2201
  %mul783 = fmul double %mul774, %2202
  %neg794 = fmul double %1462, 0xC057760000000000
  %2203 = tail call double @llvm.fmuladd.f64(double %1834, double 0x4049230000000000, double %neg794)
  %2204 = tail call double @llvm.fmuladd.f64(double %1091, double 0x404B120000000000, double %2203)
  %neg799 = fmul double %u.coerce2, -9.843750e+00
  %2205 = tail call double @llvm.fmuladd.f64(double %neg799, double %u.coerce2, double %2204)
  %2206 = fadd double %2205, 0x3FD1800000000000
  %add800 = select i1 %878, double 0x7FF8000000000000, double %2206
  %2207 = fmul double %698, 0x3FE4B65A49968D7C
  %mul494 = select i1 %226, double 0x7FF8000000000000, double %2207
  %mul501 = fmul double %u.coerce2, 0x40035FE592EC539B
  %2208 = select i1 %226, double 0x7FF8000000000000, double %1036
  %mul503 = fmul double %mul501, %2208
  %2209 = fmul double %1248, 0x3F17F48DE54A68EA
  %mul511 = select i1 %226, double 0x7FF8000000000000, double %2209
  %mul512 = fmul double %u.coerce2, 6.756750e+04
  %2210 = tail call double @llvm.fmuladd.f64(double %mul512, double %u.coerce2, double -5.197500e+03)
  %mul514 = fmul double %2210, %mul511
  %mul522 = fmul double %47, 0x3F41F76A6BF7CEAF
  %mul523 = fmul double %47, %mul522
  %neg527 = fmul double %u.coerce2, -5.197500e+03
  %2211 = tail call double @llvm.fmuladd.f64(double %879, double 2.252250e+04, double %neg527)
  %mul528 = fmul double %mul523, %2211
  %2212 = fmul double %1620, 0x3F6DCB44A10C625F
  %mul536 = select i1 %226, double 0x7FF8000000000000, double %2212
  %mul539 = fmul double %u.coerce2, 2.598750e+03
  %neg541 = fmul double %mul539, %neg
  %2213 = tail call double @llvm.fmuladd.f64(double %1091, double 0x40B5FEA000000000, double %neg541)
  %add542 = fadd double %2213, 1.181250e+02
  %mul543 = fmul double %mul536, %add542
  %mul551 = fmul double %47, 0x3F9A559DC12ABD5E
  %neg556 = fmul double %879, -8.662500e+02
  %2214 = tail call double @llvm.fmuladd.f64(double %1303, double 0x4091988000000000, double %neg556)
  %2215 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 1.181250e+02, double %2214)
  %mul558 = fmul double %mul551, %2215
  %mul566 = fmul double %1942, 0x3FC83091E6A7F7F4
  %neg571 = fmul double %1091, 0xC06B120000000000
  %2216 = tail call double @llvm.fmuladd.f64(double %1461, double 0x4067760000000000, double %neg571)
  %mul572 = fmul double %u.coerce2, 5.906250e+01
  %2217 = tail call double @llvm.fmuladd.f64(double %mul572, double %u.coerce2, double %2216)
  %2218 = fadd double %2217, -2.187500e+00
  %sub574 = select i1 %878, double 0x7FF8000000000000, double %2218
  %mul575 = fmul double %mul566, %sub574
  %neg586 = fmul double %1303, -4.331250e+01
  %2219 = tail call double @llvm.fmuladd.f64(double %1674, double 2.681250e+01, double %neg586)
  %2220 = tail call double @llvm.fmuladd.f64(double %879, double 1.968750e+01, double %2219)
  %2221 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double -2.187500e+00, double %2220)
  %2222 = select i1 %878, double 0x7FF8000000000000, double %2221
  %2223 = fmul double %1036, 0x3FE57E82ECDABE8C
  %mul339 = select i1 %226, double 0x7FF8000000000000, double %2223
  %mul345 = fmul double %u.coerce2, 0x40029D508EDF588B
  %2224 = select i1 %226, double 0x7FF8000000000000, double %1248
  %mul347 = fmul double %mul345, %2224
  %mul355 = fmul double %47, 0x3F51339AF3AAA4E8
  %mul356 = fmul double %47, %mul355
  %mul357 = fmul double %u.coerce2, 5.197500e+03
  %2225 = tail call double @llvm.fmuladd.f64(double %mul357, double %u.coerce2, double -4.725000e+02)
  %mul359 = fmul double %2225, %mul356
  %2226 = fmul double %1620, 0x3F778DE286989F52
  %mul367 = select i1 %226, double 0x7FF8000000000000, double %2226
  %neg371 = fmul double %u.coerce2, -4.725000e+02
  %2227 = tail call double @llvm.fmuladd.f64(double %879, double 1.732500e+03, double %neg371)
  %mul372 = fmul double %2227, %mul367
  %mul380 = fmul double %47, 0x3FA1AA69E4F2777D
  %mul383 = fmul double %u.coerce2, 2.362500e+02
  %neg385 = fmul double %mul383, %neg
  %2228 = tail call double @llvm.fmuladd.f64(double %1091, double 4.331250e+02, double %neg385)
  %add386 = fadd double %2228, 1.312500e+01
  %mul387 = fmul double %mul380, %add386
  %mul395 = fmul double %1942, 0x3FCBEE9056FB9C2B
  %neg400 = fmul double %879, -7.875000e+01
  %2229 = tail call double @llvm.fmuladd.f64(double %1302, double 8.662500e+01, double %neg400)
  %2230 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 1.312500e+01, double %2229)
  %2231 = select i1 %878, double 0x7FF8000000000000, double %2230
  %mul402 = fmul double %mul395, %2231
  %neg413 = fmul double %1091, -1.968750e+01
  %2232 = tail call double @llvm.fmuladd.f64(double %1461, double 1.443750e+01, double %neg413)
  %mul414 = fmul double %u.coerce2, 6.562500e+00
  %2233 = tail call double @llvm.fmuladd.f64(double %mul414, double %u.coerce2, double %2232)
  %2234 = fadd double %2233, -3.125000e-01
  %sub416 = select i1 %878, double 0x7FF8000000000000, double %2234
  %2235 = fmul double %1248, 0x3FE6732F8D0E2F77
  %mul216 = select i1 %226, double 0x7FF8000000000000, double %2235
  %mul223 = fmul double %u.coerce2, 0x4001BF8C9D2ED1AB
  %mul224 = fmul double %mul223, %47
  %mul225 = fmul double %47, %mul224
  %2236 = fmul double %1620, 0x3F84660891E3948E
  %mul233 = select i1 %226, double 0x7FF8000000000000, double %2236
  %mul234 = fmul double %u.coerce2, 4.725000e+02
  %2237 = tail call double @llvm.fmuladd.f64(double %mul234, double %u.coerce2, double -5.250000e+01)
  %mul236 = fmul double %2237, %mul233
  %mul244 = fmul double %47, 0x3FA8FBA8A1BF6F9C
  %neg248 = fmul double %u.coerce2, -5.250000e+01
  %2238 = tail call double @llvm.fmuladd.f64(double %879, double 1.575000e+02, double %neg248)
  %mul249 = fmul double %mul244, %2238
  %mul257 = fmul double %1942, 0x3FD08654A2D4F6D8
  %mul260 = fmul double %u.coerce2, 2.625000e+01
  %neg262 = fmul double %mul260, %neg
  %2239 = tail call double @llvm.fmuladd.f64(double %1090, double 3.937500e+01, double %neg262)
  %2240 = fadd double %2239, 1.875000e+00
  %add263 = select i1 %878, double 0x7FF8000000000000, double %2240
  %mul264 = fmul double %mul257, %add263
  %neg275 = fmul double %879, -8.750000e+00
  %2241 = tail call double @llvm.fmuladd.f64(double %1302, double 7.875000e+00, double %neg275)
  %2242 = tail call double @llvm.fmuladd.f64(double %u.coerce2, double 1.875000e+00, double %2241)
  %2243 = select i1 %878, double 0x7FF8000000000000, double %2242
  %mul124 = fmul double %47, %47
  %mul125 = fmul double %mul124, 0x3FE7AA10D193C22D
  %mul131 = fmul double %u.coerce2, 0x4000BBB307ACAFDD
  %2244 = select i1 %226, double 0x7FF8000000000000, double %1620
  %mul133 = fmul double %mul131, %2244
  %mul141 = fmul double %47, 0x3FB314C3D92A9E92
  %mul142 = fmul double %u.coerce2, 5.250000e+01
  %2245 = tail call double @llvm.fmuladd.f64(double %mul142, double %u.coerce2, double -7.500000e+00)
  %mul144 = fmul double %mul141, %2245
  %mul152 = fmul double %1942, 0x3FD43D1362484910
  %neg156 = fmul double %u.coerce2, -7.500000e+00
  %2246 = tail call double @llvm.fmuladd.f64(double %877, double 1.750000e+01, double %neg156)
  %2247 = select i1 %878, double 0x7FF8000000000000, double %2246
  %mul157 = fmul double %mul152, %2247
  %mul166 = fmul double %u.coerce2, 3.750000e+00
  %neg168 = fmul double %mul166, %neg
  %2248 = tail call double @llvm.fmuladd.f64(double %1090, double 4.375000e+00, double %neg168)
  %2249 = fadd double %2248, 3.750000e-01
  %add169 = select i1 %878, double 0x7FF8000000000000, double %2249
  %mul206 = fmul double %47, 0x3FE7AA10D193C22D
  %mul207 = fmul double %47, %mul206
  %2250 = fmul double %1620, 0x3FE94C583ADA5B54
  %mul62 = select i1 %226, double 0x7FF8000000000000, double %2250
  %mul69 = fmul double %u.coerce2, 0x3FFEFBDEB14F4EE1
  %mul70 = fmul double %mul69, %47
  %mul78 = fmul double %1942, 0x3FDA20BD700C2C3E
  %mul79 = fmul double %u.coerce2, 7.500000e+00
  %2251 = tail call double @llvm.fmuladd.f64(double %mul79, double %u.coerce2, double -1.500000e+00)
  %mul81 = fmul double %2251, %mul78
  %neg91 = fmul double %u.coerce2, -1.500000e+00
  %2252 = tail call double @llvm.fmuladd.f64(double %877, double 2.500000e+00, double %neg91)
  %2253 = select i1 %878, double 0x7FF8000000000000, double %2252
  %mul20 = fmul double %u.coerce2, -3.000000e+00
  %2254 = tail call double @llvm.fmuladd.f64(double %mul20, double %u.coerce2, double 3.000000e+00)
  %mul22 = fmul double %2254, 0x3FD279A74590331E
  %mul28 = fmul double %u.coerce2, 0x3FFBB67AE8584CB7
  %mul30 = fmul double %mul28, %1942
  %mul37 = fmul double %u.coerce2, 1.500000e+00
  %2255 = tail call double @llvm.fmuladd.f64(double %mul37, double %u.coerce2, double -5.000000e-01)
  %.1644 = select i1 %229, double %326, double %309
  %.1645 = select i1 %229, double %324, double %307
  %.1646 = select i1 %229, i32 %327, i32 %296
  %2256 = fmul double %.1645, %.1645
  %2257 = fmul double %2256, 5.000000e-01
  %2258 = fsub double 1.000000e+00, %2257
  %2259 = fsub double 1.000000e+00, %2258
  %2260 = fsub double %2259, %2257
  %2261 = fmul double %2256, %2256
  %2262 = tail call double @llvm.fma.f64(double %2256, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2263 = tail call double @llvm.fma.f64(double %2256, double %2262, double 0xBE927E4FA17F65F6)
  %2264 = tail call double @llvm.fma.f64(double %2256, double %2263, double 0x3EFA01A019F4EC90)
  %2265 = tail call double @llvm.fma.f64(double %2256, double %2264, double 0xBF56C16C16C16967)
  %2266 = tail call double @llvm.fma.f64(double %2256, double %2265, double 0x3FA5555555555555)
  %2267 = fneg double %.1644
  %2268 = tail call double @llvm.fma.f64(double %.1645, double %2267, double %2260)
  %2269 = tail call double @llvm.fma.f64(double %2261, double %2266, double %2268)
  %2270 = fadd double %2258, %2269
  %2271 = tail call double @llvm.fma.f64(double %2256, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2272 = tail call double @llvm.fma.f64(double %2256, double %2271, double 0x3EC71DE3796CDE01)
  %2273 = tail call double @llvm.fma.f64(double %2256, double %2272, double 0xBF2A01A019E83E5C)
  %2274 = tail call double @llvm.fma.f64(double %2256, double %2273, double 0x3F81111111110BB3)
  %2275 = fneg double %2256
  %2276 = fmul double %.1645, %2275
  %2277 = fmul double %.1644, 5.000000e-01
  %2278 = tail call double @llvm.fma.f64(double %2276, double %2274, double %2277)
  %2279 = tail call double @llvm.fma.f64(double %2256, double %2278, double %2267)
  %2280 = tail call double @llvm.fma.f64(double %2276, double 0xBFC5555555555555, double %2279)
  %2281 = fsub double %.1645, %2280
  %2282 = and i32 %.1646, 1
  %2283 = icmp eq i32 %2282, 0
  %2284 = select i1 %2283, double %2281, double %2270
  %2285 = bitcast double %2284 to <2 x i32>
  %.pn1.i.i1469 = shl i32 %.1646, 30
  %2286 = xor i32 %.pn1.i.i1469, %329
  %2287 = and i32 %2286, -2147483648
  %2288 = extractelement <2 x i32> %2285, i64 1
  %2289 = xor i32 %2288, %2287
  %2290 = insertelement <2 x i32> %2285, i32 %2289, i64 1
  %2291 = select i1 %330, <2 x i32> %2290, <2 x i32> <i32 0, i32 2146959360>
  %2292 = bitcast <2 x i32> %2291 to double
  %mul1185 = fmul double %mul1182, %2292
  %.pn5.i.i1472 = select i1 %386, double %483, double %466
  %.pn3.i.i1473 = select i1 %386, double %481, double %464
  %.pn1.in.i.i1474 = select i1 %386, i32 %484, i32 %453
  %2293 = fmul double %.pn3.i.i1473, %.pn3.i.i1473
  %2294 = fmul double %2293, 5.000000e-01
  %2295 = fsub double 1.000000e+00, %2294
  %2296 = fsub double 1.000000e+00, %2295
  %2297 = fsub double %2296, %2294
  %2298 = fmul double %2293, %2293
  %2299 = tail call double @llvm.fma.f64(double %2293, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2300 = tail call double @llvm.fma.f64(double %2293, double %2299, double 0xBE927E4FA17F65F6)
  %2301 = tail call double @llvm.fma.f64(double %2293, double %2300, double 0x3EFA01A019F4EC90)
  %2302 = tail call double @llvm.fma.f64(double %2293, double %2301, double 0xBF56C16C16C16967)
  %2303 = tail call double @llvm.fma.f64(double %2293, double %2302, double 0x3FA5555555555555)
  %2304 = fneg double %.pn5.i.i1472
  %2305 = tail call double @llvm.fma.f64(double %.pn3.i.i1473, double %2304, double %2297)
  %2306 = tail call double @llvm.fma.f64(double %2298, double %2303, double %2305)
  %2307 = fadd double %2295, %2306
  %2308 = tail call double @llvm.fma.f64(double %2293, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2309 = tail call double @llvm.fma.f64(double %2293, double %2308, double 0x3EC71DE3796CDE01)
  %2310 = tail call double @llvm.fma.f64(double %2293, double %2309, double 0xBF2A01A019E83E5C)
  %2311 = tail call double @llvm.fma.f64(double %2293, double %2310, double 0x3F81111111110BB3)
  %2312 = fneg double %2293
  %2313 = fmul double %.pn3.i.i1473, %2312
  %2314 = fmul double %.pn5.i.i1472, 5.000000e-01
  %2315 = tail call double @llvm.fma.f64(double %2313, double %2311, double %2314)
  %2316 = tail call double @llvm.fma.f64(double %2293, double %2315, double %2304)
  %2317 = tail call double @llvm.fma.f64(double %2313, double 0xBFC5555555555555, double %2316)
  %2318 = fsub double %.pn3.i.i1473, %2317
  %2319 = and i32 %.pn1.in.i.i1474, 1
  %2320 = icmp eq i32 %2319, 0
  %2321 = select i1 %2320, double %2318, double %2307
  %2322 = bitcast double %2321 to <2 x i32>
  %.pn1.i.i1475 = shl i32 %.pn1.in.i.i1474, 30
  %2323 = xor i32 %.pn1.i.i1475, %486
  %2324 = and i32 %2323, -2147483648
  %2325 = extractelement <2 x i32> %2322, i64 1
  %2326 = xor i32 %2325, %2324
  %2327 = insertelement <2 x i32> %2322, i32 %2326, i64 1
  %2328 = select i1 %487, <2 x i32> %2327, <2 x i32> <i32 0, i32 2146959360>
  %2329 = bitcast <2 x i32> %2328 to double
  %2330 = fneg double %2329
  %fneg1194 = fmul double %mul1190, %2330
  %.pn5.i.i1478 = select i1 %544, double %641, double %624
  %.pn3.i.i1479 = select i1 %544, double %639, double %622
  %.pn1.in.i.i1480 = select i1 %544, i32 %642, i32 %611
  %2331 = fmul double %.pn3.i.i1479, %.pn3.i.i1479
  %2332 = fmul double %2331, 5.000000e-01
  %2333 = fsub double 1.000000e+00, %2332
  %2334 = fsub double 1.000000e+00, %2333
  %2335 = fsub double %2334, %2332
  %2336 = fmul double %2331, %2331
  %2337 = tail call double @llvm.fma.f64(double %2331, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2338 = tail call double @llvm.fma.f64(double %2331, double %2337, double 0xBE927E4FA17F65F6)
  %2339 = tail call double @llvm.fma.f64(double %2331, double %2338, double 0x3EFA01A019F4EC90)
  %2340 = tail call double @llvm.fma.f64(double %2331, double %2339, double 0xBF56C16C16C16967)
  %2341 = tail call double @llvm.fma.f64(double %2331, double %2340, double 0x3FA5555555555555)
  %2342 = fneg double %.pn5.i.i1478
  %2343 = tail call double @llvm.fma.f64(double %.pn3.i.i1479, double %2342, double %2335)
  %2344 = tail call double @llvm.fma.f64(double %2336, double %2341, double %2343)
  %2345 = fadd double %2333, %2344
  %2346 = tail call double @llvm.fma.f64(double %2331, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2347 = tail call double @llvm.fma.f64(double %2331, double %2346, double 0x3EC71DE3796CDE01)
  %2348 = tail call double @llvm.fma.f64(double %2331, double %2347, double 0xBF2A01A019E83E5C)
  %2349 = tail call double @llvm.fma.f64(double %2331, double %2348, double 0x3F81111111110BB3)
  %2350 = fneg double %2331
  %2351 = fmul double %.pn3.i.i1479, %2350
  %2352 = fmul double %.pn5.i.i1478, 5.000000e-01
  %2353 = tail call double @llvm.fma.f64(double %2351, double %2349, double %2352)
  %2354 = tail call double @llvm.fma.f64(double %2331, double %2353, double %2342)
  %2355 = tail call double @llvm.fma.f64(double %2351, double 0xBFC5555555555555, double %2354)
  %2356 = fsub double %.pn3.i.i1479, %2355
  %2357 = and i32 %.pn1.in.i.i1480, 1
  %2358 = icmp eq i32 %2357, 0
  %2359 = select i1 %2358, double %2356, double %2345
  %2360 = bitcast double %2359 to <2 x i32>
  %.pn1.i.i1481 = shl i32 %.pn1.in.i.i1480, 30
  %2361 = xor i32 %.pn1.i.i1481, %644
  %2362 = and i32 %2361, -2147483648
  %2363 = extractelement <2 x i32> %2360, i64 1
  %2364 = xor i32 %2363, %2362
  %2365 = insertelement <2 x i32> %2360, i32 %2364, i64 1
  %2366 = select i1 %645, <2 x i32> %2365, <2 x i32> <i32 0, i32 2146959360>
  %2367 = bitcast <2 x i32> %2366 to double
  %mul1205 = fmul double %mul1202, %2367
  %.pn5.i.i1485 = select i1 %882, double %979, double %962
  %.pn3.i.i1486 = select i1 %882, double %977, double %960
  %.pn1.in.i.i1487 = select i1 %882, i32 %980, i32 %949
  %2368 = fmul double %.pn3.i.i1486, %.pn3.i.i1486
  %2369 = fmul double %2368, 5.000000e-01
  %2370 = fsub double 1.000000e+00, %2369
  %2371 = fsub double 1.000000e+00, %2370
  %2372 = fsub double %2371, %2369
  %2373 = fmul double %2368, %2368
  %2374 = tail call double @llvm.fma.f64(double %2368, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2375 = tail call double @llvm.fma.f64(double %2368, double %2374, double 0xBE927E4FA17F65F6)
  %2376 = tail call double @llvm.fma.f64(double %2368, double %2375, double 0x3EFA01A019F4EC90)
  %2377 = tail call double @llvm.fma.f64(double %2368, double %2376, double 0xBF56C16C16C16967)
  %2378 = tail call double @llvm.fma.f64(double %2368, double %2377, double 0x3FA5555555555555)
  %2379 = fneg double %.pn5.i.i1485
  %2380 = tail call double @llvm.fma.f64(double %.pn3.i.i1486, double %2379, double %2372)
  %2381 = tail call double @llvm.fma.f64(double %2373, double %2378, double %2380)
  %2382 = fadd double %2370, %2381
  %2383 = tail call double @llvm.fma.f64(double %2368, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2384 = tail call double @llvm.fma.f64(double %2368, double %2383, double 0x3EC71DE3796CDE01)
  %2385 = tail call double @llvm.fma.f64(double %2368, double %2384, double 0xBF2A01A019E83E5C)
  %2386 = tail call double @llvm.fma.f64(double %2368, double %2385, double 0x3F81111111110BB3)
  %2387 = fneg double %2368
  %2388 = fmul double %.pn3.i.i1486, %2387
  %2389 = fmul double %.pn5.i.i1485, 5.000000e-01
  %2390 = tail call double @llvm.fma.f64(double %2388, double %2386, double %2389)
  %2391 = tail call double @llvm.fma.f64(double %2368, double %2390, double %2379)
  %2392 = tail call double @llvm.fma.f64(double %2388, double 0xBFC5555555555555, double %2391)
  %2393 = fsub double %.pn3.i.i1486, %2392
  %2394 = and i32 %.pn1.in.i.i1487, 1
  %2395 = icmp eq i32 %2394, 0
  %2396 = select i1 %2395, double %2393, double %2382
  %2397 = bitcast double %2396 to <2 x i32>
  %.pn1.i.i1488 = shl i32 %.pn1.in.i.i1487, 30
  %2398 = xor i32 %.pn1.i.i1488, %982
  %2399 = and i32 %2398, -2147483648
  %2400 = extractelement <2 x i32> %2397, i64 1
  %2401 = xor i32 %2400, %2399
  %2402 = insertelement <2 x i32> %2397, i32 %2401, i64 1
  %2403 = select i1 %983, <2 x i32> %2402, <2 x i32> <i32 0, i32 2146959360>
  %2404 = bitcast <2 x i32> %2403 to double
  %2405 = fneg double %2404
  %fneg1219 = fmul double %mul1215, %2405
  %.pn5.i.i1492 = select i1 %1094, double %1191, double %1174
  %.pn3.i.i1493 = select i1 %1094, double %1189, double %1172
  %.pn1.in.i.i1494 = select i1 %1094, i32 %1192, i32 %1161
  %2406 = fmul double %.pn3.i.i1493, %.pn3.i.i1493
  %2407 = fmul double %2406, 5.000000e-01
  %2408 = fsub double 1.000000e+00, %2407
  %2409 = fsub double 1.000000e+00, %2408
  %2410 = fsub double %2409, %2407
  %2411 = fmul double %2406, %2406
  %2412 = tail call double @llvm.fma.f64(double %2406, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2413 = tail call double @llvm.fma.f64(double %2406, double %2412, double 0xBE927E4FA17F65F6)
  %2414 = tail call double @llvm.fma.f64(double %2406, double %2413, double 0x3EFA01A019F4EC90)
  %2415 = tail call double @llvm.fma.f64(double %2406, double %2414, double 0xBF56C16C16C16967)
  %2416 = tail call double @llvm.fma.f64(double %2406, double %2415, double 0x3FA5555555555555)
  %2417 = fneg double %.pn5.i.i1492
  %2418 = tail call double @llvm.fma.f64(double %.pn3.i.i1493, double %2417, double %2410)
  %2419 = tail call double @llvm.fma.f64(double %2411, double %2416, double %2418)
  %2420 = fadd double %2408, %2419
  %2421 = tail call double @llvm.fma.f64(double %2406, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2422 = tail call double @llvm.fma.f64(double %2406, double %2421, double 0x3EC71DE3796CDE01)
  %2423 = tail call double @llvm.fma.f64(double %2406, double %2422, double 0xBF2A01A019E83E5C)
  %2424 = tail call double @llvm.fma.f64(double %2406, double %2423, double 0x3F81111111110BB3)
  %2425 = fneg double %2406
  %2426 = fmul double %.pn3.i.i1493, %2425
  %2427 = fmul double %.pn5.i.i1492, 5.000000e-01
  %2428 = tail call double @llvm.fma.f64(double %2426, double %2424, double %2427)
  %2429 = tail call double @llvm.fma.f64(double %2406, double %2428, double %2417)
  %2430 = tail call double @llvm.fma.f64(double %2426, double 0xBFC5555555555555, double %2429)
  %2431 = fsub double %.pn3.i.i1493, %2430
  %2432 = and i32 %.pn1.in.i.i1494, 1
  %2433 = icmp eq i32 %2432, 0
  %2434 = select i1 %2433, double %2431, double %2420
  %2435 = bitcast double %2434 to <2 x i32>
  %.pn1.i.i1495 = shl i32 %.pn1.in.i.i1494, 30
  %2436 = xor i32 %.pn1.i.i1495, %1194
  %2437 = and i32 %2436, -2147483648
  %2438 = extractelement <2 x i32> %2435, i64 1
  %2439 = xor i32 %2438, %2437
  %2440 = insertelement <2 x i32> %2435, i32 %2439, i64 1
  %2441 = select i1 %1195, <2 x i32> %2440, <2 x i32> <i32 0, i32 2146959360>
  %2442 = bitcast <2 x i32> %2441 to double
  %mul1234 = fmul double %mul1231, %2442
  %.pn5.i.i1500 = select i1 %1307, double %1404, double %1387
  %.pn3.i.i1501 = select i1 %1307, double %1402, double %1385
  %.pn1.in.i.i1502 = select i1 %1307, i32 %1405, i32 %1374
  %2443 = fmul double %.pn3.i.i1501, %.pn3.i.i1501
  %2444 = fmul double %2443, 5.000000e-01
  %2445 = fsub double 1.000000e+00, %2444
  %2446 = fsub double 1.000000e+00, %2445
  %2447 = fsub double %2446, %2444
  %2448 = fmul double %2443, %2443
  %2449 = tail call double @llvm.fma.f64(double %2443, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2450 = tail call double @llvm.fma.f64(double %2443, double %2449, double 0xBE927E4FA17F65F6)
  %2451 = tail call double @llvm.fma.f64(double %2443, double %2450, double 0x3EFA01A019F4EC90)
  %2452 = tail call double @llvm.fma.f64(double %2443, double %2451, double 0xBF56C16C16C16967)
  %2453 = tail call double @llvm.fma.f64(double %2443, double %2452, double 0x3FA5555555555555)
  %2454 = fneg double %.pn5.i.i1500
  %2455 = tail call double @llvm.fma.f64(double %.pn3.i.i1501, double %2454, double %2447)
  %2456 = tail call double @llvm.fma.f64(double %2448, double %2453, double %2455)
  %2457 = fadd double %2445, %2456
  %2458 = tail call double @llvm.fma.f64(double %2443, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2459 = tail call double @llvm.fma.f64(double %2443, double %2458, double 0x3EC71DE3796CDE01)
  %2460 = tail call double @llvm.fma.f64(double %2443, double %2459, double 0xBF2A01A019E83E5C)
  %2461 = tail call double @llvm.fma.f64(double %2443, double %2460, double 0x3F81111111110BB3)
  %2462 = fneg double %2443
  %2463 = fmul double %.pn3.i.i1501, %2462
  %2464 = fmul double %.pn5.i.i1500, 5.000000e-01
  %2465 = tail call double @llvm.fma.f64(double %2463, double %2461, double %2464)
  %2466 = tail call double @llvm.fma.f64(double %2443, double %2465, double %2454)
  %2467 = tail call double @llvm.fma.f64(double %2463, double 0xBFC5555555555555, double %2466)
  %2468 = fsub double %.pn3.i.i1501, %2467
  %2469 = and i32 %.pn1.in.i.i1502, 1
  %2470 = icmp eq i32 %2469, 0
  %2471 = select i1 %2470, double %2468, double %2457
  %2472 = bitcast double %2471 to <2 x i32>
  %.pn1.i.i1503 = shl i32 %.pn1.in.i.i1502, 30
  %2473 = xor i32 %.pn1.i.i1503, %1407
  %2474 = and i32 %2473, -2147483648
  %2475 = extractelement <2 x i32> %2472, i64 1
  %2476 = xor i32 %2475, %2474
  %2477 = insertelement <2 x i32> %2472, i32 %2476, i64 1
  %2478 = select i1 %1408, <2 x i32> %2477, <2 x i32> <i32 0, i32 2146959360>
  %2479 = bitcast <2 x i32> %2478 to double
  %2480 = fneg double %2479
  %fneg1250 = fmul double %mul1246, %2480
  %.pn5.i.i1507 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1508 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1509 = select i1 %1466, i32 %1564, i32 %1533
  %2481 = fmul double %.pn3.i.i1508, %.pn3.i.i1508
  %2482 = fmul double %2481, 5.000000e-01
  %2483 = fsub double 1.000000e+00, %2482
  %2484 = fsub double 1.000000e+00, %2483
  %2485 = fsub double %2484, %2482
  %2486 = fmul double %2481, %2481
  %2487 = tail call double @llvm.fma.f64(double %2481, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2488 = tail call double @llvm.fma.f64(double %2481, double %2487, double 0xBE927E4FA17F65F6)
  %2489 = tail call double @llvm.fma.f64(double %2481, double %2488, double 0x3EFA01A019F4EC90)
  %2490 = tail call double @llvm.fma.f64(double %2481, double %2489, double 0xBF56C16C16C16967)
  %2491 = tail call double @llvm.fma.f64(double %2481, double %2490, double 0x3FA5555555555555)
  %2492 = fneg double %.pn5.i.i1507
  %2493 = tail call double @llvm.fma.f64(double %.pn3.i.i1508, double %2492, double %2485)
  %2494 = tail call double @llvm.fma.f64(double %2486, double %2491, double %2493)
  %2495 = fadd double %2483, %2494
  %2496 = tail call double @llvm.fma.f64(double %2481, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2497 = tail call double @llvm.fma.f64(double %2481, double %2496, double 0x3EC71DE3796CDE01)
  %2498 = tail call double @llvm.fma.f64(double %2481, double %2497, double 0xBF2A01A019E83E5C)
  %2499 = tail call double @llvm.fma.f64(double %2481, double %2498, double 0x3F81111111110BB3)
  %2500 = fneg double %2481
  %2501 = fmul double %.pn3.i.i1508, %2500
  %2502 = fmul double %.pn5.i.i1507, 5.000000e-01
  %2503 = tail call double @llvm.fma.f64(double %2501, double %2499, double %2502)
  %2504 = tail call double @llvm.fma.f64(double %2481, double %2503, double %2492)
  %2505 = tail call double @llvm.fma.f64(double %2501, double 0xBFC5555555555555, double %2504)
  %2506 = fsub double %.pn3.i.i1508, %2505
  %2507 = and i32 %.pn1.in.i.i1509, 1
  %2508 = icmp eq i32 %2507, 0
  %2509 = select i1 %2508, double %2506, double %2495
  %2510 = bitcast double %2509 to <2 x i32>
  %.pn1.i.i1510 = shl i32 %.pn1.in.i.i1509, 30
  %2511 = xor i32 %.pn1.i.i1510, %1566
  %2512 = and i32 %2511, -2147483648
  %2513 = extractelement <2 x i32> %2510, i64 1
  %2514 = xor i32 %2513, %2512
  %2515 = insertelement <2 x i32> %2510, i32 %2514, i64 1
  %2516 = select i1 %1567, <2 x i32> %2515, <2 x i32> <i32 0, i32 2146959360>
  %2517 = bitcast <2 x i32> %2516 to double
  %mul1267 = fmul double %mul1264, %2517
  %.pn5.i.i1516 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1517 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1518 = select i1 %1680, i32 %1778, i32 %1747
  %2518 = fmul double %.pn3.i.i1517, %.pn3.i.i1517
  %2519 = fmul double %2518, 5.000000e-01
  %2520 = fsub double 1.000000e+00, %2519
  %2521 = fsub double 1.000000e+00, %2520
  %2522 = fsub double %2521, %2519
  %2523 = fmul double %2518, %2518
  %2524 = tail call double @llvm.fma.f64(double %2518, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2525 = tail call double @llvm.fma.f64(double %2518, double %2524, double 0xBE927E4FA17F65F6)
  %2526 = tail call double @llvm.fma.f64(double %2518, double %2525, double 0x3EFA01A019F4EC90)
  %2527 = tail call double @llvm.fma.f64(double %2518, double %2526, double 0xBF56C16C16C16967)
  %2528 = tail call double @llvm.fma.f64(double %2518, double %2527, double 0x3FA5555555555555)
  %2529 = fneg double %.pn5.i.i1516
  %2530 = tail call double @llvm.fma.f64(double %.pn3.i.i1517, double %2529, double %2522)
  %2531 = tail call double @llvm.fma.f64(double %2523, double %2528, double %2530)
  %2532 = fadd double %2520, %2531
  %2533 = tail call double @llvm.fma.f64(double %2518, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2534 = tail call double @llvm.fma.f64(double %2518, double %2533, double 0x3EC71DE3796CDE01)
  %2535 = tail call double @llvm.fma.f64(double %2518, double %2534, double 0xBF2A01A019E83E5C)
  %2536 = tail call double @llvm.fma.f64(double %2518, double %2535, double 0x3F81111111110BB3)
  %2537 = fneg double %2518
  %2538 = fmul double %.pn3.i.i1517, %2537
  %2539 = fmul double %.pn5.i.i1516, 5.000000e-01
  %2540 = tail call double @llvm.fma.f64(double %2538, double %2536, double %2539)
  %2541 = tail call double @llvm.fma.f64(double %2518, double %2540, double %2529)
  %2542 = tail call double @llvm.fma.f64(double %2538, double 0xBFC5555555555555, double %2541)
  %2543 = fsub double %.pn3.i.i1517, %2542
  %2544 = and i32 %.pn1.in.i.i1518, 1
  %2545 = icmp eq i32 %2544, 0
  %2546 = select i1 %2545, double %2543, double %2532
  %2547 = bitcast double %2546 to <2 x i32>
  %.pn1.i.i1519 = shl i32 %.pn1.in.i.i1518, 30
  %2548 = xor i32 %.pn1.i.i1519, %1780
  %2549 = and i32 %2548, -2147483648
  %2550 = extractelement <2 x i32> %2547, i64 1
  %2551 = xor i32 %2550, %2549
  %2552 = insertelement <2 x i32> %2547, i32 %2551, i64 1
  %2553 = select i1 %1781, <2 x i32> %2552, <2 x i32> <i32 0, i32 2146959360>
  %2554 = bitcast <2 x i32> %2553 to double
  %2555 = fneg double %2554
  %fneg1285 = fmul double %mul1281, %2555
  %.pn5.i.i1524 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1525 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1526 = select i1 %1840, i32 %1938, i32 %1907
  %2556 = fmul double %.pn3.i.i1525, %.pn3.i.i1525
  %2557 = fmul double %2556, 5.000000e-01
  %2558 = fsub double 1.000000e+00, %2557
  %2559 = fsub double 1.000000e+00, %2558
  %2560 = fsub double %2559, %2557
  %2561 = fmul double %2556, %2556
  %2562 = tail call double @llvm.fma.f64(double %2556, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2563 = tail call double @llvm.fma.f64(double %2556, double %2562, double 0xBE927E4FA17F65F6)
  %2564 = tail call double @llvm.fma.f64(double %2556, double %2563, double 0x3EFA01A019F4EC90)
  %2565 = tail call double @llvm.fma.f64(double %2556, double %2564, double 0xBF56C16C16C16967)
  %2566 = tail call double @llvm.fma.f64(double %2556, double %2565, double 0x3FA5555555555555)
  %2567 = fneg double %.pn5.i.i1524
  %2568 = tail call double @llvm.fma.f64(double %.pn3.i.i1525, double %2567, double %2560)
  %2569 = tail call double @llvm.fma.f64(double %2561, double %2566, double %2568)
  %2570 = fadd double %2558, %2569
  %2571 = tail call double @llvm.fma.f64(double %2556, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2572 = tail call double @llvm.fma.f64(double %2556, double %2571, double 0x3EC71DE3796CDE01)
  %2573 = tail call double @llvm.fma.f64(double %2556, double %2572, double 0xBF2A01A019E83E5C)
  %2574 = tail call double @llvm.fma.f64(double %2556, double %2573, double 0x3F81111111110BB3)
  %2575 = fneg double %2556
  %2576 = fmul double %.pn3.i.i1525, %2575
  %2577 = fmul double %.pn5.i.i1524, 5.000000e-01
  %2578 = tail call double @llvm.fma.f64(double %2576, double %2574, double %2577)
  %2579 = tail call double @llvm.fma.f64(double %2556, double %2578, double %2567)
  %2580 = tail call double @llvm.fma.f64(double %2576, double 0xBFC5555555555555, double %2579)
  %2581 = fsub double %.pn3.i.i1525, %2580
  %2582 = and i32 %.pn1.in.i.i1526, 1
  %2583 = icmp eq i32 %2582, 0
  %2584 = select i1 %2583, double %2581, double %2570
  %2585 = bitcast double %2584 to <2 x i32>
  %.pn1.i.i1527 = shl i32 %.pn1.in.i.i1526, 30
  %2586 = xor i32 %.pn1.i.i1527, %1940
  %2587 = and i32 %2586, -2147483648
  %2588 = extractelement <2 x i32> %2585, i64 1
  %2589 = xor i32 %2588, %2587
  %2590 = insertelement <2 x i32> %2585, i32 %2589, i64 1
  %2591 = select i1 %1941, <2 x i32> %2590, <2 x i32> <i32 0, i32 2146959360>
  %2592 = bitcast <2 x i32> %2591 to double
  %mul1304 = fmul double %mul1301, %2592
  %.pn5.i.i1533 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1534 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1535 = select i1 %2002, i32 %2100, i32 %2069
  %2593 = fmul double %.pn3.i.i1534, %.pn3.i.i1534
  %2594 = fmul double %2593, 5.000000e-01
  %2595 = fsub double 1.000000e+00, %2594
  %2596 = fsub double 1.000000e+00, %2595
  %2597 = fsub double %2596, %2594
  %2598 = fmul double %2593, %2593
  %2599 = tail call double @llvm.fma.f64(double %2593, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2600 = tail call double @llvm.fma.f64(double %2593, double %2599, double 0xBE927E4FA17F65F6)
  %2601 = tail call double @llvm.fma.f64(double %2593, double %2600, double 0x3EFA01A019F4EC90)
  %2602 = tail call double @llvm.fma.f64(double %2593, double %2601, double 0xBF56C16C16C16967)
  %2603 = tail call double @llvm.fma.f64(double %2593, double %2602, double 0x3FA5555555555555)
  %2604 = fneg double %.pn5.i.i1533
  %2605 = tail call double @llvm.fma.f64(double %.pn3.i.i1534, double %2604, double %2597)
  %2606 = tail call double @llvm.fma.f64(double %2598, double %2603, double %2605)
  %2607 = fadd double %2595, %2606
  %2608 = tail call double @llvm.fma.f64(double %2593, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2609 = tail call double @llvm.fma.f64(double %2593, double %2608, double 0x3EC71DE3796CDE01)
  %2610 = tail call double @llvm.fma.f64(double %2593, double %2609, double 0xBF2A01A019E83E5C)
  %2611 = tail call double @llvm.fma.f64(double %2593, double %2610, double 0x3F81111111110BB3)
  %2612 = fneg double %2593
  %2613 = fmul double %.pn3.i.i1534, %2612
  %2614 = fmul double %.pn5.i.i1533, 5.000000e-01
  %2615 = tail call double @llvm.fma.f64(double %2613, double %2611, double %2614)
  %2616 = tail call double @llvm.fma.f64(double %2593, double %2615, double %2604)
  %2617 = tail call double @llvm.fma.f64(double %2613, double 0xBFC5555555555555, double %2616)
  %2618 = fsub double %.pn3.i.i1534, %2617
  %2619 = and i32 %.pn1.in.i.i1535, 1
  %2620 = icmp eq i32 %2619, 0
  %2621 = select i1 %2620, double %2618, double %2607
  %2622 = bitcast double %2621 to <2 x i32>
  %.pn1.i.i1536 = shl i32 %.pn1.in.i.i1535, 30
  %2623 = xor i32 %.pn1.i.i1536, %2102
  %2624 = and i32 %2623, -2147483648
  %2625 = extractelement <2 x i32> %2622, i64 1
  %2626 = xor i32 %2625, %2624
  %2627 = insertelement <2 x i32> %2622, i32 %2626, i64 1
  %2628 = select i1 %2103, <2 x i32> %2627, <2 x i32> <i32 0, i32 2146959360>
  %2629 = bitcast <2 x i32> %2628 to double
  %2630 = fneg double %2629
  %fneg1323 = fmul double %mul1320, %2630
  %2631 = fneg double %2618
  %2632 = select i1 %2620, double %2607, double %2631
  %2633 = bitcast double %2632 to <2 x i32>
  %2634 = and i32 %.pn1.i.i1536, -2147483648
  %2635 = extractelement <2 x i32> %2633, i64 1
  %2636 = xor i32 %2635, %2634
  %2637 = insertelement <2 x i32> %2633, i32 %2636, i64 1
  %2638 = select i1 %2103, <2 x i32> %2637, <2 x i32> <i32 0, i32 2146959360>
  %2639 = bitcast <2 x i32> %2638 to double
  %2640 = fneg double %2639
  %fneg1357 = fmul double %mul1320, %2640
  %2641 = fneg double %2581
  %2642 = select i1 %2583, double %2570, double %2641
  %2643 = bitcast double %2642 to <2 x i32>
  %2644 = and i32 %.pn1.i.i1527, -2147483648
  %2645 = extractelement <2 x i32> %2643, i64 1
  %2646 = xor i32 %2645, %2644
  %2647 = insertelement <2 x i32> %2643, i32 %2646, i64 1
  %2648 = select i1 %1941, <2 x i32> %2647, <2 x i32> <i32 0, i32 2146959360>
  %2649 = bitcast <2 x i32> %2648 to double
  %mul1376 = fmul double %mul1301, %2649
  %2650 = fneg double %2543
  %2651 = select i1 %2545, double %2532, double %2650
  %2652 = bitcast double %2651 to <2 x i32>
  %2653 = and i32 %.pn1.i.i1519, -2147483648
  %2654 = extractelement <2 x i32> %2652, i64 1
  %2655 = xor i32 %2654, %2653
  %2656 = insertelement <2 x i32> %2652, i32 %2655, i64 1
  %2657 = select i1 %1781, <2 x i32> %2656, <2 x i32> <i32 0, i32 2146959360>
  %2658 = bitcast <2 x i32> %2657 to double
  %2659 = fneg double %2658
  %fneg1394 = fmul double %mul1281, %2659
  %2660 = fneg double %2506
  %2661 = select i1 %2508, double %2495, double %2660
  %2662 = bitcast double %2661 to <2 x i32>
  %2663 = and i32 %.pn1.i.i1510, -2147483648
  %2664 = extractelement <2 x i32> %2662, i64 1
  %2665 = xor i32 %2664, %2663
  %2666 = insertelement <2 x i32> %2662, i32 %2665, i64 1
  %2667 = select i1 %1567, <2 x i32> %2666, <2 x i32> <i32 0, i32 2146959360>
  %2668 = bitcast <2 x i32> %2667 to double
  %mul1411 = fmul double %mul1264, %2668
  %2669 = fneg double %2468
  %2670 = select i1 %2470, double %2457, double %2669
  %2671 = bitcast double %2670 to <2 x i32>
  %2672 = and i32 %.pn1.i.i1503, -2147483648
  %2673 = extractelement <2 x i32> %2671, i64 1
  %2674 = xor i32 %2673, %2672
  %2675 = insertelement <2 x i32> %2671, i32 %2674, i64 1
  %2676 = select i1 %1408, <2 x i32> %2675, <2 x i32> <i32 0, i32 2146959360>
  %2677 = bitcast <2 x i32> %2676 to double
  %2678 = fneg double %2677
  %fneg1427 = fmul double %mul1246, %2678
  %2679 = fneg double %2431
  %2680 = select i1 %2433, double %2420, double %2679
  %2681 = bitcast double %2680 to <2 x i32>
  %2682 = and i32 %.pn1.i.i1495, -2147483648
  %2683 = extractelement <2 x i32> %2681, i64 1
  %2684 = xor i32 %2683, %2682
  %2685 = insertelement <2 x i32> %2681, i32 %2684, i64 1
  %2686 = select i1 %1195, <2 x i32> %2685, <2 x i32> <i32 0, i32 2146959360>
  %2687 = bitcast <2 x i32> %2686 to double
  %mul1442 = fmul double %mul1231, %2687
  %2688 = fneg double %2393
  %2689 = select i1 %2395, double %2382, double %2688
  %2690 = bitcast double %2689 to <2 x i32>
  %2691 = and i32 %.pn1.i.i1488, -2147483648
  %2692 = extractelement <2 x i32> %2690, i64 1
  %2693 = xor i32 %2692, %2691
  %2694 = insertelement <2 x i32> %2690, i32 %2693, i64 1
  %2695 = select i1 %983, <2 x i32> %2694, <2 x i32> <i32 0, i32 2146959360>
  %2696 = bitcast <2 x i32> %2695 to double
  %2697 = fneg double %2696
  %fneg1456 = fmul double %mul1215, %2697
  %2698 = fneg double %2356
  %2699 = select i1 %2358, double %2345, double %2698
  %2700 = bitcast double %2699 to <2 x i32>
  %2701 = and i32 %.pn1.i.i1481, -2147483648
  %2702 = extractelement <2 x i32> %2700, i64 1
  %2703 = xor i32 %2702, %2701
  %2704 = insertelement <2 x i32> %2700, i32 %2703, i64 1
  %2705 = select i1 %645, <2 x i32> %2704, <2 x i32> <i32 0, i32 2146959360>
  %2706 = bitcast <2 x i32> %2705 to double
  %mul1467 = fmul double %mul1202, %2706
  %2707 = fneg double %2318
  %2708 = select i1 %2320, double %2307, double %2707
  %2709 = bitcast double %2708 to <2 x i32>
  %2710 = and i32 %.pn1.i.i1475, -2147483648
  %2711 = extractelement <2 x i32> %2709, i64 1
  %2712 = xor i32 %2711, %2710
  %2713 = insertelement <2 x i32> %2709, i32 %2712, i64 1
  %2714 = select i1 %487, <2 x i32> %2713, <2 x i32> <i32 0, i32 2146959360>
  %2715 = bitcast <2 x i32> %2714 to double
  %2716 = fneg double %2715
  %fneg1477 = fmul double %mul1190, %2716
  %2717 = fneg double %2281
  %2718 = select i1 %2283, double %2270, double %2717
  %2719 = bitcast double %2718 to <2 x i32>
  %2720 = and i32 %.pn1.i.i1469, -2147483648
  %2721 = extractelement <2 x i32> %2719, i64 1
  %2722 = xor i32 %2721, %2720
  %2723 = insertelement <2 x i32> %2719, i32 %2722, i64 1
  %2724 = select i1 %330, <2 x i32> %2723, <2 x i32> <i32 0, i32 2146959360>
  %2725 = bitcast <2 x i32> %2724 to double
  %mul1485 = fmul double %mul1182, %2725
  %.1641 = select i1 %386, double %483, double %466
  %.1642 = select i1 %386, double %481, double %464
  %.1643 = select i1 %386, i32 %484, i32 %453
  %2726 = fmul double %.1642, %.1642
  %2727 = fmul double %2726, 5.000000e-01
  %2728 = fsub double 1.000000e+00, %2727
  %2729 = fsub double 1.000000e+00, %2728
  %2730 = fsub double %2729, %2727
  %2731 = fmul double %2726, %2726
  %2732 = tail call double @llvm.fma.f64(double %2726, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2733 = tail call double @llvm.fma.f64(double %2726, double %2732, double 0xBE927E4FA17F65F6)
  %2734 = tail call double @llvm.fma.f64(double %2726, double %2733, double 0x3EFA01A019F4EC90)
  %2735 = tail call double @llvm.fma.f64(double %2726, double %2734, double 0xBF56C16C16C16967)
  %2736 = tail call double @llvm.fma.f64(double %2726, double %2735, double 0x3FA5555555555555)
  %2737 = fneg double %.1641
  %2738 = tail call double @llvm.fma.f64(double %.1642, double %2737, double %2730)
  %2739 = tail call double @llvm.fma.f64(double %2731, double %2736, double %2738)
  %2740 = fadd double %2728, %2739
  %2741 = tail call double @llvm.fma.f64(double %2726, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2742 = tail call double @llvm.fma.f64(double %2726, double %2741, double 0x3EC71DE3796CDE01)
  %2743 = tail call double @llvm.fma.f64(double %2726, double %2742, double 0xBF2A01A019E83E5C)
  %2744 = tail call double @llvm.fma.f64(double %2726, double %2743, double 0x3F81111111110BB3)
  %2745 = fneg double %2726
  %2746 = fmul double %.1642, %2745
  %2747 = fmul double %.1641, 5.000000e-01
  %2748 = tail call double @llvm.fma.f64(double %2746, double %2744, double %2747)
  %2749 = tail call double @llvm.fma.f64(double %2726, double %2748, double %2737)
  %2750 = tail call double @llvm.fma.f64(double %2746, double 0xBFC5555555555555, double %2749)
  %2751 = fsub double %.1642, %2750
  %2752 = and i32 %.1643, 1
  %2753 = icmp eq i32 %2752, 0
  %2754 = select i1 %2753, double %2751, double %2740
  %2755 = bitcast double %2754 to <2 x i32>
  %.pn1.i.i1339 = shl i32 %.1643, 30
  %2756 = xor i32 %.pn1.i.i1339, %486
  %2757 = and i32 %2756, -2147483648
  %2758 = extractelement <2 x i32> %2755, i64 1
  %2759 = xor i32 %2758, %2757
  %2760 = insertelement <2 x i32> %2755, i32 %2759, i64 1
  %2761 = select i1 %487, <2 x i32> %2760, <2 x i32> <i32 0, i32 2146959360>
  %2762 = bitcast <2 x i32> %2761 to double
  %2763 = fneg double %2762
  %fneg917 = fmul double %mul913, %2763
  %.pn5.i.i1342 = select i1 %544, double %641, double %624
  %.pn3.i.i1343 = select i1 %544, double %639, double %622
  %.pn1.in.i.i1344 = select i1 %544, i32 %642, i32 %611
  %2764 = fmul double %.pn3.i.i1343, %.pn3.i.i1343
  %2765 = fmul double %2764, 5.000000e-01
  %2766 = fsub double 1.000000e+00, %2765
  %2767 = fsub double 1.000000e+00, %2766
  %2768 = fsub double %2767, %2765
  %2769 = fmul double %2764, %2764
  %2770 = tail call double @llvm.fma.f64(double %2764, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2771 = tail call double @llvm.fma.f64(double %2764, double %2770, double 0xBE927E4FA17F65F6)
  %2772 = tail call double @llvm.fma.f64(double %2764, double %2771, double 0x3EFA01A019F4EC90)
  %2773 = tail call double @llvm.fma.f64(double %2764, double %2772, double 0xBF56C16C16C16967)
  %2774 = tail call double @llvm.fma.f64(double %2764, double %2773, double 0x3FA5555555555555)
  %2775 = fneg double %.pn5.i.i1342
  %2776 = tail call double @llvm.fma.f64(double %.pn3.i.i1343, double %2775, double %2768)
  %2777 = tail call double @llvm.fma.f64(double %2769, double %2774, double %2776)
  %2778 = fadd double %2766, %2777
  %2779 = tail call double @llvm.fma.f64(double %2764, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2780 = tail call double @llvm.fma.f64(double %2764, double %2779, double 0x3EC71DE3796CDE01)
  %2781 = tail call double @llvm.fma.f64(double %2764, double %2780, double 0xBF2A01A019E83E5C)
  %2782 = tail call double @llvm.fma.f64(double %2764, double %2781, double 0x3F81111111110BB3)
  %2783 = fneg double %2764
  %2784 = fmul double %.pn3.i.i1343, %2783
  %2785 = fmul double %.pn5.i.i1342, 5.000000e-01
  %2786 = tail call double @llvm.fma.f64(double %2784, double %2782, double %2785)
  %2787 = tail call double @llvm.fma.f64(double %2764, double %2786, double %2775)
  %2788 = tail call double @llvm.fma.f64(double %2784, double 0xBFC5555555555555, double %2787)
  %2789 = fsub double %.pn3.i.i1343, %2788
  %2790 = and i32 %.pn1.in.i.i1344, 1
  %2791 = icmp eq i32 %2790, 0
  %2792 = select i1 %2791, double %2789, double %2778
  %2793 = bitcast double %2792 to <2 x i32>
  %.pn1.i.i1345 = shl i32 %.pn1.in.i.i1344, 30
  %2794 = xor i32 %.pn1.i.i1345, %644
  %2795 = and i32 %2794, -2147483648
  %2796 = extractelement <2 x i32> %2793, i64 1
  %2797 = xor i32 %2796, %2795
  %2798 = insertelement <2 x i32> %2793, i32 %2797, i64 1
  %2799 = select i1 %645, <2 x i32> %2798, <2 x i32> <i32 0, i32 2146959360>
  %2800 = bitcast <2 x i32> %2799 to double
  %mul925 = fmul double %mul922, %2800
  %.pn5.i.i1348 = select i1 %882, double %979, double %962
  %.pn3.i.i1349 = select i1 %882, double %977, double %960
  %.pn1.in.i.i1350 = select i1 %882, i32 %980, i32 %949
  %2801 = fmul double %.pn3.i.i1349, %.pn3.i.i1349
  %2802 = fmul double %2801, 5.000000e-01
  %2803 = fsub double 1.000000e+00, %2802
  %2804 = fsub double 1.000000e+00, %2803
  %2805 = fsub double %2804, %2802
  %2806 = fmul double %2801, %2801
  %2807 = tail call double @llvm.fma.f64(double %2801, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2808 = tail call double @llvm.fma.f64(double %2801, double %2807, double 0xBE927E4FA17F65F6)
  %2809 = tail call double @llvm.fma.f64(double %2801, double %2808, double 0x3EFA01A019F4EC90)
  %2810 = tail call double @llvm.fma.f64(double %2801, double %2809, double 0xBF56C16C16C16967)
  %2811 = tail call double @llvm.fma.f64(double %2801, double %2810, double 0x3FA5555555555555)
  %2812 = fneg double %.pn5.i.i1348
  %2813 = tail call double @llvm.fma.f64(double %.pn3.i.i1349, double %2812, double %2805)
  %2814 = tail call double @llvm.fma.f64(double %2806, double %2811, double %2813)
  %2815 = fadd double %2803, %2814
  %2816 = tail call double @llvm.fma.f64(double %2801, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2817 = tail call double @llvm.fma.f64(double %2801, double %2816, double 0x3EC71DE3796CDE01)
  %2818 = tail call double @llvm.fma.f64(double %2801, double %2817, double 0xBF2A01A019E83E5C)
  %2819 = tail call double @llvm.fma.f64(double %2801, double %2818, double 0x3F81111111110BB3)
  %2820 = fneg double %2801
  %2821 = fmul double %.pn3.i.i1349, %2820
  %2822 = fmul double %.pn5.i.i1348, 5.000000e-01
  %2823 = tail call double @llvm.fma.f64(double %2821, double %2819, double %2822)
  %2824 = tail call double @llvm.fma.f64(double %2801, double %2823, double %2812)
  %2825 = tail call double @llvm.fma.f64(double %2821, double 0xBFC5555555555555, double %2824)
  %2826 = fsub double %.pn3.i.i1349, %2825
  %2827 = and i32 %.pn1.in.i.i1350, 1
  %2828 = icmp eq i32 %2827, 0
  %2829 = select i1 %2828, double %2826, double %2815
  %2830 = bitcast double %2829 to <2 x i32>
  %.pn1.i.i1351 = shl i32 %.pn1.in.i.i1350, 30
  %2831 = xor i32 %.pn1.i.i1351, %982
  %2832 = and i32 %2831, -2147483648
  %2833 = extractelement <2 x i32> %2830, i64 1
  %2834 = xor i32 %2833, %2832
  %2835 = insertelement <2 x i32> %2830, i32 %2834, i64 1
  %2836 = select i1 %983, <2 x i32> %2835, <2 x i32> <i32 0, i32 2146959360>
  %2837 = bitcast <2 x i32> %2836 to double
  %2838 = fneg double %2837
  %fneg937 = fmul double %mul933, %2838
  %.pn5.i.i1355 = select i1 %1094, double %1191, double %1174
  %.pn3.i.i1356 = select i1 %1094, double %1189, double %1172
  %.pn1.in.i.i1357 = select i1 %1094, i32 %1192, i32 %1161
  %2839 = fmul double %.pn3.i.i1356, %.pn3.i.i1356
  %2840 = fmul double %2839, 5.000000e-01
  %2841 = fsub double 1.000000e+00, %2840
  %2842 = fsub double 1.000000e+00, %2841
  %2843 = fsub double %2842, %2840
  %2844 = fmul double %2839, %2839
  %2845 = tail call double @llvm.fma.f64(double %2839, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2846 = tail call double @llvm.fma.f64(double %2839, double %2845, double 0xBE927E4FA17F65F6)
  %2847 = tail call double @llvm.fma.f64(double %2839, double %2846, double 0x3EFA01A019F4EC90)
  %2848 = tail call double @llvm.fma.f64(double %2839, double %2847, double 0xBF56C16C16C16967)
  %2849 = tail call double @llvm.fma.f64(double %2839, double %2848, double 0x3FA5555555555555)
  %2850 = fneg double %.pn5.i.i1355
  %2851 = tail call double @llvm.fma.f64(double %.pn3.i.i1356, double %2850, double %2843)
  %2852 = tail call double @llvm.fma.f64(double %2844, double %2849, double %2851)
  %2853 = fadd double %2841, %2852
  %2854 = tail call double @llvm.fma.f64(double %2839, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2855 = tail call double @llvm.fma.f64(double %2839, double %2854, double 0x3EC71DE3796CDE01)
  %2856 = tail call double @llvm.fma.f64(double %2839, double %2855, double 0xBF2A01A019E83E5C)
  %2857 = tail call double @llvm.fma.f64(double %2839, double %2856, double 0x3F81111111110BB3)
  %2858 = fneg double %2839
  %2859 = fmul double %.pn3.i.i1356, %2858
  %2860 = fmul double %.pn5.i.i1355, 5.000000e-01
  %2861 = tail call double @llvm.fma.f64(double %2859, double %2857, double %2860)
  %2862 = tail call double @llvm.fma.f64(double %2839, double %2861, double %2850)
  %2863 = tail call double @llvm.fma.f64(double %2859, double 0xBFC5555555555555, double %2862)
  %2864 = fsub double %.pn3.i.i1356, %2863
  %2865 = and i32 %.pn1.in.i.i1357, 1
  %2866 = icmp eq i32 %2865, 0
  %2867 = select i1 %2866, double %2864, double %2853
  %2868 = bitcast double %2867 to <2 x i32>
  %.pn1.i.i1358 = shl i32 %.pn1.in.i.i1357, 30
  %2869 = xor i32 %.pn1.i.i1358, %1194
  %2870 = and i32 %2869, -2147483648
  %2871 = extractelement <2 x i32> %2868, i64 1
  %2872 = xor i32 %2871, %2870
  %2873 = insertelement <2 x i32> %2868, i32 %2872, i64 1
  %2874 = select i1 %1195, <2 x i32> %2873, <2 x i32> <i32 0, i32 2146959360>
  %2875 = bitcast <2 x i32> %2874 to double
  %mul950 = fmul double %mul947, %2875
  %.pn5.i.i1362 = select i1 %1307, double %1404, double %1387
  %.pn3.i.i1363 = select i1 %1307, double %1402, double %1385
  %.pn1.in.i.i1364 = select i1 %1307, i32 %1405, i32 %1374
  %2876 = fmul double %.pn3.i.i1363, %.pn3.i.i1363
  %2877 = fmul double %2876, 5.000000e-01
  %2878 = fsub double 1.000000e+00, %2877
  %2879 = fsub double 1.000000e+00, %2878
  %2880 = fsub double %2879, %2877
  %2881 = fmul double %2876, %2876
  %2882 = tail call double @llvm.fma.f64(double %2876, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2883 = tail call double @llvm.fma.f64(double %2876, double %2882, double 0xBE927E4FA17F65F6)
  %2884 = tail call double @llvm.fma.f64(double %2876, double %2883, double 0x3EFA01A019F4EC90)
  %2885 = tail call double @llvm.fma.f64(double %2876, double %2884, double 0xBF56C16C16C16967)
  %2886 = tail call double @llvm.fma.f64(double %2876, double %2885, double 0x3FA5555555555555)
  %2887 = fneg double %.pn5.i.i1362
  %2888 = tail call double @llvm.fma.f64(double %.pn3.i.i1363, double %2887, double %2880)
  %2889 = tail call double @llvm.fma.f64(double %2881, double %2886, double %2888)
  %2890 = fadd double %2878, %2889
  %2891 = tail call double @llvm.fma.f64(double %2876, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2892 = tail call double @llvm.fma.f64(double %2876, double %2891, double 0x3EC71DE3796CDE01)
  %2893 = tail call double @llvm.fma.f64(double %2876, double %2892, double 0xBF2A01A019E83E5C)
  %2894 = tail call double @llvm.fma.f64(double %2876, double %2893, double 0x3F81111111110BB3)
  %2895 = fneg double %2876
  %2896 = fmul double %.pn3.i.i1363, %2895
  %2897 = fmul double %.pn5.i.i1362, 5.000000e-01
  %2898 = tail call double @llvm.fma.f64(double %2896, double %2894, double %2897)
  %2899 = tail call double @llvm.fma.f64(double %2876, double %2898, double %2887)
  %2900 = tail call double @llvm.fma.f64(double %2896, double 0xBFC5555555555555, double %2899)
  %2901 = fsub double %.pn3.i.i1363, %2900
  %2902 = and i32 %.pn1.in.i.i1364, 1
  %2903 = icmp eq i32 %2902, 0
  %2904 = select i1 %2903, double %2901, double %2890
  %2905 = bitcast double %2904 to <2 x i32>
  %.pn1.i.i1365 = shl i32 %.pn1.in.i.i1364, 30
  %2906 = xor i32 %.pn1.i.i1365, %1407
  %2907 = and i32 %2906, -2147483648
  %2908 = extractelement <2 x i32> %2905, i64 1
  %2909 = xor i32 %2908, %2907
  %2910 = insertelement <2 x i32> %2905, i32 %2909, i64 1
  %2911 = select i1 %1408, <2 x i32> %2910, <2 x i32> <i32 0, i32 2146959360>
  %2912 = bitcast <2 x i32> %2911 to double
  %2913 = fneg double %2912
  %fneg966 = fmul double %mul962, %2913
  %.pn5.i.i1369 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1370 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1371 = select i1 %1466, i32 %1564, i32 %1533
  %2914 = fmul double %.pn3.i.i1370, %.pn3.i.i1370
  %2915 = fmul double %2914, 5.000000e-01
  %2916 = fsub double 1.000000e+00, %2915
  %2917 = fsub double 1.000000e+00, %2916
  %2918 = fsub double %2917, %2915
  %2919 = fmul double %2914, %2914
  %2920 = tail call double @llvm.fma.f64(double %2914, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2921 = tail call double @llvm.fma.f64(double %2914, double %2920, double 0xBE927E4FA17F65F6)
  %2922 = tail call double @llvm.fma.f64(double %2914, double %2921, double 0x3EFA01A019F4EC90)
  %2923 = tail call double @llvm.fma.f64(double %2914, double %2922, double 0xBF56C16C16C16967)
  %2924 = tail call double @llvm.fma.f64(double %2914, double %2923, double 0x3FA5555555555555)
  %2925 = fneg double %.pn5.i.i1369
  %2926 = tail call double @llvm.fma.f64(double %.pn3.i.i1370, double %2925, double %2918)
  %2927 = tail call double @llvm.fma.f64(double %2919, double %2924, double %2926)
  %2928 = fadd double %2916, %2927
  %2929 = tail call double @llvm.fma.f64(double %2914, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2930 = tail call double @llvm.fma.f64(double %2914, double %2929, double 0x3EC71DE3796CDE01)
  %2931 = tail call double @llvm.fma.f64(double %2914, double %2930, double 0xBF2A01A019E83E5C)
  %2932 = tail call double @llvm.fma.f64(double %2914, double %2931, double 0x3F81111111110BB3)
  %2933 = fneg double %2914
  %2934 = fmul double %.pn3.i.i1370, %2933
  %2935 = fmul double %.pn5.i.i1369, 5.000000e-01
  %2936 = tail call double @llvm.fma.f64(double %2934, double %2932, double %2935)
  %2937 = tail call double @llvm.fma.f64(double %2914, double %2936, double %2925)
  %2938 = tail call double @llvm.fma.f64(double %2934, double 0xBFC5555555555555, double %2937)
  %2939 = fsub double %.pn3.i.i1370, %2938
  %2940 = and i32 %.pn1.in.i.i1371, 1
  %2941 = icmp eq i32 %2940, 0
  %2942 = select i1 %2941, double %2939, double %2928
  %2943 = bitcast double %2942 to <2 x i32>
  %.pn1.i.i1372 = shl i32 %.pn1.in.i.i1371, 30
  %2944 = xor i32 %.pn1.i.i1372, %1566
  %2945 = and i32 %2944, -2147483648
  %2946 = extractelement <2 x i32> %2943, i64 1
  %2947 = xor i32 %2946, %2945
  %2948 = insertelement <2 x i32> %2943, i32 %2947, i64 1
  %2949 = select i1 %1567, <2 x i32> %2948, <2 x i32> <i32 0, i32 2146959360>
  %2950 = bitcast <2 x i32> %2949 to double
  %mul981 = fmul double %mul978, %2950
  %.pn5.i.i1377 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1378 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1379 = select i1 %1680, i32 %1778, i32 %1747
  %2951 = fmul double %.pn3.i.i1378, %.pn3.i.i1378
  %2952 = fmul double %2951, 5.000000e-01
  %2953 = fsub double 1.000000e+00, %2952
  %2954 = fsub double 1.000000e+00, %2953
  %2955 = fsub double %2954, %2952
  %2956 = fmul double %2951, %2951
  %2957 = tail call double @llvm.fma.f64(double %2951, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2958 = tail call double @llvm.fma.f64(double %2951, double %2957, double 0xBE927E4FA17F65F6)
  %2959 = tail call double @llvm.fma.f64(double %2951, double %2958, double 0x3EFA01A019F4EC90)
  %2960 = tail call double @llvm.fma.f64(double %2951, double %2959, double 0xBF56C16C16C16967)
  %2961 = tail call double @llvm.fma.f64(double %2951, double %2960, double 0x3FA5555555555555)
  %2962 = fneg double %.pn5.i.i1377
  %2963 = tail call double @llvm.fma.f64(double %.pn3.i.i1378, double %2962, double %2955)
  %2964 = tail call double @llvm.fma.f64(double %2956, double %2961, double %2963)
  %2965 = fadd double %2953, %2964
  %2966 = tail call double @llvm.fma.f64(double %2951, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %2967 = tail call double @llvm.fma.f64(double %2951, double %2966, double 0x3EC71DE3796CDE01)
  %2968 = tail call double @llvm.fma.f64(double %2951, double %2967, double 0xBF2A01A019E83E5C)
  %2969 = tail call double @llvm.fma.f64(double %2951, double %2968, double 0x3F81111111110BB3)
  %2970 = fneg double %2951
  %2971 = fmul double %.pn3.i.i1378, %2970
  %2972 = fmul double %.pn5.i.i1377, 5.000000e-01
  %2973 = tail call double @llvm.fma.f64(double %2971, double %2969, double %2972)
  %2974 = tail call double @llvm.fma.f64(double %2951, double %2973, double %2962)
  %2975 = tail call double @llvm.fma.f64(double %2971, double 0xBFC5555555555555, double %2974)
  %2976 = fsub double %.pn3.i.i1378, %2975
  %2977 = and i32 %.pn1.in.i.i1379, 1
  %2978 = icmp eq i32 %2977, 0
  %2979 = select i1 %2978, double %2976, double %2965
  %2980 = bitcast double %2979 to <2 x i32>
  %.pn1.i.i1380 = shl i32 %.pn1.in.i.i1379, 30
  %2981 = xor i32 %.pn1.i.i1380, %1780
  %2982 = and i32 %2981, -2147483648
  %2983 = extractelement <2 x i32> %2980, i64 1
  %2984 = xor i32 %2983, %2982
  %2985 = insertelement <2 x i32> %2980, i32 %2984, i64 1
  %2986 = select i1 %1781, <2 x i32> %2985, <2 x i32> <i32 0, i32 2146959360>
  %2987 = bitcast <2 x i32> %2986 to double
  %2988 = fneg double %2987
  %fneg999 = fmul double %mul995, %2988
  %.pn5.i.i1385 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1386 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1387 = select i1 %1840, i32 %1938, i32 %1907
  %2989 = fmul double %.pn3.i.i1386, %.pn3.i.i1386
  %2990 = fmul double %2989, 5.000000e-01
  %2991 = fsub double 1.000000e+00, %2990
  %2992 = fsub double 1.000000e+00, %2991
  %2993 = fsub double %2992, %2990
  %2994 = fmul double %2989, %2989
  %2995 = tail call double @llvm.fma.f64(double %2989, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %2996 = tail call double @llvm.fma.f64(double %2989, double %2995, double 0xBE927E4FA17F65F6)
  %2997 = tail call double @llvm.fma.f64(double %2989, double %2996, double 0x3EFA01A019F4EC90)
  %2998 = tail call double @llvm.fma.f64(double %2989, double %2997, double 0xBF56C16C16C16967)
  %2999 = tail call double @llvm.fma.f64(double %2989, double %2998, double 0x3FA5555555555555)
  %3000 = fneg double %.pn5.i.i1385
  %3001 = tail call double @llvm.fma.f64(double %.pn3.i.i1386, double %3000, double %2993)
  %3002 = tail call double @llvm.fma.f64(double %2994, double %2999, double %3001)
  %3003 = fadd double %2991, %3002
  %3004 = tail call double @llvm.fma.f64(double %2989, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3005 = tail call double @llvm.fma.f64(double %2989, double %3004, double 0x3EC71DE3796CDE01)
  %3006 = tail call double @llvm.fma.f64(double %2989, double %3005, double 0xBF2A01A019E83E5C)
  %3007 = tail call double @llvm.fma.f64(double %2989, double %3006, double 0x3F81111111110BB3)
  %3008 = fneg double %2989
  %3009 = fmul double %.pn3.i.i1386, %3008
  %3010 = fmul double %.pn5.i.i1385, 5.000000e-01
  %3011 = tail call double @llvm.fma.f64(double %3009, double %3007, double %3010)
  %3012 = tail call double @llvm.fma.f64(double %2989, double %3011, double %3000)
  %3013 = tail call double @llvm.fma.f64(double %3009, double 0xBFC5555555555555, double %3012)
  %3014 = fsub double %.pn3.i.i1386, %3013
  %3015 = and i32 %.pn1.in.i.i1387, 1
  %3016 = icmp eq i32 %3015, 0
  %3017 = select i1 %3016, double %3014, double %3003
  %3018 = bitcast double %3017 to <2 x i32>
  %.pn1.i.i1388 = shl i32 %.pn1.in.i.i1387, 30
  %3019 = xor i32 %.pn1.i.i1388, %1940
  %3020 = and i32 %3019, -2147483648
  %3021 = extractelement <2 x i32> %3018, i64 1
  %3022 = xor i32 %3021, %3020
  %3023 = insertelement <2 x i32> %3018, i32 %3022, i64 1
  %3024 = select i1 %1941, <2 x i32> %3023, <2 x i32> <i32 0, i32 2146959360>
  %3025 = bitcast <2 x i32> %3024 to double
  %mul1015 = fmul double %mul1012, %3025
  %.pn5.i.i1393 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1394 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1395 = select i1 %2002, i32 %2100, i32 %2069
  %3026 = fmul double %.pn3.i.i1394, %.pn3.i.i1394
  %3027 = fmul double %3026, 5.000000e-01
  %3028 = fsub double 1.000000e+00, %3027
  %3029 = fsub double 1.000000e+00, %3028
  %3030 = fsub double %3029, %3027
  %3031 = fmul double %3026, %3026
  %3032 = tail call double @llvm.fma.f64(double %3026, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3033 = tail call double @llvm.fma.f64(double %3026, double %3032, double 0xBE927E4FA17F65F6)
  %3034 = tail call double @llvm.fma.f64(double %3026, double %3033, double 0x3EFA01A019F4EC90)
  %3035 = tail call double @llvm.fma.f64(double %3026, double %3034, double 0xBF56C16C16C16967)
  %3036 = tail call double @llvm.fma.f64(double %3026, double %3035, double 0x3FA5555555555555)
  %3037 = fneg double %.pn5.i.i1393
  %3038 = tail call double @llvm.fma.f64(double %.pn3.i.i1394, double %3037, double %3030)
  %3039 = tail call double @llvm.fma.f64(double %3031, double %3036, double %3038)
  %3040 = fadd double %3028, %3039
  %3041 = tail call double @llvm.fma.f64(double %3026, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3042 = tail call double @llvm.fma.f64(double %3026, double %3041, double 0x3EC71DE3796CDE01)
  %3043 = tail call double @llvm.fma.f64(double %3026, double %3042, double 0xBF2A01A019E83E5C)
  %3044 = tail call double @llvm.fma.f64(double %3026, double %3043, double 0x3F81111111110BB3)
  %3045 = fneg double %3026
  %3046 = fmul double %.pn3.i.i1394, %3045
  %3047 = fmul double %.pn5.i.i1393, 5.000000e-01
  %3048 = tail call double @llvm.fma.f64(double %3046, double %3044, double %3047)
  %3049 = tail call double @llvm.fma.f64(double %3026, double %3048, double %3037)
  %3050 = tail call double @llvm.fma.f64(double %3046, double 0xBFC5555555555555, double %3049)
  %3051 = fsub double %.pn3.i.i1394, %3050
  %3052 = and i32 %.pn1.in.i.i1395, 1
  %3053 = icmp eq i32 %3052, 0
  %3054 = select i1 %3053, double %3051, double %3040
  %3055 = bitcast double %3054 to <2 x i32>
  %.pn1.i.i1396 = shl i32 %.pn1.in.i.i1395, 30
  %3056 = xor i32 %.pn1.i.i1396, %2102
  %3057 = and i32 %3056, -2147483648
  %3058 = extractelement <2 x i32> %3055, i64 1
  %3059 = xor i32 %3058, %3057
  %3060 = insertelement <2 x i32> %3055, i32 %3059, i64 1
  %3061 = select i1 %2103, <2 x i32> %3060, <2 x i32> <i32 0, i32 2146959360>
  %3062 = bitcast <2 x i32> %3061 to double
  %3063 = fneg double %3062
  %fneg1035 = fmul double %mul1032, %3063
  %3064 = fneg double %3051
  %3065 = select i1 %3053, double %3040, double %3064
  %3066 = bitcast double %3065 to <2 x i32>
  %3067 = and i32 %.pn1.i.i1396, -2147483648
  %3068 = extractelement <2 x i32> %3066, i64 1
  %3069 = xor i32 %3068, %3067
  %3070 = insertelement <2 x i32> %3066, i32 %3069, i64 1
  %3071 = select i1 %2103, <2 x i32> %3070, <2 x i32> <i32 0, i32 2146959360>
  %3072 = bitcast <2 x i32> %3071 to double
  %3073 = fneg double %3072
  %fneg1068 = fmul double %mul1032, %3073
  %3074 = fneg double %3014
  %3075 = select i1 %3016, double %3003, double %3074
  %3076 = bitcast double %3075 to <2 x i32>
  %3077 = and i32 %.pn1.i.i1388, -2147483648
  %3078 = extractelement <2 x i32> %3076, i64 1
  %3079 = xor i32 %3078, %3077
  %3080 = insertelement <2 x i32> %3076, i32 %3079, i64 1
  %3081 = select i1 %1941, <2 x i32> %3080, <2 x i32> <i32 0, i32 2146959360>
  %3082 = bitcast <2 x i32> %3081 to double
  %mul1084 = fmul double %mul1012, %3082
  %3083 = fneg double %2976
  %3084 = select i1 %2978, double %2965, double %3083
  %3085 = bitcast double %3084 to <2 x i32>
  %3086 = and i32 %.pn1.i.i1380, -2147483648
  %3087 = extractelement <2 x i32> %3085, i64 1
  %3088 = xor i32 %3087, %3086
  %3089 = insertelement <2 x i32> %3085, i32 %3088, i64 1
  %3090 = select i1 %1781, <2 x i32> %3089, <2 x i32> <i32 0, i32 2146959360>
  %3091 = bitcast <2 x i32> %3090 to double
  %3092 = fneg double %3091
  %fneg1102 = fmul double %mul995, %3092
  %3093 = fneg double %2939
  %3094 = select i1 %2941, double %2928, double %3093
  %3095 = bitcast double %3094 to <2 x i32>
  %3096 = and i32 %.pn1.i.i1372, -2147483648
  %3097 = extractelement <2 x i32> %3095, i64 1
  %3098 = xor i32 %3097, %3096
  %3099 = insertelement <2 x i32> %3095, i32 %3098, i64 1
  %3100 = select i1 %1567, <2 x i32> %3099, <2 x i32> <i32 0, i32 2146959360>
  %3101 = bitcast <2 x i32> %3100 to double
  %mul1117 = fmul double %mul978, %3101
  %3102 = fneg double %2901
  %3103 = select i1 %2903, double %2890, double %3102
  %3104 = bitcast double %3103 to <2 x i32>
  %3105 = and i32 %.pn1.i.i1365, -2147483648
  %3106 = extractelement <2 x i32> %3104, i64 1
  %3107 = xor i32 %3106, %3105
  %3108 = insertelement <2 x i32> %3104, i32 %3107, i64 1
  %3109 = select i1 %1408, <2 x i32> %3108, <2 x i32> <i32 0, i32 2146959360>
  %3110 = bitcast <2 x i32> %3109 to double
  %3111 = fneg double %3110
  %fneg1133 = fmul double %mul962, %3111
  %3112 = fneg double %2864
  %3113 = select i1 %2866, double %2853, double %3112
  %3114 = bitcast double %3113 to <2 x i32>
  %3115 = and i32 %.pn1.i.i1358, -2147483648
  %3116 = extractelement <2 x i32> %3114, i64 1
  %3117 = xor i32 %3116, %3115
  %3118 = insertelement <2 x i32> %3114, i32 %3117, i64 1
  %3119 = select i1 %1195, <2 x i32> %3118, <2 x i32> <i32 0, i32 2146959360>
  %3120 = bitcast <2 x i32> %3119 to double
  %mul1146 = fmul double %mul947, %3120
  %3121 = fneg double %2826
  %3122 = select i1 %2828, double %2815, double %3121
  %3123 = bitcast double %3122 to <2 x i32>
  %3124 = and i32 %.pn1.i.i1351, -2147483648
  %3125 = extractelement <2 x i32> %3123, i64 1
  %3126 = xor i32 %3125, %3124
  %3127 = insertelement <2 x i32> %3123, i32 %3126, i64 1
  %3128 = select i1 %983, <2 x i32> %3127, <2 x i32> <i32 0, i32 2146959360>
  %3129 = bitcast <2 x i32> %3128 to double
  %3130 = fneg double %3129
  %fneg1158 = fmul double %mul933, %3130
  %3131 = fneg double %2789
  %3132 = select i1 %2791, double %2778, double %3131
  %3133 = bitcast double %3132 to <2 x i32>
  %3134 = and i32 %.pn1.i.i1345, -2147483648
  %3135 = extractelement <2 x i32> %3133, i64 1
  %3136 = xor i32 %3135, %3134
  %3137 = insertelement <2 x i32> %3133, i32 %3136, i64 1
  %3138 = select i1 %645, <2 x i32> %3137, <2 x i32> <i32 0, i32 2146959360>
  %3139 = bitcast <2 x i32> %3138 to double
  %mul1167 = fmul double %mul922, %3139
  %3140 = fneg double %2751
  %3141 = select i1 %2753, double %2740, double %3140
  %3142 = bitcast double %3141 to <2 x i32>
  %3143 = and i32 %.pn1.i.i1339, -2147483648
  %3144 = extractelement <2 x i32> %3142, i64 1
  %3145 = xor i32 %3144, %3143
  %3146 = insertelement <2 x i32> %3142, i32 %3145, i64 1
  %3147 = select i1 %487, <2 x i32> %3146, <2 x i32> <i32 0, i32 2146959360>
  %3148 = bitcast <2 x i32> %3147 to double
  %3149 = fneg double %3148
  %fneg1176 = fmul double %mul913, %3149
  %.1638 = select i1 %544, double %641, double %624
  %.1639 = select i1 %544, double %639, double %622
  %.1640 = select i1 %544, i32 %642, i32 %611
  %3150 = fmul double %.1639, %.1639
  %3151 = fmul double %3150, 5.000000e-01
  %3152 = fsub double 1.000000e+00, %3151
  %3153 = fsub double 1.000000e+00, %3152
  %3154 = fsub double %3153, %3151
  %3155 = fmul double %3150, %3150
  %3156 = tail call double @llvm.fma.f64(double %3150, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3157 = tail call double @llvm.fma.f64(double %3150, double %3156, double 0xBE927E4FA17F65F6)
  %3158 = tail call double @llvm.fma.f64(double %3150, double %3157, double 0x3EFA01A019F4EC90)
  %3159 = tail call double @llvm.fma.f64(double %3150, double %3158, double 0xBF56C16C16C16967)
  %3160 = tail call double @llvm.fma.f64(double %3150, double %3159, double 0x3FA5555555555555)
  %3161 = fneg double %.1638
  %3162 = tail call double @llvm.fma.f64(double %.1639, double %3161, double %3154)
  %3163 = tail call double @llvm.fma.f64(double %3155, double %3160, double %3162)
  %3164 = fadd double %3152, %3163
  %3165 = tail call double @llvm.fma.f64(double %3150, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3166 = tail call double @llvm.fma.f64(double %3150, double %3165, double 0x3EC71DE3796CDE01)
  %3167 = tail call double @llvm.fma.f64(double %3150, double %3166, double 0xBF2A01A019E83E5C)
  %3168 = tail call double @llvm.fma.f64(double %3150, double %3167, double 0x3F81111111110BB3)
  %3169 = fneg double %3150
  %3170 = fmul double %.1639, %3169
  %3171 = fmul double %.1638, 5.000000e-01
  %3172 = tail call double @llvm.fma.f64(double %3170, double %3168, double %3171)
  %3173 = tail call double @llvm.fma.f64(double %3150, double %3172, double %3161)
  %3174 = tail call double @llvm.fma.f64(double %3170, double 0xBFC5555555555555, double %3173)
  %3175 = fsub double %.1639, %3174
  %3176 = and i32 %.1640, 1
  %3177 = icmp eq i32 %3176, 0
  %3178 = select i1 %3177, double %3175, double %3164
  %3179 = bitcast double %3178 to <2 x i32>
  %.pn1.i.i1228 = shl i32 %.1640, 30
  %3180 = xor i32 %.pn1.i.i1228, %644
  %3181 = and i32 %3180, -2147483648
  %3182 = extractelement <2 x i32> %3179, i64 1
  %3183 = xor i32 %3182, %3181
  %3184 = insertelement <2 x i32> %3179, i32 %3183, i64 1
  %3185 = select i1 %645, <2 x i32> %3184, <2 x i32> <i32 0, i32 2146959360>
  %3186 = bitcast <2 x i32> %3185 to double
  %mul688 = fmul double %mul685, %3186
  %.pn5.i.i1231 = select i1 %882, double %979, double %962
  %.pn3.i.i1232 = select i1 %882, double %977, double %960
  %.pn1.in.i.i1233 = select i1 %882, i32 %980, i32 %949
  %3187 = fmul double %.pn3.i.i1232, %.pn3.i.i1232
  %3188 = fmul double %3187, 5.000000e-01
  %3189 = fsub double 1.000000e+00, %3188
  %3190 = fsub double 1.000000e+00, %3189
  %3191 = fsub double %3190, %3188
  %3192 = fmul double %3187, %3187
  %3193 = tail call double @llvm.fma.f64(double %3187, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3194 = tail call double @llvm.fma.f64(double %3187, double %3193, double 0xBE927E4FA17F65F6)
  %3195 = tail call double @llvm.fma.f64(double %3187, double %3194, double 0x3EFA01A019F4EC90)
  %3196 = tail call double @llvm.fma.f64(double %3187, double %3195, double 0xBF56C16C16C16967)
  %3197 = tail call double @llvm.fma.f64(double %3187, double %3196, double 0x3FA5555555555555)
  %3198 = fneg double %.pn5.i.i1231
  %3199 = tail call double @llvm.fma.f64(double %.pn3.i.i1232, double %3198, double %3191)
  %3200 = tail call double @llvm.fma.f64(double %3192, double %3197, double %3199)
  %3201 = fadd double %3189, %3200
  %3202 = tail call double @llvm.fma.f64(double %3187, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3203 = tail call double @llvm.fma.f64(double %3187, double %3202, double 0x3EC71DE3796CDE01)
  %3204 = tail call double @llvm.fma.f64(double %3187, double %3203, double 0xBF2A01A019E83E5C)
  %3205 = tail call double @llvm.fma.f64(double %3187, double %3204, double 0x3F81111111110BB3)
  %3206 = fneg double %3187
  %3207 = fmul double %.pn3.i.i1232, %3206
  %3208 = fmul double %.pn5.i.i1231, 5.000000e-01
  %3209 = tail call double @llvm.fma.f64(double %3207, double %3205, double %3208)
  %3210 = tail call double @llvm.fma.f64(double %3187, double %3209, double %3198)
  %3211 = tail call double @llvm.fma.f64(double %3207, double 0xBFC5555555555555, double %3210)
  %3212 = fsub double %.pn3.i.i1232, %3211
  %3213 = and i32 %.pn1.in.i.i1233, 1
  %3214 = icmp eq i32 %3213, 0
  %3215 = select i1 %3214, double %3212, double %3201
  %3216 = bitcast double %3215 to <2 x i32>
  %.pn1.i.i1234 = shl i32 %.pn1.in.i.i1233, 30
  %3217 = xor i32 %.pn1.i.i1234, %982
  %3218 = and i32 %3217, -2147483648
  %3219 = extractelement <2 x i32> %3216, i64 1
  %3220 = xor i32 %3219, %3218
  %3221 = insertelement <2 x i32> %3216, i32 %3220, i64 1
  %3222 = select i1 %983, <2 x i32> %3221, <2 x i32> <i32 0, i32 2146959360>
  %3223 = bitcast <2 x i32> %3222 to double
  %3224 = fneg double %3223
  %fneg697 = fmul double %mul693, %3224
  %.pn5.i.i1237 = select i1 %1094, double %1191, double %1174
  %.pn3.i.i1238 = select i1 %1094, double %1189, double %1172
  %.pn1.in.i.i1239 = select i1 %1094, i32 %1192, i32 %1161
  %3225 = fmul double %.pn3.i.i1238, %.pn3.i.i1238
  %3226 = fmul double %3225, 5.000000e-01
  %3227 = fsub double 1.000000e+00, %3226
  %3228 = fsub double 1.000000e+00, %3227
  %3229 = fsub double %3228, %3226
  %3230 = fmul double %3225, %3225
  %3231 = tail call double @llvm.fma.f64(double %3225, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3232 = tail call double @llvm.fma.f64(double %3225, double %3231, double 0xBE927E4FA17F65F6)
  %3233 = tail call double @llvm.fma.f64(double %3225, double %3232, double 0x3EFA01A019F4EC90)
  %3234 = tail call double @llvm.fma.f64(double %3225, double %3233, double 0xBF56C16C16C16967)
  %3235 = tail call double @llvm.fma.f64(double %3225, double %3234, double 0x3FA5555555555555)
  %3236 = fneg double %.pn5.i.i1237
  %3237 = tail call double @llvm.fma.f64(double %.pn3.i.i1238, double %3236, double %3229)
  %3238 = tail call double @llvm.fma.f64(double %3230, double %3235, double %3237)
  %3239 = fadd double %3227, %3238
  %3240 = tail call double @llvm.fma.f64(double %3225, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3241 = tail call double @llvm.fma.f64(double %3225, double %3240, double 0x3EC71DE3796CDE01)
  %3242 = tail call double @llvm.fma.f64(double %3225, double %3241, double 0xBF2A01A019E83E5C)
  %3243 = tail call double @llvm.fma.f64(double %3225, double %3242, double 0x3F81111111110BB3)
  %3244 = fneg double %3225
  %3245 = fmul double %.pn3.i.i1238, %3244
  %3246 = fmul double %.pn5.i.i1237, 5.000000e-01
  %3247 = tail call double @llvm.fma.f64(double %3245, double %3243, double %3246)
  %3248 = tail call double @llvm.fma.f64(double %3225, double %3247, double %3236)
  %3249 = tail call double @llvm.fma.f64(double %3245, double 0xBFC5555555555555, double %3248)
  %3250 = fsub double %.pn3.i.i1238, %3249
  %3251 = and i32 %.pn1.in.i.i1239, 1
  %3252 = icmp eq i32 %3251, 0
  %3253 = select i1 %3252, double %3250, double %3239
  %3254 = bitcast double %3253 to <2 x i32>
  %.pn1.i.i1240 = shl i32 %.pn1.in.i.i1239, 30
  %3255 = xor i32 %.pn1.i.i1240, %1194
  %3256 = and i32 %3255, -2147483648
  %3257 = extractelement <2 x i32> %3254, i64 1
  %3258 = xor i32 %3257, %3256
  %3259 = insertelement <2 x i32> %3254, i32 %3258, i64 1
  %3260 = select i1 %1195, <2 x i32> %3259, <2 x i32> <i32 0, i32 2146959360>
  %3261 = bitcast <2 x i32> %3260 to double
  %mul708 = fmul double %mul705, %3261
  %.pn5.i.i1244 = select i1 %1307, double %1404, double %1387
  %.pn3.i.i1245 = select i1 %1307, double %1402, double %1385
  %.pn1.in.i.i1246 = select i1 %1307, i32 %1405, i32 %1374
  %3262 = fmul double %.pn3.i.i1245, %.pn3.i.i1245
  %3263 = fmul double %3262, 5.000000e-01
  %3264 = fsub double 1.000000e+00, %3263
  %3265 = fsub double 1.000000e+00, %3264
  %3266 = fsub double %3265, %3263
  %3267 = fmul double %3262, %3262
  %3268 = tail call double @llvm.fma.f64(double %3262, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3269 = tail call double @llvm.fma.f64(double %3262, double %3268, double 0xBE927E4FA17F65F6)
  %3270 = tail call double @llvm.fma.f64(double %3262, double %3269, double 0x3EFA01A019F4EC90)
  %3271 = tail call double @llvm.fma.f64(double %3262, double %3270, double 0xBF56C16C16C16967)
  %3272 = tail call double @llvm.fma.f64(double %3262, double %3271, double 0x3FA5555555555555)
  %3273 = fneg double %.pn5.i.i1244
  %3274 = tail call double @llvm.fma.f64(double %.pn3.i.i1245, double %3273, double %3266)
  %3275 = tail call double @llvm.fma.f64(double %3267, double %3272, double %3274)
  %3276 = fadd double %3264, %3275
  %3277 = tail call double @llvm.fma.f64(double %3262, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3278 = tail call double @llvm.fma.f64(double %3262, double %3277, double 0x3EC71DE3796CDE01)
  %3279 = tail call double @llvm.fma.f64(double %3262, double %3278, double 0xBF2A01A019E83E5C)
  %3280 = tail call double @llvm.fma.f64(double %3262, double %3279, double 0x3F81111111110BB3)
  %3281 = fneg double %3262
  %3282 = fmul double %.pn3.i.i1245, %3281
  %3283 = fmul double %.pn5.i.i1244, 5.000000e-01
  %3284 = tail call double @llvm.fma.f64(double %3282, double %3280, double %3283)
  %3285 = tail call double @llvm.fma.f64(double %3262, double %3284, double %3273)
  %3286 = tail call double @llvm.fma.f64(double %3282, double 0xBFC5555555555555, double %3285)
  %3287 = fsub double %.pn3.i.i1245, %3286
  %3288 = and i32 %.pn1.in.i.i1246, 1
  %3289 = icmp eq i32 %3288, 0
  %3290 = select i1 %3289, double %3287, double %3276
  %3291 = bitcast double %3290 to <2 x i32>
  %.pn1.i.i1247 = shl i32 %.pn1.in.i.i1246, 30
  %3292 = xor i32 %.pn1.i.i1247, %1407
  %3293 = and i32 %3292, -2147483648
  %3294 = extractelement <2 x i32> %3291, i64 1
  %3295 = xor i32 %3294, %3293
  %3296 = insertelement <2 x i32> %3291, i32 %3295, i64 1
  %3297 = select i1 %1408, <2 x i32> %3296, <2 x i32> <i32 0, i32 2146959360>
  %3298 = bitcast <2 x i32> %3297 to double
  %3299 = fneg double %3298
  %fneg722 = fmul double %mul718, %3299
  %.pn5.i.i1250 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1251 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1252 = select i1 %1466, i32 %1564, i32 %1533
  %3300 = fmul double %.pn3.i.i1251, %.pn3.i.i1251
  %3301 = fmul double %3300, 5.000000e-01
  %3302 = fsub double 1.000000e+00, %3301
  %3303 = fsub double 1.000000e+00, %3302
  %3304 = fsub double %3303, %3301
  %3305 = fmul double %3300, %3300
  %3306 = tail call double @llvm.fma.f64(double %3300, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3307 = tail call double @llvm.fma.f64(double %3300, double %3306, double 0xBE927E4FA17F65F6)
  %3308 = tail call double @llvm.fma.f64(double %3300, double %3307, double 0x3EFA01A019F4EC90)
  %3309 = tail call double @llvm.fma.f64(double %3300, double %3308, double 0xBF56C16C16C16967)
  %3310 = tail call double @llvm.fma.f64(double %3300, double %3309, double 0x3FA5555555555555)
  %3311 = fneg double %.pn5.i.i1250
  %3312 = tail call double @llvm.fma.f64(double %.pn3.i.i1251, double %3311, double %3304)
  %3313 = tail call double @llvm.fma.f64(double %3305, double %3310, double %3312)
  %3314 = fadd double %3302, %3313
  %3315 = tail call double @llvm.fma.f64(double %3300, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3316 = tail call double @llvm.fma.f64(double %3300, double %3315, double 0x3EC71DE3796CDE01)
  %3317 = tail call double @llvm.fma.f64(double %3300, double %3316, double 0xBF2A01A019E83E5C)
  %3318 = tail call double @llvm.fma.f64(double %3300, double %3317, double 0x3F81111111110BB3)
  %3319 = fneg double %3300
  %3320 = fmul double %.pn3.i.i1251, %3319
  %3321 = fmul double %.pn5.i.i1250, 5.000000e-01
  %3322 = tail call double @llvm.fma.f64(double %3320, double %3318, double %3321)
  %3323 = tail call double @llvm.fma.f64(double %3300, double %3322, double %3311)
  %3324 = tail call double @llvm.fma.f64(double %3320, double 0xBFC5555555555555, double %3323)
  %3325 = fsub double %.pn3.i.i1251, %3324
  %3326 = and i32 %.pn1.in.i.i1252, 1
  %3327 = icmp eq i32 %3326, 0
  %3328 = select i1 %3327, double %3325, double %3314
  %3329 = bitcast double %3328 to <2 x i32>
  %.pn1.i.i1253 = shl i32 %.pn1.in.i.i1252, 30
  %3330 = xor i32 %.pn1.i.i1253, %1566
  %3331 = and i32 %3330, -2147483648
  %3332 = extractelement <2 x i32> %3329, i64 1
  %3333 = xor i32 %3332, %3331
  %3334 = insertelement <2 x i32> %3329, i32 %3333, i64 1
  %3335 = select i1 %1567, <2 x i32> %3334, <2 x i32> <i32 0, i32 2146959360>
  %3336 = bitcast <2 x i32> %3335 to double
  %mul737 = fmul double %mul734, %3336
  %.pn5.i.i1258 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1259 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1260 = select i1 %1680, i32 %1778, i32 %1747
  %3337 = fmul double %.pn3.i.i1259, %.pn3.i.i1259
  %3338 = fmul double %3337, 5.000000e-01
  %3339 = fsub double 1.000000e+00, %3338
  %3340 = fsub double 1.000000e+00, %3339
  %3341 = fsub double %3340, %3338
  %3342 = fmul double %3337, %3337
  %3343 = tail call double @llvm.fma.f64(double %3337, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3344 = tail call double @llvm.fma.f64(double %3337, double %3343, double 0xBE927E4FA17F65F6)
  %3345 = tail call double @llvm.fma.f64(double %3337, double %3344, double 0x3EFA01A019F4EC90)
  %3346 = tail call double @llvm.fma.f64(double %3337, double %3345, double 0xBF56C16C16C16967)
  %3347 = tail call double @llvm.fma.f64(double %3337, double %3346, double 0x3FA5555555555555)
  %3348 = fneg double %.pn5.i.i1258
  %3349 = tail call double @llvm.fma.f64(double %.pn3.i.i1259, double %3348, double %3341)
  %3350 = tail call double @llvm.fma.f64(double %3342, double %3347, double %3349)
  %3351 = fadd double %3339, %3350
  %3352 = tail call double @llvm.fma.f64(double %3337, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3353 = tail call double @llvm.fma.f64(double %3337, double %3352, double 0x3EC71DE3796CDE01)
  %3354 = tail call double @llvm.fma.f64(double %3337, double %3353, double 0xBF2A01A019E83E5C)
  %3355 = tail call double @llvm.fma.f64(double %3337, double %3354, double 0x3F81111111110BB3)
  %3356 = fneg double %3337
  %3357 = fmul double %.pn3.i.i1259, %3356
  %3358 = fmul double %.pn5.i.i1258, 5.000000e-01
  %3359 = tail call double @llvm.fma.f64(double %3357, double %3355, double %3358)
  %3360 = tail call double @llvm.fma.f64(double %3337, double %3359, double %3348)
  %3361 = tail call double @llvm.fma.f64(double %3357, double 0xBFC5555555555555, double %3360)
  %3362 = fsub double %.pn3.i.i1259, %3361
  %3363 = and i32 %.pn1.in.i.i1260, 1
  %3364 = icmp eq i32 %3363, 0
  %3365 = select i1 %3364, double %3362, double %3351
  %3366 = bitcast double %3365 to <2 x i32>
  %.pn1.i.i1261 = shl i32 %.pn1.in.i.i1260, 30
  %3367 = xor i32 %.pn1.i.i1261, %1780
  %3368 = and i32 %3367, -2147483648
  %3369 = extractelement <2 x i32> %3366, i64 1
  %3370 = xor i32 %3369, %3368
  %3371 = insertelement <2 x i32> %3366, i32 %3370, i64 1
  %3372 = select i1 %1781, <2 x i32> %3371, <2 x i32> <i32 0, i32 2146959360>
  %3373 = bitcast <2 x i32> %3372 to double
  %3374 = fneg double %3373
  %fneg753 = fmul double %mul749, %3374
  %.pn5.i.i1265 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1266 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1267 = select i1 %1840, i32 %1938, i32 %1907
  %3375 = fmul double %.pn3.i.i1266, %.pn3.i.i1266
  %3376 = fmul double %3375, 5.000000e-01
  %3377 = fsub double 1.000000e+00, %3376
  %3378 = fsub double 1.000000e+00, %3377
  %3379 = fsub double %3378, %3376
  %3380 = fmul double %3375, %3375
  %3381 = tail call double @llvm.fma.f64(double %3375, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3382 = tail call double @llvm.fma.f64(double %3375, double %3381, double 0xBE927E4FA17F65F6)
  %3383 = tail call double @llvm.fma.f64(double %3375, double %3382, double 0x3EFA01A019F4EC90)
  %3384 = tail call double @llvm.fma.f64(double %3375, double %3383, double 0xBF56C16C16C16967)
  %3385 = tail call double @llvm.fma.f64(double %3375, double %3384, double 0x3FA5555555555555)
  %3386 = fneg double %.pn5.i.i1265
  %3387 = tail call double @llvm.fma.f64(double %.pn3.i.i1266, double %3386, double %3379)
  %3388 = tail call double @llvm.fma.f64(double %3380, double %3385, double %3387)
  %3389 = fadd double %3377, %3388
  %3390 = tail call double @llvm.fma.f64(double %3375, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3391 = tail call double @llvm.fma.f64(double %3375, double %3390, double 0x3EC71DE3796CDE01)
  %3392 = tail call double @llvm.fma.f64(double %3375, double %3391, double 0xBF2A01A019E83E5C)
  %3393 = tail call double @llvm.fma.f64(double %3375, double %3392, double 0x3F81111111110BB3)
  %3394 = fneg double %3375
  %3395 = fmul double %.pn3.i.i1266, %3394
  %3396 = fmul double %.pn5.i.i1265, 5.000000e-01
  %3397 = tail call double @llvm.fma.f64(double %3395, double %3393, double %3396)
  %3398 = tail call double @llvm.fma.f64(double %3375, double %3397, double %3386)
  %3399 = tail call double @llvm.fma.f64(double %3395, double 0xBFC5555555555555, double %3398)
  %3400 = fsub double %.pn3.i.i1266, %3399
  %3401 = and i32 %.pn1.in.i.i1267, 1
  %3402 = icmp eq i32 %3401, 0
  %3403 = select i1 %3402, double %3400, double %3389
  %3404 = bitcast double %3403 to <2 x i32>
  %.pn1.i.i1268 = shl i32 %.pn1.in.i.i1267, 30
  %3405 = xor i32 %.pn1.i.i1268, %1940
  %3406 = and i32 %3405, -2147483648
  %3407 = extractelement <2 x i32> %3404, i64 1
  %3408 = xor i32 %3407, %3406
  %3409 = insertelement <2 x i32> %3404, i32 %3408, i64 1
  %3410 = select i1 %1941, <2 x i32> %3409, <2 x i32> <i32 0, i32 2146959360>
  %3411 = bitcast <2 x i32> %3410 to double
  %mul769 = fmul double %mul766, %3411
  %.pn5.i.i1273 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1274 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1275 = select i1 %2002, i32 %2100, i32 %2069
  %3412 = fmul double %.pn3.i.i1274, %.pn3.i.i1274
  %3413 = fmul double %3412, 5.000000e-01
  %3414 = fsub double 1.000000e+00, %3413
  %3415 = fsub double 1.000000e+00, %3414
  %3416 = fsub double %3415, %3413
  %3417 = fmul double %3412, %3412
  %3418 = tail call double @llvm.fma.f64(double %3412, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3419 = tail call double @llvm.fma.f64(double %3412, double %3418, double 0xBE927E4FA17F65F6)
  %3420 = tail call double @llvm.fma.f64(double %3412, double %3419, double 0x3EFA01A019F4EC90)
  %3421 = tail call double @llvm.fma.f64(double %3412, double %3420, double 0xBF56C16C16C16967)
  %3422 = tail call double @llvm.fma.f64(double %3412, double %3421, double 0x3FA5555555555555)
  %3423 = fneg double %.pn5.i.i1273
  %3424 = tail call double @llvm.fma.f64(double %.pn3.i.i1274, double %3423, double %3416)
  %3425 = tail call double @llvm.fma.f64(double %3417, double %3422, double %3424)
  %3426 = fadd double %3414, %3425
  %3427 = tail call double @llvm.fma.f64(double %3412, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3428 = tail call double @llvm.fma.f64(double %3412, double %3427, double 0x3EC71DE3796CDE01)
  %3429 = tail call double @llvm.fma.f64(double %3412, double %3428, double 0xBF2A01A019E83E5C)
  %3430 = tail call double @llvm.fma.f64(double %3412, double %3429, double 0x3F81111111110BB3)
  %3431 = fneg double %3412
  %3432 = fmul double %.pn3.i.i1274, %3431
  %3433 = fmul double %.pn5.i.i1273, 5.000000e-01
  %3434 = tail call double @llvm.fma.f64(double %3432, double %3430, double %3433)
  %3435 = tail call double @llvm.fma.f64(double %3412, double %3434, double %3423)
  %3436 = tail call double @llvm.fma.f64(double %3432, double 0xBFC5555555555555, double %3435)
  %3437 = fsub double %.pn3.i.i1274, %3436
  %3438 = and i32 %.pn1.in.i.i1275, 1
  %3439 = icmp eq i32 %3438, 0
  %3440 = select i1 %3439, double %3437, double %3426
  %3441 = bitcast double %3440 to <2 x i32>
  %.pn1.i.i1276 = shl i32 %.pn1.in.i.i1275, 30
  %3442 = xor i32 %.pn1.i.i1276, %2102
  %3443 = and i32 %3442, -2147483648
  %3444 = extractelement <2 x i32> %3441, i64 1
  %3445 = xor i32 %3444, %3443
  %3446 = insertelement <2 x i32> %3441, i32 %3445, i64 1
  %3447 = select i1 %2103, <2 x i32> %3446, <2 x i32> <i32 0, i32 2146959360>
  %3448 = bitcast <2 x i32> %3447 to double
  %3449 = fneg double %3448
  %fneg786 = fmul double %mul783, %3449
  %3450 = fneg double %3437
  %3451 = select i1 %3439, double %3426, double %3450
  %3452 = bitcast double %3451 to <2 x i32>
  %3453 = and i32 %.pn1.i.i1276, -2147483648
  %3454 = extractelement <2 x i32> %3452, i64 1
  %3455 = xor i32 %3454, %3453
  %3456 = insertelement <2 x i32> %3452, i32 %3455, i64 1
  %3457 = select i1 %2103, <2 x i32> %3456, <2 x i32> <i32 0, i32 2146959360>
  %3458 = bitcast <2 x i32> %3457 to double
  %3459 = fneg double %3458
  %fneg817 = fmul double %mul783, %3459
  %3460 = fneg double %3400
  %3461 = select i1 %3402, double %3389, double %3460
  %3462 = bitcast double %3461 to <2 x i32>
  %3463 = and i32 %.pn1.i.i1268, -2147483648
  %3464 = extractelement <2 x i32> %3462, i64 1
  %3465 = xor i32 %3464, %3463
  %3466 = insertelement <2 x i32> %3462, i32 %3465, i64 1
  %3467 = select i1 %1941, <2 x i32> %3466, <2 x i32> <i32 0, i32 2146959360>
  %3468 = bitcast <2 x i32> %3467 to double
  %mul833 = fmul double %mul766, %3468
  %3469 = fneg double %3362
  %3470 = select i1 %3364, double %3351, double %3469
  %3471 = bitcast double %3470 to <2 x i32>
  %3472 = and i32 %.pn1.i.i1261, -2147483648
  %3473 = extractelement <2 x i32> %3471, i64 1
  %3474 = xor i32 %3473, %3472
  %3475 = insertelement <2 x i32> %3471, i32 %3474, i64 1
  %3476 = select i1 %1781, <2 x i32> %3475, <2 x i32> <i32 0, i32 2146959360>
  %3477 = bitcast <2 x i32> %3476 to double
  %3478 = fneg double %3477
  %fneg849 = fmul double %mul749, %3478
  %3479 = fneg double %3325
  %3480 = select i1 %3327, double %3314, double %3479
  %3481 = bitcast double %3480 to <2 x i32>
  %3482 = and i32 %.pn1.i.i1253, -2147483648
  %3483 = extractelement <2 x i32> %3481, i64 1
  %3484 = xor i32 %3483, %3482
  %3485 = insertelement <2 x i32> %3481, i32 %3484, i64 1
  %3486 = select i1 %1567, <2 x i32> %3485, <2 x i32> <i32 0, i32 2146959360>
  %3487 = bitcast <2 x i32> %3486 to double
  %mul864 = fmul double %mul734, %3487
  %3488 = fneg double %3287
  %3489 = select i1 %3289, double %3276, double %3488
  %3490 = bitcast double %3489 to <2 x i32>
  %3491 = and i32 %.pn1.i.i1247, -2147483648
  %3492 = extractelement <2 x i32> %3490, i64 1
  %3493 = xor i32 %3492, %3491
  %3494 = insertelement <2 x i32> %3490, i32 %3493, i64 1
  %3495 = select i1 %1408, <2 x i32> %3494, <2 x i32> <i32 0, i32 2146959360>
  %3496 = bitcast <2 x i32> %3495 to double
  %3497 = fneg double %3496
  %fneg878 = fmul double %mul718, %3497
  %3498 = fneg double %3250
  %3499 = select i1 %3252, double %3239, double %3498
  %3500 = bitcast double %3499 to <2 x i32>
  %3501 = and i32 %.pn1.i.i1240, -2147483648
  %3502 = extractelement <2 x i32> %3500, i64 1
  %3503 = xor i32 %3502, %3501
  %3504 = insertelement <2 x i32> %3500, i32 %3503, i64 1
  %3505 = select i1 %1195, <2 x i32> %3504, <2 x i32> <i32 0, i32 2146959360>
  %3506 = bitcast <2 x i32> %3505 to double
  %mul889 = fmul double %mul705, %3506
  %3507 = fneg double %3212
  %3508 = select i1 %3214, double %3201, double %3507
  %3509 = bitcast double %3508 to <2 x i32>
  %3510 = and i32 %.pn1.i.i1234, -2147483648
  %3511 = extractelement <2 x i32> %3509, i64 1
  %3512 = xor i32 %3511, %3510
  %3513 = insertelement <2 x i32> %3509, i32 %3512, i64 1
  %3514 = select i1 %983, <2 x i32> %3513, <2 x i32> <i32 0, i32 2146959360>
  %3515 = bitcast <2 x i32> %3514 to double
  %3516 = fneg double %3515
  %fneg899 = fmul double %mul693, %3516
  %3517 = fneg double %3175
  %3518 = select i1 %3177, double %3164, double %3517
  %3519 = bitcast double %3518 to <2 x i32>
  %3520 = and i32 %.pn1.i.i1228, -2147483648
  %3521 = extractelement <2 x i32> %3519, i64 1
  %3522 = xor i32 %3521, %3520
  %3523 = insertelement <2 x i32> %3519, i32 %3522, i64 1
  %3524 = select i1 %645, <2 x i32> %3523, <2 x i32> <i32 0, i32 2146959360>
  %3525 = bitcast <2 x i32> %3524 to double
  %mul907 = fmul double %mul685, %3525
  %.1635 = select i1 %882, double %979, double %962
  %.1636 = select i1 %882, double %977, double %960
  %.1637 = select i1 %882, i32 %980, i32 %949
  %3526 = fmul double %.1636, %.1636
  %3527 = fmul double %3526, 5.000000e-01
  %3528 = fsub double 1.000000e+00, %3527
  %3529 = fsub double 1.000000e+00, %3528
  %3530 = fsub double %3529, %3527
  %3531 = fmul double %3526, %3526
  %3532 = tail call double @llvm.fma.f64(double %3526, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3533 = tail call double @llvm.fma.f64(double %3526, double %3532, double 0xBE927E4FA17F65F6)
  %3534 = tail call double @llvm.fma.f64(double %3526, double %3533, double 0x3EFA01A019F4EC90)
  %3535 = tail call double @llvm.fma.f64(double %3526, double %3534, double 0xBF56C16C16C16967)
  %3536 = tail call double @llvm.fma.f64(double %3526, double %3535, double 0x3FA5555555555555)
  %3537 = fneg double %.1635
  %3538 = tail call double @llvm.fma.f64(double %.1636, double %3537, double %3530)
  %3539 = tail call double @llvm.fma.f64(double %3531, double %3536, double %3538)
  %3540 = fadd double %3528, %3539
  %3541 = tail call double @llvm.fma.f64(double %3526, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3542 = tail call double @llvm.fma.f64(double %3526, double %3541, double 0x3EC71DE3796CDE01)
  %3543 = tail call double @llvm.fma.f64(double %3526, double %3542, double 0xBF2A01A019E83E5C)
  %3544 = tail call double @llvm.fma.f64(double %3526, double %3543, double 0x3F81111111110BB3)
  %3545 = fneg double %3526
  %3546 = fmul double %.1636, %3545
  %3547 = fmul double %.1635, 5.000000e-01
  %3548 = tail call double @llvm.fma.f64(double %3546, double %3544, double %3547)
  %3549 = tail call double @llvm.fma.f64(double %3526, double %3548, double %3537)
  %3550 = tail call double @llvm.fma.f64(double %3546, double 0xBFC5555555555555, double %3549)
  %3551 = fsub double %.1636, %3550
  %3552 = and i32 %.1637, 1
  %3553 = icmp eq i32 %3552, 0
  %3554 = select i1 %3553, double %3551, double %3540
  %3555 = bitcast double %3554 to <2 x i32>
  %.pn1.i.i1135 = shl i32 %.1637, 30
  %3556 = xor i32 %.pn1.i.i1135, %982
  %3557 = and i32 %3556, -2147483648
  %3558 = extractelement <2 x i32> %3555, i64 1
  %3559 = xor i32 %3558, %3557
  %3560 = insertelement <2 x i32> %3555, i32 %3559, i64 1
  %3561 = select i1 %983, <2 x i32> %3560, <2 x i32> <i32 0, i32 2146959360>
  %3562 = bitcast <2 x i32> %3561 to double
  %3563 = fneg double %3562
  %fneg498 = fmul double %mul494, %3563
  %.pn5.i.i1138 = select i1 %1094, double %1191, double %1174
  %.pn3.i.i1139 = select i1 %1094, double %1189, double %1172
  %.pn1.in.i.i1140 = select i1 %1094, i32 %1192, i32 %1161
  %3564 = fmul double %.pn3.i.i1139, %.pn3.i.i1139
  %3565 = fmul double %3564, 5.000000e-01
  %3566 = fsub double 1.000000e+00, %3565
  %3567 = fsub double 1.000000e+00, %3566
  %3568 = fsub double %3567, %3565
  %3569 = fmul double %3564, %3564
  %3570 = tail call double @llvm.fma.f64(double %3564, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3571 = tail call double @llvm.fma.f64(double %3564, double %3570, double 0xBE927E4FA17F65F6)
  %3572 = tail call double @llvm.fma.f64(double %3564, double %3571, double 0x3EFA01A019F4EC90)
  %3573 = tail call double @llvm.fma.f64(double %3564, double %3572, double 0xBF56C16C16C16967)
  %3574 = tail call double @llvm.fma.f64(double %3564, double %3573, double 0x3FA5555555555555)
  %3575 = fneg double %.pn5.i.i1138
  %3576 = tail call double @llvm.fma.f64(double %.pn3.i.i1139, double %3575, double %3568)
  %3577 = tail call double @llvm.fma.f64(double %3569, double %3574, double %3576)
  %3578 = fadd double %3566, %3577
  %3579 = tail call double @llvm.fma.f64(double %3564, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3580 = tail call double @llvm.fma.f64(double %3564, double %3579, double 0x3EC71DE3796CDE01)
  %3581 = tail call double @llvm.fma.f64(double %3564, double %3580, double 0xBF2A01A019E83E5C)
  %3582 = tail call double @llvm.fma.f64(double %3564, double %3581, double 0x3F81111111110BB3)
  %3583 = fneg double %3564
  %3584 = fmul double %.pn3.i.i1139, %3583
  %3585 = fmul double %.pn5.i.i1138, 5.000000e-01
  %3586 = tail call double @llvm.fma.f64(double %3584, double %3582, double %3585)
  %3587 = tail call double @llvm.fma.f64(double %3564, double %3586, double %3575)
  %3588 = tail call double @llvm.fma.f64(double %3584, double 0xBFC5555555555555, double %3587)
  %3589 = fsub double %.pn3.i.i1139, %3588
  %3590 = and i32 %.pn1.in.i.i1140, 1
  %3591 = icmp eq i32 %3590, 0
  %3592 = select i1 %3591, double %3589, double %3578
  %3593 = bitcast double %3592 to <2 x i32>
  %.pn1.i.i1141 = shl i32 %.pn1.in.i.i1140, 30
  %3594 = xor i32 %.pn1.i.i1141, %1194
  %3595 = and i32 %3594, -2147483648
  %3596 = extractelement <2 x i32> %3593, i64 1
  %3597 = xor i32 %3596, %3595
  %3598 = insertelement <2 x i32> %3593, i32 %3597, i64 1
  %3599 = select i1 %1195, <2 x i32> %3598, <2 x i32> <i32 0, i32 2146959360>
  %3600 = bitcast <2 x i32> %3599 to double
  %mul506 = fmul double %mul503, %3600
  %.pn5.i.i1144 = select i1 %1307, double %1404, double %1387
  %.pn3.i.i1145 = select i1 %1307, double %1402, double %1385
  %.pn1.in.i.i1146 = select i1 %1307, i32 %1405, i32 %1374
  %3601 = fmul double %.pn3.i.i1145, %.pn3.i.i1145
  %3602 = fmul double %3601, 5.000000e-01
  %3603 = fsub double 1.000000e+00, %3602
  %3604 = fsub double 1.000000e+00, %3603
  %3605 = fsub double %3604, %3602
  %3606 = fmul double %3601, %3601
  %3607 = tail call double @llvm.fma.f64(double %3601, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3608 = tail call double @llvm.fma.f64(double %3601, double %3607, double 0xBE927E4FA17F65F6)
  %3609 = tail call double @llvm.fma.f64(double %3601, double %3608, double 0x3EFA01A019F4EC90)
  %3610 = tail call double @llvm.fma.f64(double %3601, double %3609, double 0xBF56C16C16C16967)
  %3611 = tail call double @llvm.fma.f64(double %3601, double %3610, double 0x3FA5555555555555)
  %3612 = fneg double %.pn5.i.i1144
  %3613 = tail call double @llvm.fma.f64(double %.pn3.i.i1145, double %3612, double %3605)
  %3614 = tail call double @llvm.fma.f64(double %3606, double %3611, double %3613)
  %3615 = fadd double %3603, %3614
  %3616 = tail call double @llvm.fma.f64(double %3601, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3617 = tail call double @llvm.fma.f64(double %3601, double %3616, double 0x3EC71DE3796CDE01)
  %3618 = tail call double @llvm.fma.f64(double %3601, double %3617, double 0xBF2A01A019E83E5C)
  %3619 = tail call double @llvm.fma.f64(double %3601, double %3618, double 0x3F81111111110BB3)
  %3620 = fneg double %3601
  %3621 = fmul double %.pn3.i.i1145, %3620
  %3622 = fmul double %.pn5.i.i1144, 5.000000e-01
  %3623 = tail call double @llvm.fma.f64(double %3621, double %3619, double %3622)
  %3624 = tail call double @llvm.fma.f64(double %3601, double %3623, double %3612)
  %3625 = tail call double @llvm.fma.f64(double %3621, double 0xBFC5555555555555, double %3624)
  %3626 = fsub double %.pn3.i.i1145, %3625
  %3627 = and i32 %.pn1.in.i.i1146, 1
  %3628 = icmp eq i32 %3627, 0
  %3629 = select i1 %3628, double %3626, double %3615
  %3630 = bitcast double %3629 to <2 x i32>
  %.pn1.i.i1147 = shl i32 %.pn1.in.i.i1146, 30
  %3631 = xor i32 %.pn1.i.i1147, %1407
  %3632 = and i32 %3631, -2147483648
  %3633 = extractelement <2 x i32> %3630, i64 1
  %3634 = xor i32 %3633, %3632
  %3635 = insertelement <2 x i32> %3630, i32 %3634, i64 1
  %3636 = select i1 %1408, <2 x i32> %3635, <2 x i32> <i32 0, i32 2146959360>
  %3637 = bitcast <2 x i32> %3636 to double
  %3638 = fneg double %3637
  %fneg518 = fmul double %mul514, %3638
  %.pn5.i.i1150 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1151 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1152 = select i1 %1466, i32 %1564, i32 %1533
  %3639 = fmul double %.pn3.i.i1151, %.pn3.i.i1151
  %3640 = fmul double %3639, 5.000000e-01
  %3641 = fsub double 1.000000e+00, %3640
  %3642 = fsub double 1.000000e+00, %3641
  %3643 = fsub double %3642, %3640
  %3644 = fmul double %3639, %3639
  %3645 = tail call double @llvm.fma.f64(double %3639, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3646 = tail call double @llvm.fma.f64(double %3639, double %3645, double 0xBE927E4FA17F65F6)
  %3647 = tail call double @llvm.fma.f64(double %3639, double %3646, double 0x3EFA01A019F4EC90)
  %3648 = tail call double @llvm.fma.f64(double %3639, double %3647, double 0xBF56C16C16C16967)
  %3649 = tail call double @llvm.fma.f64(double %3639, double %3648, double 0x3FA5555555555555)
  %3650 = fneg double %.pn5.i.i1150
  %3651 = tail call double @llvm.fma.f64(double %.pn3.i.i1151, double %3650, double %3643)
  %3652 = tail call double @llvm.fma.f64(double %3644, double %3649, double %3651)
  %3653 = fadd double %3641, %3652
  %3654 = tail call double @llvm.fma.f64(double %3639, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3655 = tail call double @llvm.fma.f64(double %3639, double %3654, double 0x3EC71DE3796CDE01)
  %3656 = tail call double @llvm.fma.f64(double %3639, double %3655, double 0xBF2A01A019E83E5C)
  %3657 = tail call double @llvm.fma.f64(double %3639, double %3656, double 0x3F81111111110BB3)
  %3658 = fneg double %3639
  %3659 = fmul double %.pn3.i.i1151, %3658
  %3660 = fmul double %.pn5.i.i1150, 5.000000e-01
  %3661 = tail call double @llvm.fma.f64(double %3659, double %3657, double %3660)
  %3662 = tail call double @llvm.fma.f64(double %3639, double %3661, double %3650)
  %3663 = tail call double @llvm.fma.f64(double %3659, double 0xBFC5555555555555, double %3662)
  %3664 = fsub double %.pn3.i.i1151, %3663
  %3665 = and i32 %.pn1.in.i.i1152, 1
  %3666 = icmp eq i32 %3665, 0
  %3667 = select i1 %3666, double %3664, double %3653
  %3668 = bitcast double %3667 to <2 x i32>
  %.pn1.i.i1153 = shl i32 %.pn1.in.i.i1152, 30
  %3669 = xor i32 %.pn1.i.i1153, %1566
  %3670 = and i32 %3669, -2147483648
  %3671 = extractelement <2 x i32> %3668, i64 1
  %3672 = xor i32 %3671, %3670
  %3673 = insertelement <2 x i32> %3668, i32 %3672, i64 1
  %3674 = select i1 %1567, <2 x i32> %3673, <2 x i32> <i32 0, i32 2146959360>
  %3675 = bitcast <2 x i32> %3674 to double
  %mul531 = fmul double %mul528, %3675
  %.pn5.i.i1157 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1158 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1159 = select i1 %1680, i32 %1778, i32 %1747
  %3676 = fmul double %.pn3.i.i1158, %.pn3.i.i1158
  %3677 = fmul double %3676, 5.000000e-01
  %3678 = fsub double 1.000000e+00, %3677
  %3679 = fsub double 1.000000e+00, %3678
  %3680 = fsub double %3679, %3677
  %3681 = fmul double %3676, %3676
  %3682 = tail call double @llvm.fma.f64(double %3676, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3683 = tail call double @llvm.fma.f64(double %3676, double %3682, double 0xBE927E4FA17F65F6)
  %3684 = tail call double @llvm.fma.f64(double %3676, double %3683, double 0x3EFA01A019F4EC90)
  %3685 = tail call double @llvm.fma.f64(double %3676, double %3684, double 0xBF56C16C16C16967)
  %3686 = tail call double @llvm.fma.f64(double %3676, double %3685, double 0x3FA5555555555555)
  %3687 = fneg double %.pn5.i.i1157
  %3688 = tail call double @llvm.fma.f64(double %.pn3.i.i1158, double %3687, double %3680)
  %3689 = tail call double @llvm.fma.f64(double %3681, double %3686, double %3688)
  %3690 = fadd double %3678, %3689
  %3691 = tail call double @llvm.fma.f64(double %3676, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3692 = tail call double @llvm.fma.f64(double %3676, double %3691, double 0x3EC71DE3796CDE01)
  %3693 = tail call double @llvm.fma.f64(double %3676, double %3692, double 0xBF2A01A019E83E5C)
  %3694 = tail call double @llvm.fma.f64(double %3676, double %3693, double 0x3F81111111110BB3)
  %3695 = fneg double %3676
  %3696 = fmul double %.pn3.i.i1158, %3695
  %3697 = fmul double %.pn5.i.i1157, 5.000000e-01
  %3698 = tail call double @llvm.fma.f64(double %3696, double %3694, double %3697)
  %3699 = tail call double @llvm.fma.f64(double %3676, double %3698, double %3687)
  %3700 = tail call double @llvm.fma.f64(double %3696, double 0xBFC5555555555555, double %3699)
  %3701 = fsub double %.pn3.i.i1158, %3700
  %3702 = and i32 %.pn1.in.i.i1159, 1
  %3703 = icmp eq i32 %3702, 0
  %3704 = select i1 %3703, double %3701, double %3690
  %3705 = bitcast double %3704 to <2 x i32>
  %.pn1.i.i1160 = shl i32 %.pn1.in.i.i1159, 30
  %3706 = xor i32 %.pn1.i.i1160, %1780
  %3707 = and i32 %3706, -2147483648
  %3708 = extractelement <2 x i32> %3705, i64 1
  %3709 = xor i32 %3708, %3707
  %3710 = insertelement <2 x i32> %3705, i32 %3709, i64 1
  %3711 = select i1 %1781, <2 x i32> %3710, <2 x i32> <i32 0, i32 2146959360>
  %3712 = bitcast <2 x i32> %3711 to double
  %3713 = fneg double %3712
  %fneg547 = fmul double %mul543, %3713
  %.pn5.i.i1164 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1165 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1166 = select i1 %1840, i32 %1938, i32 %1907
  %3714 = fmul double %.pn3.i.i1165, %.pn3.i.i1165
  %3715 = fmul double %3714, 5.000000e-01
  %3716 = fsub double 1.000000e+00, %3715
  %3717 = fsub double 1.000000e+00, %3716
  %3718 = fsub double %3717, %3715
  %3719 = fmul double %3714, %3714
  %3720 = tail call double @llvm.fma.f64(double %3714, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3721 = tail call double @llvm.fma.f64(double %3714, double %3720, double 0xBE927E4FA17F65F6)
  %3722 = tail call double @llvm.fma.f64(double %3714, double %3721, double 0x3EFA01A019F4EC90)
  %3723 = tail call double @llvm.fma.f64(double %3714, double %3722, double 0xBF56C16C16C16967)
  %3724 = tail call double @llvm.fma.f64(double %3714, double %3723, double 0x3FA5555555555555)
  %3725 = fneg double %.pn5.i.i1164
  %3726 = tail call double @llvm.fma.f64(double %.pn3.i.i1165, double %3725, double %3718)
  %3727 = tail call double @llvm.fma.f64(double %3719, double %3724, double %3726)
  %3728 = fadd double %3716, %3727
  %3729 = tail call double @llvm.fma.f64(double %3714, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3730 = tail call double @llvm.fma.f64(double %3714, double %3729, double 0x3EC71DE3796CDE01)
  %3731 = tail call double @llvm.fma.f64(double %3714, double %3730, double 0xBF2A01A019E83E5C)
  %3732 = tail call double @llvm.fma.f64(double %3714, double %3731, double 0x3F81111111110BB3)
  %3733 = fneg double %3714
  %3734 = fmul double %.pn3.i.i1165, %3733
  %3735 = fmul double %.pn5.i.i1164, 5.000000e-01
  %3736 = tail call double @llvm.fma.f64(double %3734, double %3732, double %3735)
  %3737 = tail call double @llvm.fma.f64(double %3714, double %3736, double %3725)
  %3738 = tail call double @llvm.fma.f64(double %3734, double 0xBFC5555555555555, double %3737)
  %3739 = fsub double %.pn3.i.i1165, %3738
  %3740 = and i32 %.pn1.in.i.i1166, 1
  %3741 = icmp eq i32 %3740, 0
  %3742 = select i1 %3741, double %3739, double %3728
  %3743 = bitcast double %3742 to <2 x i32>
  %.pn1.i.i1167 = shl i32 %.pn1.in.i.i1166, 30
  %3744 = xor i32 %.pn1.i.i1167, %1940
  %3745 = and i32 %3744, -2147483648
  %3746 = extractelement <2 x i32> %3743, i64 1
  %3747 = xor i32 %3746, %3745
  %3748 = insertelement <2 x i32> %3743, i32 %3747, i64 1
  %3749 = select i1 %1941, <2 x i32> %3748, <2 x i32> <i32 0, i32 2146959360>
  %3750 = bitcast <2 x i32> %3749 to double
  %mul561 = fmul double %mul558, %3750
  %.pn5.i.i1171 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1172 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1173 = select i1 %2002, i32 %2100, i32 %2069
  %3751 = fmul double %.pn3.i.i1172, %.pn3.i.i1172
  %3752 = fmul double %3751, 5.000000e-01
  %3753 = fsub double 1.000000e+00, %3752
  %3754 = fsub double 1.000000e+00, %3753
  %3755 = fsub double %3754, %3752
  %3756 = fmul double %3751, %3751
  %3757 = tail call double @llvm.fma.f64(double %3751, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3758 = tail call double @llvm.fma.f64(double %3751, double %3757, double 0xBE927E4FA17F65F6)
  %3759 = tail call double @llvm.fma.f64(double %3751, double %3758, double 0x3EFA01A019F4EC90)
  %3760 = tail call double @llvm.fma.f64(double %3751, double %3759, double 0xBF56C16C16C16967)
  %3761 = tail call double @llvm.fma.f64(double %3751, double %3760, double 0x3FA5555555555555)
  %3762 = fneg double %.pn5.i.i1171
  %3763 = tail call double @llvm.fma.f64(double %.pn3.i.i1172, double %3762, double %3755)
  %3764 = tail call double @llvm.fma.f64(double %3756, double %3761, double %3763)
  %3765 = fadd double %3753, %3764
  %3766 = tail call double @llvm.fma.f64(double %3751, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3767 = tail call double @llvm.fma.f64(double %3751, double %3766, double 0x3EC71DE3796CDE01)
  %3768 = tail call double @llvm.fma.f64(double %3751, double %3767, double 0xBF2A01A019E83E5C)
  %3769 = tail call double @llvm.fma.f64(double %3751, double %3768, double 0x3F81111111110BB3)
  %3770 = fneg double %3751
  %3771 = fmul double %.pn3.i.i1172, %3770
  %3772 = fmul double %.pn5.i.i1171, 5.000000e-01
  %3773 = tail call double @llvm.fma.f64(double %3771, double %3769, double %3772)
  %3774 = tail call double @llvm.fma.f64(double %3751, double %3773, double %3762)
  %3775 = tail call double @llvm.fma.f64(double %3771, double 0xBFC5555555555555, double %3774)
  %3776 = fsub double %.pn3.i.i1172, %3775
  %3777 = and i32 %.pn1.in.i.i1173, 1
  %3778 = icmp eq i32 %3777, 0
  %3779 = select i1 %3778, double %3776, double %3765
  %3780 = bitcast double %3779 to <2 x i32>
  %.pn1.i.i1174 = shl i32 %.pn1.in.i.i1173, 30
  %3781 = xor i32 %.pn1.i.i1174, %2102
  %3782 = and i32 %3781, -2147483648
  %3783 = extractelement <2 x i32> %3780, i64 1
  %3784 = xor i32 %3783, %3782
  %3785 = insertelement <2 x i32> %3780, i32 %3784, i64 1
  %3786 = select i1 %2103, <2 x i32> %3785, <2 x i32> <i32 0, i32 2146959360>
  %3787 = bitcast <2 x i32> %3786 to double
  %3788 = fneg double %3787
  %fneg578 = fmul double %mul575, %3788
  %3789 = fneg double %3776
  %3790 = select i1 %3778, double %3765, double %3789
  %3791 = bitcast double %3790 to <2 x i32>
  %3792 = and i32 %.pn1.i.i1174, -2147483648
  %3793 = extractelement <2 x i32> %3791, i64 1
  %3794 = xor i32 %3793, %3792
  %3795 = insertelement <2 x i32> %3791, i32 %3794, i64 1
  %3796 = select i1 %2103, <2 x i32> %3795, <2 x i32> <i32 0, i32 2146959360>
  %3797 = bitcast <2 x i32> %3796 to double
  %3798 = fneg double %3797
  %fneg606 = fmul double %mul575, %3798
  %3799 = fneg double %3739
  %3800 = select i1 %3741, double %3728, double %3799
  %3801 = bitcast double %3800 to <2 x i32>
  %3802 = and i32 %.pn1.i.i1167, -2147483648
  %3803 = extractelement <2 x i32> %3801, i64 1
  %3804 = xor i32 %3803, %3802
  %3805 = insertelement <2 x i32> %3801, i32 %3804, i64 1
  %3806 = select i1 %1941, <2 x i32> %3805, <2 x i32> <i32 0, i32 2146959360>
  %3807 = bitcast <2 x i32> %3806 to double
  %mul620 = fmul double %mul558, %3807
  %3808 = fneg double %3701
  %3809 = select i1 %3703, double %3690, double %3808
  %3810 = bitcast double %3809 to <2 x i32>
  %3811 = and i32 %.pn1.i.i1160, -2147483648
  %3812 = extractelement <2 x i32> %3810, i64 1
  %3813 = xor i32 %3812, %3811
  %3814 = insertelement <2 x i32> %3810, i32 %3813, i64 1
  %3815 = select i1 %1781, <2 x i32> %3814, <2 x i32> <i32 0, i32 2146959360>
  %3816 = bitcast <2 x i32> %3815 to double
  %3817 = fneg double %3816
  %fneg636 = fmul double %mul543, %3817
  %3818 = fneg double %3664
  %3819 = select i1 %3666, double %3653, double %3818
  %3820 = bitcast double %3819 to <2 x i32>
  %3821 = and i32 %.pn1.i.i1153, -2147483648
  %3822 = extractelement <2 x i32> %3820, i64 1
  %3823 = xor i32 %3822, %3821
  %3824 = insertelement <2 x i32> %3820, i32 %3823, i64 1
  %3825 = select i1 %1567, <2 x i32> %3824, <2 x i32> <i32 0, i32 2146959360>
  %3826 = bitcast <2 x i32> %3825 to double
  %mul649 = fmul double %mul528, %3826
  %3827 = fneg double %3626
  %3828 = select i1 %3628, double %3615, double %3827
  %3829 = bitcast double %3828 to <2 x i32>
  %3830 = and i32 %.pn1.i.i1147, -2147483648
  %3831 = extractelement <2 x i32> %3829, i64 1
  %3832 = xor i32 %3831, %3830
  %3833 = insertelement <2 x i32> %3829, i32 %3832, i64 1
  %3834 = select i1 %1408, <2 x i32> %3833, <2 x i32> <i32 0, i32 2146959360>
  %3835 = bitcast <2 x i32> %3834 to double
  %3836 = fneg double %3835
  %fneg661 = fmul double %mul514, %3836
  %3837 = fneg double %3589
  %3838 = select i1 %3591, double %3578, double %3837
  %3839 = bitcast double %3838 to <2 x i32>
  %3840 = and i32 %.pn1.i.i1141, -2147483648
  %3841 = extractelement <2 x i32> %3839, i64 1
  %3842 = xor i32 %3841, %3840
  %3843 = insertelement <2 x i32> %3839, i32 %3842, i64 1
  %3844 = select i1 %1195, <2 x i32> %3843, <2 x i32> <i32 0, i32 2146959360>
  %3845 = bitcast <2 x i32> %3844 to double
  %mul670 = fmul double %mul503, %3845
  %3846 = fneg double %3551
  %3847 = select i1 %3553, double %3540, double %3846
  %3848 = bitcast double %3847 to <2 x i32>
  %3849 = and i32 %.pn1.i.i1135, -2147483648
  %3850 = extractelement <2 x i32> %3848, i64 1
  %3851 = xor i32 %3850, %3849
  %3852 = insertelement <2 x i32> %3848, i32 %3851, i64 1
  %3853 = select i1 %983, <2 x i32> %3852, <2 x i32> <i32 0, i32 2146959360>
  %3854 = bitcast <2 x i32> %3853 to double
  %3855 = fneg double %3854
  %fneg679 = fmul double %mul494, %3855
  %.1632 = select i1 %1094, double %1191, double %1174
  %.1633 = select i1 %1094, double %1189, double %1172
  %.1634 = select i1 %1094, i32 %1192, i32 %1161
  %3856 = fmul double %.1633, %.1633
  %3857 = fmul double %3856, 5.000000e-01
  %3858 = fsub double 1.000000e+00, %3857
  %3859 = fsub double 1.000000e+00, %3858
  %3860 = fsub double %3859, %3857
  %3861 = fmul double %3856, %3856
  %3862 = tail call double @llvm.fma.f64(double %3856, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3863 = tail call double @llvm.fma.f64(double %3856, double %3862, double 0xBE927E4FA17F65F6)
  %3864 = tail call double @llvm.fma.f64(double %3856, double %3863, double 0x3EFA01A019F4EC90)
  %3865 = tail call double @llvm.fma.f64(double %3856, double %3864, double 0xBF56C16C16C16967)
  %3866 = tail call double @llvm.fma.f64(double %3856, double %3865, double 0x3FA5555555555555)
  %3867 = fneg double %.1632
  %3868 = tail call double @llvm.fma.f64(double %.1633, double %3867, double %3860)
  %3869 = tail call double @llvm.fma.f64(double %3861, double %3866, double %3868)
  %3870 = fadd double %3858, %3869
  %3871 = tail call double @llvm.fma.f64(double %3856, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3872 = tail call double @llvm.fma.f64(double %3856, double %3871, double 0x3EC71DE3796CDE01)
  %3873 = tail call double @llvm.fma.f64(double %3856, double %3872, double 0xBF2A01A019E83E5C)
  %3874 = tail call double @llvm.fma.f64(double %3856, double %3873, double 0x3F81111111110BB3)
  %3875 = fneg double %3856
  %3876 = fmul double %.1633, %3875
  %3877 = fmul double %.1632, 5.000000e-01
  %3878 = tail call double @llvm.fma.f64(double %3876, double %3874, double %3877)
  %3879 = tail call double @llvm.fma.f64(double %3856, double %3878, double %3867)
  %3880 = tail call double @llvm.fma.f64(double %3876, double 0xBFC5555555555555, double %3879)
  %3881 = fsub double %.1633, %3880
  %3882 = and i32 %.1634, 1
  %3883 = icmp eq i32 %3882, 0
  %3884 = select i1 %3883, double %3881, double %3870
  %3885 = bitcast double %3884 to <2 x i32>
  %.pn1.i.i1059 = shl i32 %.1634, 30
  %3886 = xor i32 %.pn1.i.i1059, %1194
  %3887 = and i32 %3886, -2147483648
  %3888 = extractelement <2 x i32> %3885, i64 1
  %3889 = xor i32 %3888, %3887
  %3890 = insertelement <2 x i32> %3885, i32 %3889, i64 1
  %3891 = select i1 %1195, <2 x i32> %3890, <2 x i32> <i32 0, i32 2146959360>
  %3892 = bitcast <2 x i32> %3891 to double
  %mul342 = fmul double %mul339, %3892
  %.pn5.i.i1062 = select i1 %1307, double %1404, double %1387
  %.pn3.i.i1063 = select i1 %1307, double %1402, double %1385
  %.pn1.in.i.i1064 = select i1 %1307, i32 %1405, i32 %1374
  %3893 = fmul double %.pn3.i.i1063, %.pn3.i.i1063
  %3894 = fmul double %3893, 5.000000e-01
  %3895 = fsub double 1.000000e+00, %3894
  %3896 = fsub double 1.000000e+00, %3895
  %3897 = fsub double %3896, %3894
  %3898 = fmul double %3893, %3893
  %3899 = tail call double @llvm.fma.f64(double %3893, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3900 = tail call double @llvm.fma.f64(double %3893, double %3899, double 0xBE927E4FA17F65F6)
  %3901 = tail call double @llvm.fma.f64(double %3893, double %3900, double 0x3EFA01A019F4EC90)
  %3902 = tail call double @llvm.fma.f64(double %3893, double %3901, double 0xBF56C16C16C16967)
  %3903 = tail call double @llvm.fma.f64(double %3893, double %3902, double 0x3FA5555555555555)
  %3904 = fneg double %.pn5.i.i1062
  %3905 = tail call double @llvm.fma.f64(double %.pn3.i.i1063, double %3904, double %3897)
  %3906 = tail call double @llvm.fma.f64(double %3898, double %3903, double %3905)
  %3907 = fadd double %3895, %3906
  %3908 = tail call double @llvm.fma.f64(double %3893, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3909 = tail call double @llvm.fma.f64(double %3893, double %3908, double 0x3EC71DE3796CDE01)
  %3910 = tail call double @llvm.fma.f64(double %3893, double %3909, double 0xBF2A01A019E83E5C)
  %3911 = tail call double @llvm.fma.f64(double %3893, double %3910, double 0x3F81111111110BB3)
  %3912 = fneg double %3893
  %3913 = fmul double %.pn3.i.i1063, %3912
  %3914 = fmul double %.pn5.i.i1062, 5.000000e-01
  %3915 = tail call double @llvm.fma.f64(double %3913, double %3911, double %3914)
  %3916 = tail call double @llvm.fma.f64(double %3893, double %3915, double %3904)
  %3917 = tail call double @llvm.fma.f64(double %3913, double 0xBFC5555555555555, double %3916)
  %3918 = fsub double %.pn3.i.i1063, %3917
  %3919 = and i32 %.pn1.in.i.i1064, 1
  %3920 = icmp eq i32 %3919, 0
  %3921 = select i1 %3920, double %3918, double %3907
  %3922 = bitcast double %3921 to <2 x i32>
  %.pn1.i.i1065 = shl i32 %.pn1.in.i.i1064, 30
  %3923 = xor i32 %.pn1.i.i1065, %1407
  %3924 = and i32 %3923, -2147483648
  %3925 = extractelement <2 x i32> %3922, i64 1
  %3926 = xor i32 %3925, %3924
  %3927 = insertelement <2 x i32> %3922, i32 %3926, i64 1
  %3928 = select i1 %1408, <2 x i32> %3927, <2 x i32> <i32 0, i32 2146959360>
  %3929 = bitcast <2 x i32> %3928 to double
  %3930 = fneg double %3929
  %fneg351 = fmul double %mul347, %3930
  %.pn5.i.i1067 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1068 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1069 = select i1 %1466, i32 %1564, i32 %1533
  %3931 = fmul double %.pn3.i.i1068, %.pn3.i.i1068
  %3932 = fmul double %3931, 5.000000e-01
  %3933 = fsub double 1.000000e+00, %3932
  %3934 = fsub double 1.000000e+00, %3933
  %3935 = fsub double %3934, %3932
  %3936 = fmul double %3931, %3931
  %3937 = tail call double @llvm.fma.f64(double %3931, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3938 = tail call double @llvm.fma.f64(double %3931, double %3937, double 0xBE927E4FA17F65F6)
  %3939 = tail call double @llvm.fma.f64(double %3931, double %3938, double 0x3EFA01A019F4EC90)
  %3940 = tail call double @llvm.fma.f64(double %3931, double %3939, double 0xBF56C16C16C16967)
  %3941 = tail call double @llvm.fma.f64(double %3931, double %3940, double 0x3FA5555555555555)
  %3942 = fneg double %.pn5.i.i1067
  %3943 = tail call double @llvm.fma.f64(double %.pn3.i.i1068, double %3942, double %3935)
  %3944 = tail call double @llvm.fma.f64(double %3936, double %3941, double %3943)
  %3945 = fadd double %3933, %3944
  %3946 = tail call double @llvm.fma.f64(double %3931, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3947 = tail call double @llvm.fma.f64(double %3931, double %3946, double 0x3EC71DE3796CDE01)
  %3948 = tail call double @llvm.fma.f64(double %3931, double %3947, double 0xBF2A01A019E83E5C)
  %3949 = tail call double @llvm.fma.f64(double %3931, double %3948, double 0x3F81111111110BB3)
  %3950 = fneg double %3931
  %3951 = fmul double %.pn3.i.i1068, %3950
  %3952 = fmul double %.pn5.i.i1067, 5.000000e-01
  %3953 = tail call double @llvm.fma.f64(double %3951, double %3949, double %3952)
  %3954 = tail call double @llvm.fma.f64(double %3931, double %3953, double %3942)
  %3955 = tail call double @llvm.fma.f64(double %3951, double 0xBFC5555555555555, double %3954)
  %3956 = fsub double %.pn3.i.i1068, %3955
  %3957 = and i32 %.pn1.in.i.i1069, 1
  %3958 = icmp eq i32 %3957, 0
  %3959 = select i1 %3958, double %3956, double %3945
  %3960 = bitcast double %3959 to <2 x i32>
  %.pn1.i.i1070 = shl i32 %.pn1.in.i.i1069, 30
  %3961 = xor i32 %.pn1.i.i1070, %1566
  %3962 = and i32 %3961, -2147483648
  %3963 = extractelement <2 x i32> %3960, i64 1
  %3964 = xor i32 %3963, %3962
  %3965 = insertelement <2 x i32> %3960, i32 %3964, i64 1
  %3966 = select i1 %1567, <2 x i32> %3965, <2 x i32> <i32 0, i32 2146959360>
  %3967 = bitcast <2 x i32> %3966 to double
  %mul362 = fmul double %mul359, %3967
  %.pn5.i.i1074 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1075 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1076 = select i1 %1680, i32 %1778, i32 %1747
  %3968 = fmul double %.pn3.i.i1075, %.pn3.i.i1075
  %3969 = fmul double %3968, 5.000000e-01
  %3970 = fsub double 1.000000e+00, %3969
  %3971 = fsub double 1.000000e+00, %3970
  %3972 = fsub double %3971, %3969
  %3973 = fmul double %3968, %3968
  %3974 = tail call double @llvm.fma.f64(double %3968, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %3975 = tail call double @llvm.fma.f64(double %3968, double %3974, double 0xBE927E4FA17F65F6)
  %3976 = tail call double @llvm.fma.f64(double %3968, double %3975, double 0x3EFA01A019F4EC90)
  %3977 = tail call double @llvm.fma.f64(double %3968, double %3976, double 0xBF56C16C16C16967)
  %3978 = tail call double @llvm.fma.f64(double %3968, double %3977, double 0x3FA5555555555555)
  %3979 = fneg double %.pn5.i.i1074
  %3980 = tail call double @llvm.fma.f64(double %.pn3.i.i1075, double %3979, double %3972)
  %3981 = tail call double @llvm.fma.f64(double %3973, double %3978, double %3980)
  %3982 = fadd double %3970, %3981
  %3983 = tail call double @llvm.fma.f64(double %3968, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %3984 = tail call double @llvm.fma.f64(double %3968, double %3983, double 0x3EC71DE3796CDE01)
  %3985 = tail call double @llvm.fma.f64(double %3968, double %3984, double 0xBF2A01A019E83E5C)
  %3986 = tail call double @llvm.fma.f64(double %3968, double %3985, double 0x3F81111111110BB3)
  %3987 = fneg double %3968
  %3988 = fmul double %.pn3.i.i1075, %3987
  %3989 = fmul double %.pn5.i.i1074, 5.000000e-01
  %3990 = tail call double @llvm.fma.f64(double %3988, double %3986, double %3989)
  %3991 = tail call double @llvm.fma.f64(double %3968, double %3990, double %3979)
  %3992 = tail call double @llvm.fma.f64(double %3988, double 0xBFC5555555555555, double %3991)
  %3993 = fsub double %.pn3.i.i1075, %3992
  %3994 = and i32 %.pn1.in.i.i1076, 1
  %3995 = icmp eq i32 %3994, 0
  %3996 = select i1 %3995, double %3993, double %3982
  %3997 = bitcast double %3996 to <2 x i32>
  %.pn1.i.i1077 = shl i32 %.pn1.in.i.i1076, 30
  %3998 = xor i32 %.pn1.i.i1077, %1780
  %3999 = and i32 %3998, -2147483648
  %4000 = extractelement <2 x i32> %3997, i64 1
  %4001 = xor i32 %4000, %3999
  %4002 = insertelement <2 x i32> %3997, i32 %4001, i64 1
  %4003 = select i1 %1781, <2 x i32> %4002, <2 x i32> <i32 0, i32 2146959360>
  %4004 = bitcast <2 x i32> %4003 to double
  %4005 = fneg double %4004
  %fneg376 = fmul double %mul372, %4005
  %.pn5.i.i1080 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1081 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1082 = select i1 %1840, i32 %1938, i32 %1907
  %4006 = fmul double %.pn3.i.i1081, %.pn3.i.i1081
  %4007 = fmul double %4006, 5.000000e-01
  %4008 = fsub double 1.000000e+00, %4007
  %4009 = fsub double 1.000000e+00, %4008
  %4010 = fsub double %4009, %4007
  %4011 = fmul double %4006, %4006
  %4012 = tail call double @llvm.fma.f64(double %4006, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4013 = tail call double @llvm.fma.f64(double %4006, double %4012, double 0xBE927E4FA17F65F6)
  %4014 = tail call double @llvm.fma.f64(double %4006, double %4013, double 0x3EFA01A019F4EC90)
  %4015 = tail call double @llvm.fma.f64(double %4006, double %4014, double 0xBF56C16C16C16967)
  %4016 = tail call double @llvm.fma.f64(double %4006, double %4015, double 0x3FA5555555555555)
  %4017 = fneg double %.pn5.i.i1080
  %4018 = tail call double @llvm.fma.f64(double %.pn3.i.i1081, double %4017, double %4010)
  %4019 = tail call double @llvm.fma.f64(double %4011, double %4016, double %4018)
  %4020 = fadd double %4008, %4019
  %4021 = tail call double @llvm.fma.f64(double %4006, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4022 = tail call double @llvm.fma.f64(double %4006, double %4021, double 0x3EC71DE3796CDE01)
  %4023 = tail call double @llvm.fma.f64(double %4006, double %4022, double 0xBF2A01A019E83E5C)
  %4024 = tail call double @llvm.fma.f64(double %4006, double %4023, double 0x3F81111111110BB3)
  %4025 = fneg double %4006
  %4026 = fmul double %.pn3.i.i1081, %4025
  %4027 = fmul double %.pn5.i.i1080, 5.000000e-01
  %4028 = tail call double @llvm.fma.f64(double %4026, double %4024, double %4027)
  %4029 = tail call double @llvm.fma.f64(double %4006, double %4028, double %4017)
  %4030 = tail call double @llvm.fma.f64(double %4026, double 0xBFC5555555555555, double %4029)
  %4031 = fsub double %.pn3.i.i1081, %4030
  %4032 = and i32 %.pn1.in.i.i1082, 1
  %4033 = icmp eq i32 %4032, 0
  %4034 = select i1 %4033, double %4031, double %4020
  %4035 = bitcast double %4034 to <2 x i32>
  %.pn1.i.i1083 = shl i32 %.pn1.in.i.i1082, 30
  %4036 = xor i32 %.pn1.i.i1083, %1940
  %4037 = and i32 %4036, -2147483648
  %4038 = extractelement <2 x i32> %4035, i64 1
  %4039 = xor i32 %4038, %4037
  %4040 = insertelement <2 x i32> %4035, i32 %4039, i64 1
  %4041 = select i1 %1941, <2 x i32> %4040, <2 x i32> <i32 0, i32 2146959360>
  %4042 = bitcast <2 x i32> %4041 to double
  %mul390 = fmul double %mul387, %4042
  %.pn5.i.i1087 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1088 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1089 = select i1 %2002, i32 %2100, i32 %2069
  %4043 = fmul double %.pn3.i.i1088, %.pn3.i.i1088
  %4044 = fmul double %4043, 5.000000e-01
  %4045 = fsub double 1.000000e+00, %4044
  %4046 = fsub double 1.000000e+00, %4045
  %4047 = fsub double %4046, %4044
  %4048 = fmul double %4043, %4043
  %4049 = tail call double @llvm.fma.f64(double %4043, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4050 = tail call double @llvm.fma.f64(double %4043, double %4049, double 0xBE927E4FA17F65F6)
  %4051 = tail call double @llvm.fma.f64(double %4043, double %4050, double 0x3EFA01A019F4EC90)
  %4052 = tail call double @llvm.fma.f64(double %4043, double %4051, double 0xBF56C16C16C16967)
  %4053 = tail call double @llvm.fma.f64(double %4043, double %4052, double 0x3FA5555555555555)
  %4054 = fneg double %.pn5.i.i1087
  %4055 = tail call double @llvm.fma.f64(double %.pn3.i.i1088, double %4054, double %4047)
  %4056 = tail call double @llvm.fma.f64(double %4048, double %4053, double %4055)
  %4057 = fadd double %4045, %4056
  %4058 = tail call double @llvm.fma.f64(double %4043, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4059 = tail call double @llvm.fma.f64(double %4043, double %4058, double 0x3EC71DE3796CDE01)
  %4060 = tail call double @llvm.fma.f64(double %4043, double %4059, double 0xBF2A01A019E83E5C)
  %4061 = tail call double @llvm.fma.f64(double %4043, double %4060, double 0x3F81111111110BB3)
  %4062 = fneg double %4043
  %4063 = fmul double %.pn3.i.i1088, %4062
  %4064 = fmul double %.pn5.i.i1087, 5.000000e-01
  %4065 = tail call double @llvm.fma.f64(double %4063, double %4061, double %4064)
  %4066 = tail call double @llvm.fma.f64(double %4043, double %4065, double %4054)
  %4067 = tail call double @llvm.fma.f64(double %4063, double 0xBFC5555555555555, double %4066)
  %4068 = fsub double %.pn3.i.i1088, %4067
  %4069 = and i32 %.pn1.in.i.i1089, 1
  %4070 = icmp eq i32 %4069, 0
  %4071 = select i1 %4070, double %4068, double %4057
  %4072 = bitcast double %4071 to <2 x i32>
  %.pn1.i.i1090 = shl i32 %.pn1.in.i.i1089, 30
  %4073 = xor i32 %.pn1.i.i1090, %2102
  %4074 = and i32 %4073, -2147483648
  %4075 = extractelement <2 x i32> %4072, i64 1
  %4076 = xor i32 %4075, %4074
  %4077 = insertelement <2 x i32> %4072, i32 %4076, i64 1
  %4078 = select i1 %2103, <2 x i32> %4077, <2 x i32> <i32 0, i32 2146959360>
  %4079 = bitcast <2 x i32> %4078 to double
  %4080 = fneg double %4079
  %fneg405 = fmul double %mul402, %4080
  %4081 = fneg double %4068
  %4082 = select i1 %4070, double %4057, double %4081
  %4083 = bitcast double %4082 to <2 x i32>
  %4084 = and i32 %.pn1.i.i1090, -2147483648
  %4085 = extractelement <2 x i32> %4083, i64 1
  %4086 = xor i32 %4085, %4084
  %4087 = insertelement <2 x i32> %4083, i32 %4086, i64 1
  %4088 = select i1 %2103, <2 x i32> %4087, <2 x i32> <i32 0, i32 2146959360>
  %4089 = bitcast <2 x i32> %4088 to double
  %4090 = fneg double %4089
  %fneg431 = fmul double %mul402, %4090
  %4091 = fneg double %4031
  %4092 = select i1 %4033, double %4020, double %4091
  %4093 = bitcast double %4092 to <2 x i32>
  %4094 = and i32 %.pn1.i.i1083, -2147483648
  %4095 = extractelement <2 x i32> %4093, i64 1
  %4096 = xor i32 %4095, %4094
  %4097 = insertelement <2 x i32> %4093, i32 %4096, i64 1
  %4098 = select i1 %1941, <2 x i32> %4097, <2 x i32> <i32 0, i32 2146959360>
  %4099 = bitcast <2 x i32> %4098 to double
  %mul445 = fmul double %mul387, %4099
  %4100 = fneg double %3993
  %4101 = select i1 %3995, double %3982, double %4100
  %4102 = bitcast double %4101 to <2 x i32>
  %4103 = and i32 %.pn1.i.i1077, -2147483648
  %4104 = extractelement <2 x i32> %4102, i64 1
  %4105 = xor i32 %4104, %4103
  %4106 = insertelement <2 x i32> %4102, i32 %4105, i64 1
  %4107 = select i1 %1781, <2 x i32> %4106, <2 x i32> <i32 0, i32 2146959360>
  %4108 = bitcast <2 x i32> %4107 to double
  %4109 = fneg double %4108
  %fneg459 = fmul double %mul372, %4109
  %4110 = fneg double %3956
  %4111 = select i1 %3958, double %3945, double %4110
  %4112 = bitcast double %4111 to <2 x i32>
  %4113 = and i32 %.pn1.i.i1070, -2147483648
  %4114 = extractelement <2 x i32> %4112, i64 1
  %4115 = xor i32 %4114, %4113
  %4116 = insertelement <2 x i32> %4112, i32 %4115, i64 1
  %4117 = select i1 %1567, <2 x i32> %4116, <2 x i32> <i32 0, i32 2146959360>
  %4118 = bitcast <2 x i32> %4117 to double
  %mul470 = fmul double %mul359, %4118
  %4119 = fneg double %3918
  %4120 = select i1 %3920, double %3907, double %4119
  %4121 = bitcast double %4120 to <2 x i32>
  %4122 = and i32 %.pn1.i.i1065, -2147483648
  %4123 = extractelement <2 x i32> %4121, i64 1
  %4124 = xor i32 %4123, %4122
  %4125 = insertelement <2 x i32> %4121, i32 %4124, i64 1
  %4126 = select i1 %1408, <2 x i32> %4125, <2 x i32> <i32 0, i32 2146959360>
  %4127 = bitcast <2 x i32> %4126 to double
  %4128 = fneg double %4127
  %fneg480 = fmul double %mul347, %4128
  %4129 = fneg double %3881
  %4130 = select i1 %3883, double %3870, double %4129
  %4131 = bitcast double %4130 to <2 x i32>
  %4132 = and i32 %.pn1.i.i1059, -2147483648
  %4133 = extractelement <2 x i32> %4131, i64 1
  %4134 = xor i32 %4133, %4132
  %4135 = insertelement <2 x i32> %4131, i32 %4134, i64 1
  %4136 = select i1 %1195, <2 x i32> %4135, <2 x i32> <i32 0, i32 2146959360>
  %4137 = bitcast <2 x i32> %4136 to double
  %mul488 = fmul double %mul339, %4137
  %.1629 = select i1 %1307, double %1404, double %1387
  %.1630 = select i1 %1307, double %1402, double %1385
  %.1631 = select i1 %1307, i32 %1405, i32 %1374
  %4138 = fmul double %.1630, %.1630
  %4139 = fmul double %4138, 5.000000e-01
  %4140 = fsub double 1.000000e+00, %4139
  %4141 = fsub double 1.000000e+00, %4140
  %4142 = fsub double %4141, %4139
  %4143 = fmul double %4138, %4138
  %4144 = tail call double @llvm.fma.f64(double %4138, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4145 = tail call double @llvm.fma.f64(double %4138, double %4144, double 0xBE927E4FA17F65F6)
  %4146 = tail call double @llvm.fma.f64(double %4138, double %4145, double 0x3EFA01A019F4EC90)
  %4147 = tail call double @llvm.fma.f64(double %4138, double %4146, double 0xBF56C16C16C16967)
  %4148 = tail call double @llvm.fma.f64(double %4138, double %4147, double 0x3FA5555555555555)
  %4149 = fneg double %.1629
  %4150 = tail call double @llvm.fma.f64(double %.1630, double %4149, double %4142)
  %4151 = tail call double @llvm.fma.f64(double %4143, double %4148, double %4150)
  %4152 = fadd double %4140, %4151
  %4153 = tail call double @llvm.fma.f64(double %4138, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4154 = tail call double @llvm.fma.f64(double %4138, double %4153, double 0x3EC71DE3796CDE01)
  %4155 = tail call double @llvm.fma.f64(double %4138, double %4154, double 0xBF2A01A019E83E5C)
  %4156 = tail call double @llvm.fma.f64(double %4138, double %4155, double 0x3F81111111110BB3)
  %4157 = fneg double %4138
  %4158 = fmul double %.1630, %4157
  %4159 = fmul double %.1629, 5.000000e-01
  %4160 = tail call double @llvm.fma.f64(double %4158, double %4156, double %4159)
  %4161 = tail call double @llvm.fma.f64(double %4138, double %4160, double %4149)
  %4162 = tail call double @llvm.fma.f64(double %4158, double 0xBFC5555555555555, double %4161)
  %4163 = fsub double %.1630, %4162
  %4164 = and i32 %.1631, 1
  %4165 = icmp eq i32 %4164, 0
  %4166 = select i1 %4165, double %4163, double %4152
  %4167 = bitcast double %4166 to <2 x i32>
  %.pn1.i.i999 = shl i32 %.1631, 30
  %4168 = xor i32 %.pn1.i.i999, %1407
  %4169 = and i32 %4168, -2147483648
  %4170 = extractelement <2 x i32> %4167, i64 1
  %4171 = xor i32 %4170, %4169
  %4172 = insertelement <2 x i32> %4167, i32 %4171, i64 1
  %4173 = select i1 %1408, <2 x i32> %4172, <2 x i32> <i32 0, i32 2146959360>
  %4174 = bitcast <2 x i32> %4173 to double
  %4175 = fneg double %4174
  %fneg220 = fmul double %mul216, %4175
  %.pn5.i.i1001 = select i1 %1466, double %1563, double %1546
  %.pn3.i.i1002 = select i1 %1466, double %1561, double %1544
  %.pn1.in.i.i1003 = select i1 %1466, i32 %1564, i32 %1533
  %4176 = fmul double %.pn3.i.i1002, %.pn3.i.i1002
  %4177 = fmul double %4176, 5.000000e-01
  %4178 = fsub double 1.000000e+00, %4177
  %4179 = fsub double 1.000000e+00, %4178
  %4180 = fsub double %4179, %4177
  %4181 = fmul double %4176, %4176
  %4182 = tail call double @llvm.fma.f64(double %4176, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4183 = tail call double @llvm.fma.f64(double %4176, double %4182, double 0xBE927E4FA17F65F6)
  %4184 = tail call double @llvm.fma.f64(double %4176, double %4183, double 0x3EFA01A019F4EC90)
  %4185 = tail call double @llvm.fma.f64(double %4176, double %4184, double 0xBF56C16C16C16967)
  %4186 = tail call double @llvm.fma.f64(double %4176, double %4185, double 0x3FA5555555555555)
  %4187 = fneg double %.pn5.i.i1001
  %4188 = tail call double @llvm.fma.f64(double %.pn3.i.i1002, double %4187, double %4180)
  %4189 = tail call double @llvm.fma.f64(double %4181, double %4186, double %4188)
  %4190 = fadd double %4178, %4189
  %4191 = tail call double @llvm.fma.f64(double %4176, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4192 = tail call double @llvm.fma.f64(double %4176, double %4191, double 0x3EC71DE3796CDE01)
  %4193 = tail call double @llvm.fma.f64(double %4176, double %4192, double 0xBF2A01A019E83E5C)
  %4194 = tail call double @llvm.fma.f64(double %4176, double %4193, double 0x3F81111111110BB3)
  %4195 = fneg double %4176
  %4196 = fmul double %.pn3.i.i1002, %4195
  %4197 = fmul double %.pn5.i.i1001, 5.000000e-01
  %4198 = tail call double @llvm.fma.f64(double %4196, double %4194, double %4197)
  %4199 = tail call double @llvm.fma.f64(double %4176, double %4198, double %4187)
  %4200 = tail call double @llvm.fma.f64(double %4196, double 0xBFC5555555555555, double %4199)
  %4201 = fsub double %.pn3.i.i1002, %4200
  %4202 = and i32 %.pn1.in.i.i1003, 1
  %4203 = icmp eq i32 %4202, 0
  %4204 = select i1 %4203, double %4201, double %4190
  %4205 = bitcast double %4204 to <2 x i32>
  %.pn1.i.i1004 = shl i32 %.pn1.in.i.i1003, 30
  %4206 = xor i32 %.pn1.i.i1004, %1566
  %4207 = and i32 %4206, -2147483648
  %4208 = extractelement <2 x i32> %4205, i64 1
  %4209 = xor i32 %4208, %4207
  %4210 = insertelement <2 x i32> %4205, i32 %4209, i64 1
  %4211 = select i1 %1567, <2 x i32> %4210, <2 x i32> <i32 0, i32 2146959360>
  %4212 = bitcast <2 x i32> %4211 to double
  %mul228 = fmul double %mul225, %4212
  %.pn5.i.i1007 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i1008 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i1009 = select i1 %1680, i32 %1778, i32 %1747
  %4213 = fmul double %.pn3.i.i1008, %.pn3.i.i1008
  %4214 = fmul double %4213, 5.000000e-01
  %4215 = fsub double 1.000000e+00, %4214
  %4216 = fsub double 1.000000e+00, %4215
  %4217 = fsub double %4216, %4214
  %4218 = fmul double %4213, %4213
  %4219 = tail call double @llvm.fma.f64(double %4213, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4220 = tail call double @llvm.fma.f64(double %4213, double %4219, double 0xBE927E4FA17F65F6)
  %4221 = tail call double @llvm.fma.f64(double %4213, double %4220, double 0x3EFA01A019F4EC90)
  %4222 = tail call double @llvm.fma.f64(double %4213, double %4221, double 0xBF56C16C16C16967)
  %4223 = tail call double @llvm.fma.f64(double %4213, double %4222, double 0x3FA5555555555555)
  %4224 = fneg double %.pn5.i.i1007
  %4225 = tail call double @llvm.fma.f64(double %.pn3.i.i1008, double %4224, double %4217)
  %4226 = tail call double @llvm.fma.f64(double %4218, double %4223, double %4225)
  %4227 = fadd double %4215, %4226
  %4228 = tail call double @llvm.fma.f64(double %4213, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4229 = tail call double @llvm.fma.f64(double %4213, double %4228, double 0x3EC71DE3796CDE01)
  %4230 = tail call double @llvm.fma.f64(double %4213, double %4229, double 0xBF2A01A019E83E5C)
  %4231 = tail call double @llvm.fma.f64(double %4213, double %4230, double 0x3F81111111110BB3)
  %4232 = fneg double %4213
  %4233 = fmul double %.pn3.i.i1008, %4232
  %4234 = fmul double %.pn5.i.i1007, 5.000000e-01
  %4235 = tail call double @llvm.fma.f64(double %4233, double %4231, double %4234)
  %4236 = tail call double @llvm.fma.f64(double %4213, double %4235, double %4224)
  %4237 = tail call double @llvm.fma.f64(double %4233, double 0xBFC5555555555555, double %4236)
  %4238 = fsub double %.pn3.i.i1008, %4237
  %4239 = and i32 %.pn1.in.i.i1009, 1
  %4240 = icmp eq i32 %4239, 0
  %4241 = select i1 %4240, double %4238, double %4227
  %4242 = bitcast double %4241 to <2 x i32>
  %.pn1.i.i1010 = shl i32 %.pn1.in.i.i1009, 30
  %4243 = xor i32 %.pn1.i.i1010, %1780
  %4244 = and i32 %4243, -2147483648
  %4245 = extractelement <2 x i32> %4242, i64 1
  %4246 = xor i32 %4245, %4244
  %4247 = insertelement <2 x i32> %4242, i32 %4246, i64 1
  %4248 = select i1 %1781, <2 x i32> %4247, <2 x i32> <i32 0, i32 2146959360>
  %4249 = bitcast <2 x i32> %4248 to double
  %4250 = fneg double %4249
  %fneg240 = fmul double %mul236, %4250
  %.pn5.i.i1013 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i1014 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i1015 = select i1 %1840, i32 %1938, i32 %1907
  %4251 = fmul double %.pn3.i.i1014, %.pn3.i.i1014
  %4252 = fmul double %4251, 5.000000e-01
  %4253 = fsub double 1.000000e+00, %4252
  %4254 = fsub double 1.000000e+00, %4253
  %4255 = fsub double %4254, %4252
  %4256 = fmul double %4251, %4251
  %4257 = tail call double @llvm.fma.f64(double %4251, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4258 = tail call double @llvm.fma.f64(double %4251, double %4257, double 0xBE927E4FA17F65F6)
  %4259 = tail call double @llvm.fma.f64(double %4251, double %4258, double 0x3EFA01A019F4EC90)
  %4260 = tail call double @llvm.fma.f64(double %4251, double %4259, double 0xBF56C16C16C16967)
  %4261 = tail call double @llvm.fma.f64(double %4251, double %4260, double 0x3FA5555555555555)
  %4262 = fneg double %.pn5.i.i1013
  %4263 = tail call double @llvm.fma.f64(double %.pn3.i.i1014, double %4262, double %4255)
  %4264 = tail call double @llvm.fma.f64(double %4256, double %4261, double %4263)
  %4265 = fadd double %4253, %4264
  %4266 = tail call double @llvm.fma.f64(double %4251, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4267 = tail call double @llvm.fma.f64(double %4251, double %4266, double 0x3EC71DE3796CDE01)
  %4268 = tail call double @llvm.fma.f64(double %4251, double %4267, double 0xBF2A01A019E83E5C)
  %4269 = tail call double @llvm.fma.f64(double %4251, double %4268, double 0x3F81111111110BB3)
  %4270 = fneg double %4251
  %4271 = fmul double %.pn3.i.i1014, %4270
  %4272 = fmul double %.pn5.i.i1013, 5.000000e-01
  %4273 = tail call double @llvm.fma.f64(double %4271, double %4269, double %4272)
  %4274 = tail call double @llvm.fma.f64(double %4251, double %4273, double %4262)
  %4275 = tail call double @llvm.fma.f64(double %4271, double 0xBFC5555555555555, double %4274)
  %4276 = fsub double %.pn3.i.i1014, %4275
  %4277 = and i32 %.pn1.in.i.i1015, 1
  %4278 = icmp eq i32 %4277, 0
  %4279 = select i1 %4278, double %4276, double %4265
  %4280 = bitcast double %4279 to <2 x i32>
  %.pn1.i.i1016 = shl i32 %.pn1.in.i.i1015, 30
  %4281 = xor i32 %.pn1.i.i1016, %1940
  %4282 = and i32 %4281, -2147483648
  %4283 = extractelement <2 x i32> %4280, i64 1
  %4284 = xor i32 %4283, %4282
  %4285 = insertelement <2 x i32> %4280, i32 %4284, i64 1
  %4286 = select i1 %1941, <2 x i32> %4285, <2 x i32> <i32 0, i32 2146959360>
  %4287 = bitcast <2 x i32> %4286 to double
  %mul252 = fmul double %mul249, %4287
  %.pn5.i.i1019 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i1020 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i1021 = select i1 %2002, i32 %2100, i32 %2069
  %4288 = fmul double %.pn3.i.i1020, %.pn3.i.i1020
  %4289 = fmul double %4288, 5.000000e-01
  %4290 = fsub double 1.000000e+00, %4289
  %4291 = fsub double 1.000000e+00, %4290
  %4292 = fsub double %4291, %4289
  %4293 = fmul double %4288, %4288
  %4294 = tail call double @llvm.fma.f64(double %4288, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4295 = tail call double @llvm.fma.f64(double %4288, double %4294, double 0xBE927E4FA17F65F6)
  %4296 = tail call double @llvm.fma.f64(double %4288, double %4295, double 0x3EFA01A019F4EC90)
  %4297 = tail call double @llvm.fma.f64(double %4288, double %4296, double 0xBF56C16C16C16967)
  %4298 = tail call double @llvm.fma.f64(double %4288, double %4297, double 0x3FA5555555555555)
  %4299 = fneg double %.pn5.i.i1019
  %4300 = tail call double @llvm.fma.f64(double %.pn3.i.i1020, double %4299, double %4292)
  %4301 = tail call double @llvm.fma.f64(double %4293, double %4298, double %4300)
  %4302 = fadd double %4290, %4301
  %4303 = tail call double @llvm.fma.f64(double %4288, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4304 = tail call double @llvm.fma.f64(double %4288, double %4303, double 0x3EC71DE3796CDE01)
  %4305 = tail call double @llvm.fma.f64(double %4288, double %4304, double 0xBF2A01A019E83E5C)
  %4306 = tail call double @llvm.fma.f64(double %4288, double %4305, double 0x3F81111111110BB3)
  %4307 = fneg double %4288
  %4308 = fmul double %.pn3.i.i1020, %4307
  %4309 = fmul double %.pn5.i.i1019, 5.000000e-01
  %4310 = tail call double @llvm.fma.f64(double %4308, double %4306, double %4309)
  %4311 = tail call double @llvm.fma.f64(double %4288, double %4310, double %4299)
  %4312 = tail call double @llvm.fma.f64(double %4308, double 0xBFC5555555555555, double %4311)
  %4313 = fsub double %.pn3.i.i1020, %4312
  %4314 = and i32 %.pn1.in.i.i1021, 1
  %4315 = icmp eq i32 %4314, 0
  %4316 = select i1 %4315, double %4313, double %4302
  %4317 = bitcast double %4316 to <2 x i32>
  %.pn1.i.i1022 = shl i32 %.pn1.in.i.i1021, 30
  %4318 = xor i32 %.pn1.i.i1022, %2102
  %4319 = and i32 %4318, -2147483648
  %4320 = extractelement <2 x i32> %4317, i64 1
  %4321 = xor i32 %4320, %4319
  %4322 = insertelement <2 x i32> %4317, i32 %4321, i64 1
  %4323 = select i1 %2103, <2 x i32> %4322, <2 x i32> <i32 0, i32 2146959360>
  %4324 = bitcast <2 x i32> %4323 to double
  %4325 = fneg double %4324
  %fneg267 = fmul double %mul264, %4325
  %4326 = fneg double %4313
  %4327 = select i1 %4315, double %4302, double %4326
  %4328 = bitcast double %4327 to <2 x i32>
  %4329 = and i32 %.pn1.i.i1022, -2147483648
  %4330 = extractelement <2 x i32> %4328, i64 1
  %4331 = xor i32 %4330, %4329
  %4332 = insertelement <2 x i32> %4328, i32 %4331, i64 1
  %4333 = select i1 %2103, <2 x i32> %4332, <2 x i32> <i32 0, i32 2146959360>
  %4334 = bitcast <2 x i32> %4333 to double
  %4335 = fneg double %4334
  %fneg291 = fmul double %mul264, %4335
  %4336 = fneg double %4276
  %4337 = select i1 %4278, double %4265, double %4336
  %4338 = bitcast double %4337 to <2 x i32>
  %4339 = and i32 %.pn1.i.i1016, -2147483648
  %4340 = extractelement <2 x i32> %4338, i64 1
  %4341 = xor i32 %4340, %4339
  %4342 = insertelement <2 x i32> %4338, i32 %4341, i64 1
  %4343 = select i1 %1941, <2 x i32> %4342, <2 x i32> <i32 0, i32 2146959360>
  %4344 = bitcast <2 x i32> %4343 to double
  %mul303 = fmul double %mul249, %4344
  %4345 = fneg double %4238
  %4346 = select i1 %4240, double %4227, double %4345
  %4347 = bitcast double %4346 to <2 x i32>
  %4348 = and i32 %.pn1.i.i1010, -2147483648
  %4349 = extractelement <2 x i32> %4347, i64 1
  %4350 = xor i32 %4349, %4348
  %4351 = insertelement <2 x i32> %4347, i32 %4350, i64 1
  %4352 = select i1 %1781, <2 x i32> %4351, <2 x i32> <i32 0, i32 2146959360>
  %4353 = bitcast <2 x i32> %4352 to double
  %4354 = fneg double %4353
  %fneg315 = fmul double %mul236, %4354
  %4355 = fneg double %4201
  %4356 = select i1 %4203, double %4190, double %4355
  %4357 = bitcast double %4356 to <2 x i32>
  %4358 = and i32 %.pn1.i.i1004, -2147483648
  %4359 = extractelement <2 x i32> %4357, i64 1
  %4360 = xor i32 %4359, %4358
  %4361 = insertelement <2 x i32> %4357, i32 %4360, i64 1
  %4362 = select i1 %1567, <2 x i32> %4361, <2 x i32> <i32 0, i32 2146959360>
  %4363 = bitcast <2 x i32> %4362 to double
  %mul324 = fmul double %mul225, %4363
  %4364 = fneg double %4163
  %4365 = select i1 %4165, double %4152, double %4364
  %4366 = bitcast double %4365 to <2 x i32>
  %4367 = and i32 %.pn1.i.i999, -2147483648
  %4368 = extractelement <2 x i32> %4366, i64 1
  %4369 = xor i32 %4368, %4367
  %4370 = insertelement <2 x i32> %4366, i32 %4369, i64 1
  %4371 = select i1 %1408, <2 x i32> %4370, <2 x i32> <i32 0, i32 2146959360>
  %4372 = bitcast <2 x i32> %4371 to double
  %4373 = fneg double %4372
  %fneg333 = fmul double %mul216, %4373
  %.1626 = select i1 %1466, double %1563, double %1546
  %.1627 = select i1 %1466, double %1561, double %1544
  %.1628 = select i1 %1466, i32 %1564, i32 %1533
  %4374 = fmul double %.1627, %.1627
  %4375 = fmul double %4374, 5.000000e-01
  %4376 = fsub double 1.000000e+00, %4375
  %4377 = fsub double 1.000000e+00, %4376
  %4378 = fsub double %4377, %4375
  %4379 = fmul double %4374, %4374
  %4380 = tail call double @llvm.fma.f64(double %4374, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4381 = tail call double @llvm.fma.f64(double %4374, double %4380, double 0xBE927E4FA17F65F6)
  %4382 = tail call double @llvm.fma.f64(double %4374, double %4381, double 0x3EFA01A019F4EC90)
  %4383 = tail call double @llvm.fma.f64(double %4374, double %4382, double 0xBF56C16C16C16967)
  %4384 = tail call double @llvm.fma.f64(double %4374, double %4383, double 0x3FA5555555555555)
  %4385 = fneg double %.1626
  %4386 = tail call double @llvm.fma.f64(double %.1627, double %4385, double %4378)
  %4387 = tail call double @llvm.fma.f64(double %4379, double %4384, double %4386)
  %4388 = fadd double %4376, %4387
  %4389 = tail call double @llvm.fma.f64(double %4374, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4390 = tail call double @llvm.fma.f64(double %4374, double %4389, double 0x3EC71DE3796CDE01)
  %4391 = tail call double @llvm.fma.f64(double %4374, double %4390, double 0xBF2A01A019E83E5C)
  %4392 = tail call double @llvm.fma.f64(double %4374, double %4391, double 0x3F81111111110BB3)
  %4393 = fneg double %4374
  %4394 = fmul double %.1627, %4393
  %4395 = fmul double %.1626, 5.000000e-01
  %4396 = tail call double @llvm.fma.f64(double %4394, double %4392, double %4395)
  %4397 = tail call double @llvm.fma.f64(double %4374, double %4396, double %4385)
  %4398 = tail call double @llvm.fma.f64(double %4394, double 0xBFC5555555555555, double %4397)
  %4399 = fsub double %.1627, %4398
  %4400 = and i32 %.1628, 1
  %4401 = icmp eq i32 %4400, 0
  %4402 = select i1 %4401, double %4399, double %4388
  %4403 = bitcast double %4402 to <2 x i32>
  %.pn1.i.i953 = shl i32 %.1628, 30
  %4404 = xor i32 %.pn1.i.i953, %1566
  %4405 = and i32 %4404, -2147483648
  %4406 = extractelement <2 x i32> %4403, i64 1
  %4407 = xor i32 %4406, %4405
  %4408 = insertelement <2 x i32> %4403, i32 %4407, i64 1
  %4409 = select i1 %1567, <2 x i32> %4408, <2 x i32> <i32 0, i32 2146959360>
  %4410 = bitcast <2 x i32> %4409 to double
  %mul128 = fmul double %mul125, %4410
  %.pn5.i.i956 = select i1 %1680, double %1777, double %1760
  %.pn3.i.i957 = select i1 %1680, double %1775, double %1758
  %.pn1.in.i.i958 = select i1 %1680, i32 %1778, i32 %1747
  %4411 = fmul double %.pn3.i.i957, %.pn3.i.i957
  %4412 = fmul double %4411, 5.000000e-01
  %4413 = fsub double 1.000000e+00, %4412
  %4414 = fsub double 1.000000e+00, %4413
  %4415 = fsub double %4414, %4412
  %4416 = fmul double %4411, %4411
  %4417 = tail call double @llvm.fma.f64(double %4411, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4418 = tail call double @llvm.fma.f64(double %4411, double %4417, double 0xBE927E4FA17F65F6)
  %4419 = tail call double @llvm.fma.f64(double %4411, double %4418, double 0x3EFA01A019F4EC90)
  %4420 = tail call double @llvm.fma.f64(double %4411, double %4419, double 0xBF56C16C16C16967)
  %4421 = tail call double @llvm.fma.f64(double %4411, double %4420, double 0x3FA5555555555555)
  %4422 = fneg double %.pn5.i.i956
  %4423 = tail call double @llvm.fma.f64(double %.pn3.i.i957, double %4422, double %4415)
  %4424 = tail call double @llvm.fma.f64(double %4416, double %4421, double %4423)
  %4425 = fadd double %4413, %4424
  %4426 = tail call double @llvm.fma.f64(double %4411, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4427 = tail call double @llvm.fma.f64(double %4411, double %4426, double 0x3EC71DE3796CDE01)
  %4428 = tail call double @llvm.fma.f64(double %4411, double %4427, double 0xBF2A01A019E83E5C)
  %4429 = tail call double @llvm.fma.f64(double %4411, double %4428, double 0x3F81111111110BB3)
  %4430 = fneg double %4411
  %4431 = fmul double %.pn3.i.i957, %4430
  %4432 = fmul double %.pn5.i.i956, 5.000000e-01
  %4433 = tail call double @llvm.fma.f64(double %4431, double %4429, double %4432)
  %4434 = tail call double @llvm.fma.f64(double %4411, double %4433, double %4422)
  %4435 = tail call double @llvm.fma.f64(double %4431, double 0xBFC5555555555555, double %4434)
  %4436 = fsub double %.pn3.i.i957, %4435
  %4437 = and i32 %.pn1.in.i.i958, 1
  %4438 = icmp eq i32 %4437, 0
  %4439 = select i1 %4438, double %4436, double %4425
  %4440 = bitcast double %4439 to <2 x i32>
  %.pn1.i.i959 = shl i32 %.pn1.in.i.i958, 30
  %4441 = xor i32 %.pn1.i.i959, %1780
  %4442 = and i32 %4441, -2147483648
  %4443 = extractelement <2 x i32> %4440, i64 1
  %4444 = xor i32 %4443, %4442
  %4445 = insertelement <2 x i32> %4440, i32 %4444, i64 1
  %4446 = select i1 %1781, <2 x i32> %4445, <2 x i32> <i32 0, i32 2146959360>
  %4447 = bitcast <2 x i32> %4446 to double
  %4448 = fneg double %4447
  %fneg137 = fmul double %mul133, %4448
  %.pn5.i.i961 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i962 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i963 = select i1 %1840, i32 %1938, i32 %1907
  %4449 = fmul double %.pn3.i.i962, %.pn3.i.i962
  %4450 = fmul double %4449, 5.000000e-01
  %4451 = fsub double 1.000000e+00, %4450
  %4452 = fsub double 1.000000e+00, %4451
  %4453 = fsub double %4452, %4450
  %4454 = fmul double %4449, %4449
  %4455 = tail call double @llvm.fma.f64(double %4449, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4456 = tail call double @llvm.fma.f64(double %4449, double %4455, double 0xBE927E4FA17F65F6)
  %4457 = tail call double @llvm.fma.f64(double %4449, double %4456, double 0x3EFA01A019F4EC90)
  %4458 = tail call double @llvm.fma.f64(double %4449, double %4457, double 0xBF56C16C16C16967)
  %4459 = tail call double @llvm.fma.f64(double %4449, double %4458, double 0x3FA5555555555555)
  %4460 = fneg double %.pn5.i.i961
  %4461 = tail call double @llvm.fma.f64(double %.pn3.i.i962, double %4460, double %4453)
  %4462 = tail call double @llvm.fma.f64(double %4454, double %4459, double %4461)
  %4463 = fadd double %4451, %4462
  %4464 = tail call double @llvm.fma.f64(double %4449, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4465 = tail call double @llvm.fma.f64(double %4449, double %4464, double 0x3EC71DE3796CDE01)
  %4466 = tail call double @llvm.fma.f64(double %4449, double %4465, double 0xBF2A01A019E83E5C)
  %4467 = tail call double @llvm.fma.f64(double %4449, double %4466, double 0x3F81111111110BB3)
  %4468 = fneg double %4449
  %4469 = fmul double %.pn3.i.i962, %4468
  %4470 = fmul double %.pn5.i.i961, 5.000000e-01
  %4471 = tail call double @llvm.fma.f64(double %4469, double %4467, double %4470)
  %4472 = tail call double @llvm.fma.f64(double %4449, double %4471, double %4460)
  %4473 = tail call double @llvm.fma.f64(double %4469, double 0xBFC5555555555555, double %4472)
  %4474 = fsub double %.pn3.i.i962, %4473
  %4475 = and i32 %.pn1.in.i.i963, 1
  %4476 = icmp eq i32 %4475, 0
  %4477 = select i1 %4476, double %4474, double %4463
  %4478 = bitcast double %4477 to <2 x i32>
  %.pn1.i.i964 = shl i32 %.pn1.in.i.i963, 30
  %4479 = xor i32 %.pn1.i.i964, %1940
  %4480 = and i32 %4479, -2147483648
  %4481 = extractelement <2 x i32> %4478, i64 1
  %4482 = xor i32 %4481, %4480
  %4483 = insertelement <2 x i32> %4478, i32 %4482, i64 1
  %4484 = select i1 %1941, <2 x i32> %4483, <2 x i32> <i32 0, i32 2146959360>
  %4485 = bitcast <2 x i32> %4484 to double
  %mul147 = fmul double %mul144, %4485
  %.pn5.i.i967 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i968 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i969 = select i1 %2002, i32 %2100, i32 %2069
  %4486 = fmul double %.pn3.i.i968, %.pn3.i.i968
  %4487 = fmul double %4486, 5.000000e-01
  %4488 = fsub double 1.000000e+00, %4487
  %4489 = fsub double 1.000000e+00, %4488
  %4490 = fsub double %4489, %4487
  %4491 = fmul double %4486, %4486
  %4492 = tail call double @llvm.fma.f64(double %4486, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4493 = tail call double @llvm.fma.f64(double %4486, double %4492, double 0xBE927E4FA17F65F6)
  %4494 = tail call double @llvm.fma.f64(double %4486, double %4493, double 0x3EFA01A019F4EC90)
  %4495 = tail call double @llvm.fma.f64(double %4486, double %4494, double 0xBF56C16C16C16967)
  %4496 = tail call double @llvm.fma.f64(double %4486, double %4495, double 0x3FA5555555555555)
  %4497 = fneg double %.pn5.i.i967
  %4498 = tail call double @llvm.fma.f64(double %.pn3.i.i968, double %4497, double %4490)
  %4499 = tail call double @llvm.fma.f64(double %4491, double %4496, double %4498)
  %4500 = fadd double %4488, %4499
  %4501 = tail call double @llvm.fma.f64(double %4486, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4502 = tail call double @llvm.fma.f64(double %4486, double %4501, double 0x3EC71DE3796CDE01)
  %4503 = tail call double @llvm.fma.f64(double %4486, double %4502, double 0xBF2A01A019E83E5C)
  %4504 = tail call double @llvm.fma.f64(double %4486, double %4503, double 0x3F81111111110BB3)
  %4505 = fneg double %4486
  %4506 = fmul double %.pn3.i.i968, %4505
  %4507 = fmul double %.pn5.i.i967, 5.000000e-01
  %4508 = tail call double @llvm.fma.f64(double %4506, double %4504, double %4507)
  %4509 = tail call double @llvm.fma.f64(double %4486, double %4508, double %4497)
  %4510 = tail call double @llvm.fma.f64(double %4506, double 0xBFC5555555555555, double %4509)
  %4511 = fsub double %.pn3.i.i968, %4510
  %4512 = and i32 %.pn1.in.i.i969, 1
  %4513 = icmp eq i32 %4512, 0
  %4514 = select i1 %4513, double %4511, double %4500
  %4515 = bitcast double %4514 to <2 x i32>
  %.pn1.i.i970 = shl i32 %.pn1.in.i.i969, 30
  %4516 = xor i32 %.pn1.i.i970, %2102
  %4517 = and i32 %4516, -2147483648
  %4518 = extractelement <2 x i32> %4515, i64 1
  %4519 = xor i32 %4518, %4517
  %4520 = insertelement <2 x i32> %4515, i32 %4519, i64 1
  %4521 = select i1 %2103, <2 x i32> %4520, <2 x i32> <i32 0, i32 2146959360>
  %4522 = bitcast <2 x i32> %4521 to double
  %4523 = fneg double %4522
  %fneg160 = fmul double %mul157, %4523
  %4524 = fneg double %4511
  %4525 = select i1 %4513, double %4500, double %4524
  %4526 = bitcast double %4525 to <2 x i32>
  %4527 = and i32 %.pn1.i.i970, -2147483648
  %4528 = extractelement <2 x i32> %4526, i64 1
  %4529 = xor i32 %4528, %4527
  %4530 = insertelement <2 x i32> %4526, i32 %4529, i64 1
  %4531 = select i1 %2103, <2 x i32> %4530, <2 x i32> <i32 0, i32 2146959360>
  %4532 = bitcast <2 x i32> %4531 to double
  %4533 = fneg double %4532
  %fneg182 = fmul double %mul157, %4533
  %4534 = fneg double %4474
  %4535 = select i1 %4476, double %4463, double %4534
  %4536 = bitcast double %4535 to <2 x i32>
  %4537 = and i32 %.pn1.i.i964, -2147483648
  %4538 = extractelement <2 x i32> %4536, i64 1
  %4539 = xor i32 %4538, %4537
  %4540 = insertelement <2 x i32> %4536, i32 %4539, i64 1
  %4541 = select i1 %1941, <2 x i32> %4540, <2 x i32> <i32 0, i32 2146959360>
  %4542 = bitcast <2 x i32> %4541 to double
  %mul192 = fmul double %mul144, %4542
  %4543 = fneg double %4436
  %4544 = select i1 %4438, double %4425, double %4543
  %4545 = bitcast double %4544 to <2 x i32>
  %4546 = and i32 %.pn1.i.i959, -2147483648
  %4547 = extractelement <2 x i32> %4545, i64 1
  %4548 = xor i32 %4547, %4546
  %4549 = insertelement <2 x i32> %4545, i32 %4548, i64 1
  %4550 = select i1 %1781, <2 x i32> %4549, <2 x i32> <i32 0, i32 2146959360>
  %4551 = bitcast <2 x i32> %4550 to double
  %4552 = fneg double %4551
  %fneg202 = fmul double %mul133, %4552
  %4553 = fneg double %4399
  %4554 = select i1 %4401, double %4388, double %4553
  %4555 = bitcast double %4554 to <2 x i32>
  %4556 = and i32 %.pn1.i.i953, -2147483648
  %4557 = extractelement <2 x i32> %4555, i64 1
  %4558 = xor i32 %4557, %4556
  %4559 = insertelement <2 x i32> %4555, i32 %4558, i64 1
  %4560 = select i1 %1567, <2 x i32> %4559, <2 x i32> <i32 0, i32 2146959360>
  %4561 = bitcast <2 x i32> %4560 to double
  %mul210 = fmul double %mul207, %4561
  %.1623 = select i1 %1680, double %1777, double %1760
  %.1624 = select i1 %1680, double %1775, double %1758
  %.1625 = select i1 %1680, i32 %1778, i32 %1747
  %4562 = fmul double %.1624, %.1624
  %4563 = fmul double %4562, 5.000000e-01
  %4564 = fsub double 1.000000e+00, %4563
  %4565 = fsub double 1.000000e+00, %4564
  %4566 = fsub double %4565, %4563
  %4567 = fmul double %4562, %4562
  %4568 = tail call double @llvm.fma.f64(double %4562, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4569 = tail call double @llvm.fma.f64(double %4562, double %4568, double 0xBE927E4FA17F65F6)
  %4570 = tail call double @llvm.fma.f64(double %4562, double %4569, double 0x3EFA01A019F4EC90)
  %4571 = tail call double @llvm.fma.f64(double %4562, double %4570, double 0xBF56C16C16C16967)
  %4572 = tail call double @llvm.fma.f64(double %4562, double %4571, double 0x3FA5555555555555)
  %4573 = fneg double %.1623
  %4574 = tail call double @llvm.fma.f64(double %.1624, double %4573, double %4566)
  %4575 = tail call double @llvm.fma.f64(double %4567, double %4572, double %4574)
  %4576 = fadd double %4564, %4575
  %4577 = tail call double @llvm.fma.f64(double %4562, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4578 = tail call double @llvm.fma.f64(double %4562, double %4577, double 0x3EC71DE3796CDE01)
  %4579 = tail call double @llvm.fma.f64(double %4562, double %4578, double 0xBF2A01A019E83E5C)
  %4580 = tail call double @llvm.fma.f64(double %4562, double %4579, double 0x3F81111111110BB3)
  %4581 = fneg double %4562
  %4582 = fmul double %.1624, %4581
  %4583 = fmul double %.1623, 5.000000e-01
  %4584 = tail call double @llvm.fma.f64(double %4582, double %4580, double %4583)
  %4585 = tail call double @llvm.fma.f64(double %4562, double %4584, double %4573)
  %4586 = tail call double @llvm.fma.f64(double %4582, double 0xBFC5555555555555, double %4585)
  %4587 = fsub double %.1624, %4586
  %4588 = and i32 %.1625, 1
  %4589 = icmp eq i32 %4588, 0
  %4590 = select i1 %4589, double %4587, double %4576
  %4591 = bitcast double %4590 to <2 x i32>
  %.pn1.i.i922 = shl i32 %.1625, 30
  %4592 = xor i32 %.pn1.i.i922, %1780
  %4593 = and i32 %4592, -2147483648
  %4594 = extractelement <2 x i32> %4591, i64 1
  %4595 = xor i32 %4594, %4593
  %4596 = insertelement <2 x i32> %4591, i32 %4595, i64 1
  %4597 = select i1 %1781, <2 x i32> %4596, <2 x i32> <i32 0, i32 2146959360>
  %4598 = bitcast <2 x i32> %4597 to double
  %4599 = fneg double %4598
  %fneg66 = fmul double %mul62, %4599
  %.pn5.i.i924 = select i1 %1840, double %1937, double %1920
  %.pn3.i.i925 = select i1 %1840, double %1935, double %1918
  %.pn1.in.i.i926 = select i1 %1840, i32 %1938, i32 %1907
  %4600 = fmul double %.pn3.i.i925, %.pn3.i.i925
  %4601 = fmul double %4600, 5.000000e-01
  %4602 = fsub double 1.000000e+00, %4601
  %4603 = fsub double 1.000000e+00, %4602
  %4604 = fsub double %4603, %4601
  %4605 = fmul double %4600, %4600
  %4606 = tail call double @llvm.fma.f64(double %4600, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4607 = tail call double @llvm.fma.f64(double %4600, double %4606, double 0xBE927E4FA17F65F6)
  %4608 = tail call double @llvm.fma.f64(double %4600, double %4607, double 0x3EFA01A019F4EC90)
  %4609 = tail call double @llvm.fma.f64(double %4600, double %4608, double 0xBF56C16C16C16967)
  %4610 = tail call double @llvm.fma.f64(double %4600, double %4609, double 0x3FA5555555555555)
  %4611 = fneg double %.pn5.i.i924
  %4612 = tail call double @llvm.fma.f64(double %.pn3.i.i925, double %4611, double %4604)
  %4613 = tail call double @llvm.fma.f64(double %4605, double %4610, double %4612)
  %4614 = fadd double %4602, %4613
  %4615 = tail call double @llvm.fma.f64(double %4600, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4616 = tail call double @llvm.fma.f64(double %4600, double %4615, double 0x3EC71DE3796CDE01)
  %4617 = tail call double @llvm.fma.f64(double %4600, double %4616, double 0xBF2A01A019E83E5C)
  %4618 = tail call double @llvm.fma.f64(double %4600, double %4617, double 0x3F81111111110BB3)
  %4619 = fneg double %4600
  %4620 = fmul double %.pn3.i.i925, %4619
  %4621 = fmul double %.pn5.i.i924, 5.000000e-01
  %4622 = tail call double @llvm.fma.f64(double %4620, double %4618, double %4621)
  %4623 = tail call double @llvm.fma.f64(double %4600, double %4622, double %4611)
  %4624 = tail call double @llvm.fma.f64(double %4620, double 0xBFC5555555555555, double %4623)
  %4625 = fsub double %.pn3.i.i925, %4624
  %4626 = and i32 %.pn1.in.i.i926, 1
  %4627 = icmp eq i32 %4626, 0
  %4628 = select i1 %4627, double %4625, double %4614
  %4629 = bitcast double %4628 to <2 x i32>
  %.pn1.i.i927 = shl i32 %.pn1.in.i.i926, 30
  %4630 = xor i32 %.pn1.i.i927, %1940
  %4631 = and i32 %4630, -2147483648
  %4632 = extractelement <2 x i32> %4629, i64 1
  %4633 = xor i32 %4632, %4631
  %4634 = insertelement <2 x i32> %4629, i32 %4633, i64 1
  %4635 = select i1 %1941, <2 x i32> %4634, <2 x i32> <i32 0, i32 2146959360>
  %4636 = bitcast <2 x i32> %4635 to double
  %mul73 = fmul double %mul70, %4636
  %.pn5.i.i929 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i930 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i931 = select i1 %2002, i32 %2100, i32 %2069
  %4637 = fmul double %.pn3.i.i930, %.pn3.i.i930
  %4638 = fmul double %4637, 5.000000e-01
  %4639 = fsub double 1.000000e+00, %4638
  %4640 = fsub double 1.000000e+00, %4639
  %4641 = fsub double %4640, %4638
  %4642 = fmul double %4637, %4637
  %4643 = tail call double @llvm.fma.f64(double %4637, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4644 = tail call double @llvm.fma.f64(double %4637, double %4643, double 0xBE927E4FA17F65F6)
  %4645 = tail call double @llvm.fma.f64(double %4637, double %4644, double 0x3EFA01A019F4EC90)
  %4646 = tail call double @llvm.fma.f64(double %4637, double %4645, double 0xBF56C16C16C16967)
  %4647 = tail call double @llvm.fma.f64(double %4637, double %4646, double 0x3FA5555555555555)
  %4648 = fneg double %.pn5.i.i929
  %4649 = tail call double @llvm.fma.f64(double %.pn3.i.i930, double %4648, double %4641)
  %4650 = tail call double @llvm.fma.f64(double %4642, double %4647, double %4649)
  %4651 = fadd double %4639, %4650
  %4652 = tail call double @llvm.fma.f64(double %4637, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4653 = tail call double @llvm.fma.f64(double %4637, double %4652, double 0x3EC71DE3796CDE01)
  %4654 = tail call double @llvm.fma.f64(double %4637, double %4653, double 0xBF2A01A019E83E5C)
  %4655 = tail call double @llvm.fma.f64(double %4637, double %4654, double 0x3F81111111110BB3)
  %4656 = fneg double %4637
  %4657 = fmul double %.pn3.i.i930, %4656
  %4658 = fmul double %.pn5.i.i929, 5.000000e-01
  %4659 = tail call double @llvm.fma.f64(double %4657, double %4655, double %4658)
  %4660 = tail call double @llvm.fma.f64(double %4637, double %4659, double %4648)
  %4661 = tail call double @llvm.fma.f64(double %4657, double 0xBFC5555555555555, double %4660)
  %4662 = fsub double %.pn3.i.i930, %4661
  %4663 = and i32 %.pn1.in.i.i931, 1
  %4664 = icmp eq i32 %4663, 0
  %4665 = select i1 %4664, double %4662, double %4651
  %4666 = bitcast double %4665 to <2 x i32>
  %.pn1.i.i932 = shl i32 %.pn1.in.i.i931, 30
  %4667 = xor i32 %.pn1.i.i932, %2102
  %4668 = and i32 %4667, -2147483648
  %4669 = extractelement <2 x i32> %4666, i64 1
  %4670 = xor i32 %4669, %4668
  %4671 = insertelement <2 x i32> %4666, i32 %4670, i64 1
  %4672 = select i1 %2103, <2 x i32> %4671, <2 x i32> <i32 0, i32 2146959360>
  %4673 = bitcast <2 x i32> %4672 to double
  %4674 = fneg double %4673
  %fneg84 = fmul double %mul81, %4674
  %4675 = fneg double %4662
  %4676 = select i1 %4664, double %4651, double %4675
  %4677 = bitcast double %4676 to <2 x i32>
  %4678 = and i32 %.pn1.i.i932, -2147483648
  %4679 = extractelement <2 x i32> %4677, i64 1
  %4680 = xor i32 %4679, %4678
  %4681 = insertelement <2 x i32> %4677, i32 %4680, i64 1
  %4682 = select i1 %2103, <2 x i32> %4681, <2 x i32> <i32 0, i32 2146959360>
  %4683 = bitcast <2 x i32> %4682 to double
  %4684 = fneg double %4683
  %fneg102 = fmul double %mul81, %4684
  %4685 = fneg double %4625
  %4686 = select i1 %4627, double %4614, double %4685
  %4687 = bitcast double %4686 to <2 x i32>
  %4688 = and i32 %.pn1.i.i927, -2147483648
  %4689 = extractelement <2 x i32> %4687, i64 1
  %4690 = xor i32 %4689, %4688
  %4691 = insertelement <2 x i32> %4687, i32 %4690, i64 1
  %4692 = select i1 %1941, <2 x i32> %4691, <2 x i32> <i32 0, i32 2146959360>
  %4693 = bitcast <2 x i32> %4692 to double
  %mul110 = fmul double %mul70, %4693
  %4694 = fneg double %4587
  %4695 = select i1 %4589, double %4576, double %4694
  %4696 = bitcast double %4695 to <2 x i32>
  %4697 = and i32 %.pn1.i.i922, -2147483648
  %4698 = extractelement <2 x i32> %4696, i64 1
  %4699 = xor i32 %4698, %4697
  %4700 = insertelement <2 x i32> %4696, i32 %4699, i64 1
  %4701 = select i1 %1781, <2 x i32> %4700, <2 x i32> <i32 0, i32 2146959360>
  %4702 = bitcast <2 x i32> %4701 to double
  %4703 = fneg double %4702
  %fneg119 = fmul double %mul62, %4703
  %.1620 = select i1 %1840, double %1937, double %1920
  %.1621 = select i1 %1840, double %1935, double %1918
  %.1622 = select i1 %1840, i32 %1938, i32 %1907
  %4704 = fmul double %.1621, %.1621
  %4705 = fmul double %4704, 5.000000e-01
  %4706 = fsub double 1.000000e+00, %4705
  %4707 = fsub double 1.000000e+00, %4706
  %4708 = fsub double %4707, %4705
  %4709 = fmul double %4704, %4704
  %4710 = tail call double @llvm.fma.f64(double %4704, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4711 = tail call double @llvm.fma.f64(double %4704, double %4710, double 0xBE927E4FA17F65F6)
  %4712 = tail call double @llvm.fma.f64(double %4704, double %4711, double 0x3EFA01A019F4EC90)
  %4713 = tail call double @llvm.fma.f64(double %4704, double %4712, double 0xBF56C16C16C16967)
  %4714 = tail call double @llvm.fma.f64(double %4704, double %4713, double 0x3FA5555555555555)
  %4715 = fneg double %.1620
  %4716 = tail call double @llvm.fma.f64(double %.1621, double %4715, double %4708)
  %4717 = tail call double @llvm.fma.f64(double %4709, double %4714, double %4716)
  %4718 = fadd double %4706, %4717
  %4719 = tail call double @llvm.fma.f64(double %4704, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4720 = tail call double @llvm.fma.f64(double %4704, double %4719, double 0x3EC71DE3796CDE01)
  %4721 = tail call double @llvm.fma.f64(double %4704, double %4720, double 0xBF2A01A019E83E5C)
  %4722 = tail call double @llvm.fma.f64(double %4704, double %4721, double 0x3F81111111110BB3)
  %4723 = fneg double %4704
  %4724 = fmul double %.1621, %4723
  %4725 = fmul double %.1620, 5.000000e-01
  %4726 = tail call double @llvm.fma.f64(double %4724, double %4722, double %4725)
  %4727 = tail call double @llvm.fma.f64(double %4704, double %4726, double %4715)
  %4728 = tail call double @llvm.fma.f64(double %4724, double 0xBFC5555555555555, double %4727)
  %4729 = fsub double %.1621, %4728
  %4730 = and i32 %.1622, 1
  %4731 = icmp eq i32 %4730, 0
  %4732 = select i1 %4731, double %4729, double %4718
  %4733 = bitcast double %4732 to <2 x i32>
  %.pn1.i.i902 = shl i32 %.1622, 30
  %4734 = xor i32 %.pn1.i.i902, %1940
  %4735 = and i32 %4734, -2147483648
  %4736 = extractelement <2 x i32> %4733, i64 1
  %4737 = xor i32 %4736, %4735
  %4738 = insertelement <2 x i32> %4733, i32 %4737, i64 1
  %4739 = select i1 %1941, <2 x i32> %4738, <2 x i32> <i32 0, i32 2146959360>
  %4740 = bitcast <2 x i32> %4739 to double
  %mul25 = fmul double %mul22, %4740
  %.pn5.i.i904 = select i1 %2002, double %2099, double %2082
  %.pn3.i.i905 = select i1 %2002, double %2097, double %2080
  %.pn1.in.i.i906 = select i1 %2002, i32 %2100, i32 %2069
  %4741 = fmul double %.pn3.i.i905, %.pn3.i.i905
  %4742 = fmul double %4741, 5.000000e-01
  %4743 = fsub double 1.000000e+00, %4742
  %4744 = fsub double 1.000000e+00, %4743
  %4745 = fsub double %4744, %4742
  %4746 = fmul double %4741, %4741
  %4747 = tail call double @llvm.fma.f64(double %4741, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4748 = tail call double @llvm.fma.f64(double %4741, double %4747, double 0xBE927E4FA17F65F6)
  %4749 = tail call double @llvm.fma.f64(double %4741, double %4748, double 0x3EFA01A019F4EC90)
  %4750 = tail call double @llvm.fma.f64(double %4741, double %4749, double 0xBF56C16C16C16967)
  %4751 = tail call double @llvm.fma.f64(double %4741, double %4750, double 0x3FA5555555555555)
  %4752 = fneg double %.pn5.i.i904
  %4753 = tail call double @llvm.fma.f64(double %.pn3.i.i905, double %4752, double %4745)
  %4754 = tail call double @llvm.fma.f64(double %4746, double %4751, double %4753)
  %4755 = fadd double %4743, %4754
  %4756 = tail call double @llvm.fma.f64(double %4741, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4757 = tail call double @llvm.fma.f64(double %4741, double %4756, double 0x3EC71DE3796CDE01)
  %4758 = tail call double @llvm.fma.f64(double %4741, double %4757, double 0xBF2A01A019E83E5C)
  %4759 = tail call double @llvm.fma.f64(double %4741, double %4758, double 0x3F81111111110BB3)
  %4760 = fneg double %4741
  %4761 = fmul double %.pn3.i.i905, %4760
  %4762 = fmul double %.pn5.i.i904, 5.000000e-01
  %4763 = tail call double @llvm.fma.f64(double %4761, double %4759, double %4762)
  %4764 = tail call double @llvm.fma.f64(double %4741, double %4763, double %4752)
  %4765 = tail call double @llvm.fma.f64(double %4761, double 0xBFC5555555555555, double %4764)
  %4766 = fsub double %.pn3.i.i905, %4765
  %4767 = and i32 %.pn1.in.i.i906, 1
  %4768 = icmp eq i32 %4767, 0
  %4769 = select i1 %4768, double %4766, double %4755
  %4770 = bitcast double %4769 to <2 x i32>
  %.pn1.i.i907 = shl i32 %.pn1.in.i.i906, 30
  %4771 = xor i32 %.pn1.i.i907, %2102
  %4772 = and i32 %4771, -2147483648
  %4773 = extractelement <2 x i32> %4770, i64 1
  %4774 = xor i32 %4773, %4772
  %4775 = insertelement <2 x i32> %4770, i32 %4774, i64 1
  %4776 = select i1 %2103, <2 x i32> %4775, <2 x i32> <i32 0, i32 2146959360>
  %4777 = bitcast <2 x i32> %4776 to double
  %4778 = fneg double %4777
  %fneg33 = fmul double %mul30, %4778
  %4779 = fneg double %4766
  %4780 = select i1 %4768, double %4755, double %4779
  %4781 = bitcast double %4780 to <2 x i32>
  %4782 = and i32 %.pn1.i.i907, -2147483648
  %4783 = extractelement <2 x i32> %4781, i64 1
  %4784 = xor i32 %4783, %4782
  %4785 = insertelement <2 x i32> %4781, i32 %4784, i64 1
  %4786 = select i1 %2103, <2 x i32> %4785, <2 x i32> <i32 0, i32 2146959360>
  %4787 = bitcast <2 x i32> %4786 to double
  %4788 = fneg double %4787
  %fneg47 = fmul double %mul30, %4788
  %4789 = fneg double %4729
  %4790 = select i1 %4731, double %4718, double %4789
  %4791 = bitcast double %4790 to <2 x i32>
  %4792 = and i32 %.pn1.i.i902, -2147483648
  %4793 = extractelement <2 x i32> %4791, i64 1
  %4794 = xor i32 %4793, %4792
  %4795 = insertelement <2 x i32> %4791, i32 %4794, i64 1
  %4796 = select i1 %1941, <2 x i32> %4795, <2 x i32> <i32 0, i32 2146959360>
  %4797 = bitcast <2 x i32> %4796 to double
  %mul56 = fmul double %mul22, %4797
  %. = select i1 %2002, double %2099, double %2082
  %.1618 = select i1 %2002, double %2097, double %2080
  %.1619 = select i1 %2002, i32 %2100, i32 %2069
  %4798 = fmul double %.1618, %.1618
  %4799 = fmul double %4798, 5.000000e-01
  %4800 = fsub double 1.000000e+00, %4799
  %4801 = fsub double 1.000000e+00, %4800
  %4802 = fsub double %4801, %4799
  %4803 = fmul double %4798, %4798
  %4804 = tail call double @llvm.fma.f64(double %4798, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %4805 = tail call double @llvm.fma.f64(double %4798, double %4804, double 0xBE927E4FA17F65F6)
  %4806 = tail call double @llvm.fma.f64(double %4798, double %4805, double 0x3EFA01A019F4EC90)
  %4807 = tail call double @llvm.fma.f64(double %4798, double %4806, double 0xBF56C16C16C16967)
  %4808 = tail call double @llvm.fma.f64(double %4798, double %4807, double 0x3FA5555555555555)
  %4809 = fneg double %.
  %4810 = tail call double @llvm.fma.f64(double %.1618, double %4809, double %4802)
  %4811 = tail call double @llvm.fma.f64(double %4803, double %4808, double %4810)
  %4812 = fadd double %4800, %4811
  %4813 = tail call double @llvm.fma.f64(double %4798, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %4814 = tail call double @llvm.fma.f64(double %4798, double %4813, double 0x3EC71DE3796CDE01)
  %4815 = tail call double @llvm.fma.f64(double %4798, double %4814, double 0xBF2A01A019E83E5C)
  %4816 = tail call double @llvm.fma.f64(double %4798, double %4815, double 0x3F81111111110BB3)
  %4817 = fneg double %4798
  %4818 = fmul double %.1618, %4817
  %4819 = fmul double %., 5.000000e-01
  %4820 = tail call double @llvm.fma.f64(double %4818, double %4816, double %4819)
  %4821 = tail call double @llvm.fma.f64(double %4798, double %4820, double %4809)
  %4822 = tail call double @llvm.fma.f64(double %4818, double 0xBFC5555555555555, double %4821)
  %4823 = fsub double %.1618, %4822
  %4824 = and i32 %.1619, 1
  %4825 = icmp eq i32 %4824, 0
  %4826 = select i1 %4825, double %4823, double %4812
  %4827 = bitcast double %4826 to <2 x i32>
  %.pn1.i.i = shl i32 %.1619, 30
  %4828 = xor i32 %.pn1.i.i, %2102
  %4829 = and i32 %4828, -2147483648
  %4830 = extractelement <2 x i32> %4827, i64 1
  %4831 = xor i32 %4830, %4829
  %4832 = insertelement <2 x i32> %4827, i32 %4831, i64 1
  %4833 = select i1 %2103, <2 x i32> %4832, <2 x i32> <i32 0, i32 2146959360>
  %4834 = bitcast <2 x i32> %4833 to double
  %4835 = fneg double %4834
  %fneg = fmul double %1942, %4835
  %4836 = fneg double %4823
  %4837 = select i1 %4825, double %4812, double %4836
  %4838 = bitcast double %4837 to <2 x i32>
  %4839 = and i32 %.pn1.i.i, -2147483648
  %4840 = extractelement <2 x i32> %4838, i64 1
  %4841 = xor i32 %4840, %4839
  %4842 = insertelement <2 x i32> %4838, i32 %4841, i64 1
  %4843 = select i1 %2103, <2 x i32> %4842, <2 x i32> <i32 0, i32 2146959360>
  %4844 = bitcast <2 x i32> %4843 to double
  %4845 = fneg double %4844
  %fneg15 = fmul double %1942, %4845
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %if.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %l.01617 = phi i32 [ 1, %for.body.lr.ph ], [ %inc, %for.inc ]
  %i.01616 = phi i32 [ 0, %for.body.lr.ph ], [ %add4, %for.inc ]
  %sub = shl nuw i32 %l.01617, 1
  %add = add i32 %i.01616, -1
  %add4 = add i32 %add, %sub
  switch i32 %l.01617, label %for.inc [
    i32 1, label %sw.bb
    i32 2, label %sw.bb19
    i32 3, label %sw.bb60
    i32 4, label %sw.bb123
    i32 5, label %sw.bb214
    i32 6, label %sw.bb337
    i32 7, label %sw.bb492
    i32 8, label %sw.bb683
    i32 9, label %sw.bb911
    i32 10, label %sw.bb1180
  ]

sw.bb:                                            ; preds = %for.body
  %idxprom = sext i32 %add4 to i64
  %arrayidx8 = getelementptr inbounds double, ptr %rn, i64 %idxprom
  store double %fneg, ptr %arrayidx8, align 8, !tbaa !10
  %add9 = add i32 %sub, %i.01616
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds double, ptr %rn, i64 %idxprom10
  store double %u.coerce2, ptr %arrayidx11, align 8, !tbaa !10
  %arrayidx18 = getelementptr i8, ptr %arrayidx8, i64 16
  store double %fneg15, ptr %arrayidx18, align 8, !tbaa !10
  br label %for.inc

sw.bb19:                                          ; preds = %for.body
  %idxprom26 = sext i32 %add4 to i64
  %arrayidx27 = getelementptr inbounds double, ptr %rn, i64 %idxprom26
  store double %mul25, ptr %arrayidx27, align 8, !tbaa !10
  %add34 = add i32 %sub, %i.01616
  %idxprom35 = sext i32 %add34 to i64
  %arrayidx36 = getelementptr inbounds double, ptr %rn, i64 %idxprom35
  store double %fneg33, ptr %arrayidx36, align 8, !tbaa !10
  %arrayidx41 = getelementptr i8, ptr %arrayidx27, i64 16
  store double %2255, ptr %arrayidx41, align 8, !tbaa !10
  %arrayidx50 = getelementptr i8, ptr %arrayidx27, i64 24
  store double %fneg47, ptr %arrayidx50, align 8, !tbaa !10
  %arrayidx59 = getelementptr i8, ptr %arrayidx27, i64 32
  store double %mul56, ptr %arrayidx59, align 8, !tbaa !10
  br label %for.inc

sw.bb60:                                          ; preds = %for.body
  %idxprom67 = sext i32 %add4 to i64
  %arrayidx68 = getelementptr inbounds double, ptr %rn, i64 %idxprom67
  store double %fneg66, ptr %arrayidx68, align 8, !tbaa !10
  %add74 = add i32 %sub, %i.01616
  %idxprom75 = sext i32 %add74 to i64
  %arrayidx76 = getelementptr inbounds double, ptr %rn, i64 %idxprom75
  store double %mul73, ptr %arrayidx76, align 8, !tbaa !10
  %arrayidx87 = getelementptr i8, ptr %arrayidx68, i64 16
  store double %fneg84, ptr %arrayidx87, align 8, !tbaa !10
  %arrayidx94 = getelementptr i8, ptr %arrayidx68, i64 24
  store double %2253, ptr %arrayidx94, align 8, !tbaa !10
  %arrayidx105 = getelementptr i8, ptr %arrayidx68, i64 32
  store double %fneg102, ptr %arrayidx105, align 8, !tbaa !10
  %arrayidx113 = getelementptr i8, ptr %arrayidx68, i64 40
  store double %mul110, ptr %arrayidx113, align 8, !tbaa !10
  %arrayidx122 = getelementptr i8, ptr %arrayidx68, i64 48
  store double %fneg119, ptr %arrayidx122, align 8, !tbaa !10
  br label %for.inc

sw.bb123:                                         ; preds = %for.body
  %idxprom129 = sext i32 %add4 to i64
  %arrayidx130 = getelementptr inbounds double, ptr %rn, i64 %idxprom129
  store double %mul128, ptr %arrayidx130, align 8, !tbaa !10
  %add138 = add i32 %sub, %i.01616
  %idxprom139 = sext i32 %add138 to i64
  %arrayidx140 = getelementptr inbounds double, ptr %rn, i64 %idxprom139
  store double %fneg137, ptr %arrayidx140, align 8, !tbaa !10
  %arrayidx150 = getelementptr i8, ptr %arrayidx130, i64 16
  store double %mul147, ptr %arrayidx150, align 8, !tbaa !10
  %arrayidx163 = getelementptr i8, ptr %arrayidx130, i64 24
  store double %fneg160, ptr %arrayidx163, align 8, !tbaa !10
  %arrayidx172 = getelementptr i8, ptr %arrayidx130, i64 32
  store double %add169, ptr %arrayidx172, align 8, !tbaa !10
  %arrayidx185 = getelementptr i8, ptr %arrayidx130, i64 40
  store double %fneg182, ptr %arrayidx185, align 8, !tbaa !10
  %arrayidx195 = getelementptr i8, ptr %arrayidx130, i64 48
  store double %mul192, ptr %arrayidx195, align 8, !tbaa !10
  %arrayidx205 = getelementptr i8, ptr %arrayidx130, i64 56
  store double %fneg202, ptr %arrayidx205, align 8, !tbaa !10
  %arrayidx213 = getelementptr i8, ptr %arrayidx130, i64 64
  store double %mul210, ptr %arrayidx213, align 8, !tbaa !10
  br label %for.inc

sw.bb214:                                         ; preds = %for.body
  %idxprom221 = sext i32 %add4 to i64
  %arrayidx222 = getelementptr inbounds double, ptr %rn, i64 %idxprom221
  store double %fneg220, ptr %arrayidx222, align 8, !tbaa !10
  %add229 = add i32 %sub, %i.01616
  %idxprom230 = sext i32 %add229 to i64
  %arrayidx231 = getelementptr inbounds double, ptr %rn, i64 %idxprom230
  store double %mul228, ptr %arrayidx231, align 8, !tbaa !10
  %arrayidx243 = getelementptr i8, ptr %arrayidx222, i64 16
  store double %fneg240, ptr %arrayidx243, align 8, !tbaa !10
  %arrayidx255 = getelementptr i8, ptr %arrayidx222, i64 24
  store double %mul252, ptr %arrayidx255, align 8, !tbaa !10
  %arrayidx270 = getelementptr i8, ptr %arrayidx222, i64 32
  store double %fneg267, ptr %arrayidx270, align 8, !tbaa !10
  %arrayidx279 = getelementptr i8, ptr %arrayidx222, i64 40
  store double %2243, ptr %arrayidx279, align 8, !tbaa !10
  %arrayidx294 = getelementptr i8, ptr %arrayidx222, i64 48
  store double %fneg291, ptr %arrayidx294, align 8, !tbaa !10
  %arrayidx306 = getelementptr i8, ptr %arrayidx222, i64 56
  store double %mul303, ptr %arrayidx306, align 8, !tbaa !10
  %arrayidx318 = getelementptr i8, ptr %arrayidx222, i64 64
  store double %fneg315, ptr %arrayidx318, align 8, !tbaa !10
  %arrayidx327 = getelementptr i8, ptr %arrayidx222, i64 72
  store double %mul324, ptr %arrayidx327, align 8, !tbaa !10
  %arrayidx336 = getelementptr i8, ptr %arrayidx222, i64 80
  store double %fneg333, ptr %arrayidx336, align 8, !tbaa !10
  br label %for.inc

sw.bb337:                                         ; preds = %for.body
  %idxprom343 = sext i32 %add4 to i64
  %arrayidx344 = getelementptr inbounds double, ptr %rn, i64 %idxprom343
  store double %mul342, ptr %arrayidx344, align 8, !tbaa !10
  %add352 = add i32 %sub, %i.01616
  %idxprom353 = sext i32 %add352 to i64
  %arrayidx354 = getelementptr inbounds double, ptr %rn, i64 %idxprom353
  store double %fneg351, ptr %arrayidx354, align 8, !tbaa !10
  %arrayidx365 = getelementptr i8, ptr %arrayidx344, i64 16
  store double %mul362, ptr %arrayidx365, align 8, !tbaa !10
  %arrayidx379 = getelementptr i8, ptr %arrayidx344, i64 24
  store double %fneg376, ptr %arrayidx379, align 8, !tbaa !10
  %arrayidx393 = getelementptr i8, ptr %arrayidx344, i64 32
  store double %mul390, ptr %arrayidx393, align 8, !tbaa !10
  %arrayidx408 = getelementptr i8, ptr %arrayidx344, i64 40
  store double %fneg405, ptr %arrayidx408, align 8, !tbaa !10
  %arrayidx419 = getelementptr i8, ptr %arrayidx344, i64 48
  store double %sub416, ptr %arrayidx419, align 8, !tbaa !10
  %arrayidx434 = getelementptr i8, ptr %arrayidx344, i64 56
  store double %fneg431, ptr %arrayidx434, align 8, !tbaa !10
  %arrayidx448 = getelementptr i8, ptr %arrayidx344, i64 64
  store double %mul445, ptr %arrayidx448, align 8, !tbaa !10
  %arrayidx462 = getelementptr i8, ptr %arrayidx344, i64 72
  store double %fneg459, ptr %arrayidx462, align 8, !tbaa !10
  %arrayidx473 = getelementptr i8, ptr %arrayidx344, i64 80
  store double %mul470, ptr %arrayidx473, align 8, !tbaa !10
  %arrayidx483 = getelementptr i8, ptr %arrayidx344, i64 88
  store double %fneg480, ptr %arrayidx483, align 8, !tbaa !10
  %arrayidx491 = getelementptr i8, ptr %arrayidx344, i64 96
  store double %mul488, ptr %arrayidx491, align 8, !tbaa !10
  br label %for.inc

sw.bb492:                                         ; preds = %for.body
  %idxprom499 = sext i32 %add4 to i64
  %arrayidx500 = getelementptr inbounds double, ptr %rn, i64 %idxprom499
  store double %fneg498, ptr %arrayidx500, align 8, !tbaa !10
  %add507 = add i32 %sub, %i.01616
  %idxprom508 = sext i32 %add507 to i64
  %arrayidx509 = getelementptr inbounds double, ptr %rn, i64 %idxprom508
  store double %mul506, ptr %arrayidx509, align 8, !tbaa !10
  %arrayidx521 = getelementptr i8, ptr %arrayidx500, i64 16
  store double %fneg518, ptr %arrayidx521, align 8, !tbaa !10
  %arrayidx534 = getelementptr i8, ptr %arrayidx500, i64 24
  store double %mul531, ptr %arrayidx534, align 8, !tbaa !10
  %arrayidx550 = getelementptr i8, ptr %arrayidx500, i64 32
  store double %fneg547, ptr %arrayidx550, align 8, !tbaa !10
  %arrayidx564 = getelementptr i8, ptr %arrayidx500, i64 40
  store double %mul561, ptr %arrayidx564, align 8, !tbaa !10
  %arrayidx581 = getelementptr i8, ptr %arrayidx500, i64 48
  store double %fneg578, ptr %arrayidx581, align 8, !tbaa !10
  %arrayidx592 = getelementptr i8, ptr %arrayidx500, i64 56
  store double %2222, ptr %arrayidx592, align 8, !tbaa !10
  %arrayidx609 = getelementptr i8, ptr %arrayidx500, i64 64
  store double %fneg606, ptr %arrayidx609, align 8, !tbaa !10
  %arrayidx623 = getelementptr i8, ptr %arrayidx500, i64 72
  store double %mul620, ptr %arrayidx623, align 8, !tbaa !10
  %arrayidx639 = getelementptr i8, ptr %arrayidx500, i64 80
  store double %fneg636, ptr %arrayidx639, align 8, !tbaa !10
  %arrayidx652 = getelementptr i8, ptr %arrayidx500, i64 88
  store double %mul649, ptr %arrayidx652, align 8, !tbaa !10
  %arrayidx664 = getelementptr i8, ptr %arrayidx500, i64 96
  store double %fneg661, ptr %arrayidx664, align 8, !tbaa !10
  %arrayidx673 = getelementptr i8, ptr %arrayidx500, i64 104
  store double %mul670, ptr %arrayidx673, align 8, !tbaa !10
  %arrayidx682 = getelementptr i8, ptr %arrayidx500, i64 112
  store double %fneg679, ptr %arrayidx682, align 8, !tbaa !10
  br label %for.inc

sw.bb683:                                         ; preds = %for.body
  %idxprom689 = sext i32 %add4 to i64
  %arrayidx690 = getelementptr inbounds double, ptr %rn, i64 %idxprom689
  store double %mul688, ptr %arrayidx690, align 8, !tbaa !10
  %add698 = add i32 %sub, %i.01616
  %idxprom699 = sext i32 %add698 to i64
  %arrayidx700 = getelementptr inbounds double, ptr %rn, i64 %idxprom699
  store double %fneg697, ptr %arrayidx700, align 8, !tbaa !10
  %arrayidx711 = getelementptr i8, ptr %arrayidx690, i64 16
  store double %mul708, ptr %arrayidx711, align 8, !tbaa !10
  %arrayidx725 = getelementptr i8, ptr %arrayidx690, i64 24
  store double %fneg722, ptr %arrayidx725, align 8, !tbaa !10
  %arrayidx740 = getelementptr i8, ptr %arrayidx690, i64 32
  store double %mul737, ptr %arrayidx740, align 8, !tbaa !10
  %arrayidx756 = getelementptr i8, ptr %arrayidx690, i64 40
  store double %fneg753, ptr %arrayidx756, align 8, !tbaa !10
  %arrayidx772 = getelementptr i8, ptr %arrayidx690, i64 48
  store double %mul769, ptr %arrayidx772, align 8, !tbaa !10
  %arrayidx789 = getelementptr i8, ptr %arrayidx690, i64 56
  store double %fneg786, ptr %arrayidx789, align 8, !tbaa !10
  %arrayidx803 = getelementptr i8, ptr %arrayidx690, i64 64
  store double %add800, ptr %arrayidx803, align 8, !tbaa !10
  %arrayidx820 = getelementptr i8, ptr %arrayidx690, i64 72
  store double %fneg817, ptr %arrayidx820, align 8, !tbaa !10
  %arrayidx836 = getelementptr i8, ptr %arrayidx690, i64 80
  store double %mul833, ptr %arrayidx836, align 8, !tbaa !10
  %arrayidx852 = getelementptr i8, ptr %arrayidx690, i64 88
  store double %fneg849, ptr %arrayidx852, align 8, !tbaa !10
  %arrayidx867 = getelementptr i8, ptr %arrayidx690, i64 96
  store double %mul864, ptr %arrayidx867, align 8, !tbaa !10
  %arrayidx881 = getelementptr i8, ptr %arrayidx690, i64 104
  store double %fneg878, ptr %arrayidx881, align 8, !tbaa !10
  %arrayidx892 = getelementptr i8, ptr %arrayidx690, i64 112
  store double %mul889, ptr %arrayidx892, align 8, !tbaa !10
  %arrayidx902 = getelementptr i8, ptr %arrayidx690, i64 120
  store double %fneg899, ptr %arrayidx902, align 8, !tbaa !10
  %arrayidx910 = getelementptr i8, ptr %arrayidx690, i64 128
  store double %mul907, ptr %arrayidx910, align 8, !tbaa !10
  br label %for.inc

sw.bb911:                                         ; preds = %for.body
  %idxprom918 = sext i32 %add4 to i64
  %arrayidx919 = getelementptr inbounds double, ptr %rn, i64 %idxprom918
  store double %fneg917, ptr %arrayidx919, align 8, !tbaa !10
  %add926 = add i32 %sub, %i.01616
  %idxprom927 = sext i32 %add926 to i64
  %arrayidx928 = getelementptr inbounds double, ptr %rn, i64 %idxprom927
  store double %mul925, ptr %arrayidx928, align 8, !tbaa !10
  %arrayidx940 = getelementptr i8, ptr %arrayidx919, i64 16
  store double %fneg937, ptr %arrayidx940, align 8, !tbaa !10
  %arrayidx953 = getelementptr i8, ptr %arrayidx919, i64 24
  store double %mul950, ptr %arrayidx953, align 8, !tbaa !10
  %arrayidx969 = getelementptr i8, ptr %arrayidx919, i64 32
  store double %fneg966, ptr %arrayidx969, align 8, !tbaa !10
  %arrayidx984 = getelementptr i8, ptr %arrayidx919, i64 40
  store double %mul981, ptr %arrayidx984, align 8, !tbaa !10
  %arrayidx1002 = getelementptr i8, ptr %arrayidx919, i64 48
  store double %fneg999, ptr %arrayidx1002, align 8, !tbaa !10
  %arrayidx1018 = getelementptr i8, ptr %arrayidx919, i64 56
  store double %mul1015, ptr %arrayidx1018, align 8, !tbaa !10
  %arrayidx1038 = getelementptr i8, ptr %arrayidx919, i64 64
  store double %fneg1035, ptr %arrayidx1038, align 8, !tbaa !10
  %arrayidx1051 = getelementptr i8, ptr %arrayidx919, i64 72
  store double %2186, ptr %arrayidx1051, align 8, !tbaa !10
  %arrayidx1071 = getelementptr i8, ptr %arrayidx919, i64 80
  store double %fneg1068, ptr %arrayidx1071, align 8, !tbaa !10
  %arrayidx1087 = getelementptr i8, ptr %arrayidx919, i64 88
  store double %mul1084, ptr %arrayidx1087, align 8, !tbaa !10
  %arrayidx1105 = getelementptr i8, ptr %arrayidx919, i64 96
  store double %fneg1102, ptr %arrayidx1105, align 8, !tbaa !10
  %arrayidx1120 = getelementptr i8, ptr %arrayidx919, i64 104
  store double %mul1117, ptr %arrayidx1120, align 8, !tbaa !10
  %arrayidx1136 = getelementptr i8, ptr %arrayidx919, i64 112
  store double %fneg1133, ptr %arrayidx1136, align 8, !tbaa !10
  %arrayidx1149 = getelementptr i8, ptr %arrayidx919, i64 120
  store double %mul1146, ptr %arrayidx1149, align 8, !tbaa !10
  %arrayidx1161 = getelementptr i8, ptr %arrayidx919, i64 128
  store double %fneg1158, ptr %arrayidx1161, align 8, !tbaa !10
  %arrayidx1170 = getelementptr i8, ptr %arrayidx919, i64 136
  store double %mul1167, ptr %arrayidx1170, align 8, !tbaa !10
  %arrayidx1179 = getelementptr i8, ptr %arrayidx919, i64 144
  store double %fneg1176, ptr %arrayidx1179, align 8, !tbaa !10
  br label %for.inc

sw.bb1180:                                        ; preds = %for.body
  %idxprom1186 = sext i32 %add4 to i64
  %arrayidx1187 = getelementptr inbounds double, ptr %rn, i64 %idxprom1186
  store double %mul1185, ptr %arrayidx1187, align 8, !tbaa !10
  %add1195 = add i32 %sub, %i.01616
  %idxprom1196 = sext i32 %add1195 to i64
  %arrayidx1197 = getelementptr inbounds double, ptr %rn, i64 %idxprom1196
  store double %fneg1194, ptr %arrayidx1197, align 8, !tbaa !10
  %arrayidx1208 = getelementptr i8, ptr %arrayidx1187, i64 16
  store double %mul1205, ptr %arrayidx1208, align 8, !tbaa !10
  %arrayidx1222 = getelementptr i8, ptr %arrayidx1187, i64 24
  store double %fneg1219, ptr %arrayidx1222, align 8, !tbaa !10
  %arrayidx1237 = getelementptr i8, ptr %arrayidx1187, i64 32
  store double %mul1234, ptr %arrayidx1237, align 8, !tbaa !10
  %arrayidx1253 = getelementptr i8, ptr %arrayidx1187, i64 40
  store double %fneg1250, ptr %arrayidx1253, align 8, !tbaa !10
  %arrayidx1270 = getelementptr i8, ptr %arrayidx1187, i64 48
  store double %mul1267, ptr %arrayidx1270, align 8, !tbaa !10
  %arrayidx1288 = getelementptr i8, ptr %arrayidx1187, i64 56
  store double %fneg1285, ptr %arrayidx1288, align 8, !tbaa !10
  %arrayidx1307 = getelementptr i8, ptr %arrayidx1187, i64 64
  store double %mul1304, ptr %arrayidx1307, align 8, !tbaa !10
  %arrayidx1326 = getelementptr i8, ptr %arrayidx1187, i64 72
  store double %fneg1323, ptr %arrayidx1326, align 8, !tbaa !10
  %arrayidx1341 = getelementptr i8, ptr %arrayidx1187, i64 80
  store double %sub1338, ptr %arrayidx1341, align 8, !tbaa !10
  %arrayidx1360 = getelementptr i8, ptr %arrayidx1187, i64 88
  store double %fneg1357, ptr %arrayidx1360, align 8, !tbaa !10
  %arrayidx1379 = getelementptr i8, ptr %arrayidx1187, i64 96
  store double %mul1376, ptr %arrayidx1379, align 8, !tbaa !10
  %arrayidx1397 = getelementptr i8, ptr %arrayidx1187, i64 104
  store double %fneg1394, ptr %arrayidx1397, align 8, !tbaa !10
  %arrayidx1414 = getelementptr i8, ptr %arrayidx1187, i64 112
  store double %mul1411, ptr %arrayidx1414, align 8, !tbaa !10
  %arrayidx1430 = getelementptr i8, ptr %arrayidx1187, i64 120
  store double %fneg1427, ptr %arrayidx1430, align 8, !tbaa !10
  %arrayidx1445 = getelementptr i8, ptr %arrayidx1187, i64 128
  store double %mul1442, ptr %arrayidx1445, align 8, !tbaa !10
  %arrayidx1459 = getelementptr i8, ptr %arrayidx1187, i64 136
  store double %fneg1456, ptr %arrayidx1459, align 8, !tbaa !10
  %arrayidx1470 = getelementptr i8, ptr %arrayidx1187, i64 144
  store double %mul1467, ptr %arrayidx1470, align 8, !tbaa !10
  %arrayidx1480 = getelementptr i8, ptr %arrayidx1187, i64 152
  store double %fneg1477, ptr %arrayidx1480, align 8, !tbaa !10
  %arrayidx1488 = getelementptr i8, ptr %arrayidx1187, i64 160
  store double %mul1485, ptr %arrayidx1488, align 8, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %sw.bb1180, %sw.bb911, %sw.bb683, %sw.bb492, %sw.bb337, %sw.bb214, %sw.bb123, %sw.bb60, %sw.bb19, %sw.bb, %for.body
  %inc = add nuw i32 %l.01617, 1
  %exitcond.not = icmp eq i32 %l.01617, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !16
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #1

; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite)
define hidden void @calc_zn_rad(i32 noundef %n, double noundef %rho, ptr noundef captures(none) initializes((0, 8)) %zn_rad) local_unnamed_addr #2 {
entry:
  store double 1.000000e+00, ptr %zn_rad, align 8, !tbaa !10
  %cmp.not33 = icmp slt i32 %n, 2
  br i1 %cmp.not33, label %for.cond.cleanup, label %if.then.peel

if.then.peel:                                     ; preds = %entry
  %mul = fmul double %rho, %rho
  %0 = tail call double @llvm.fmuladd.f64(double %mul, double 2.000000e+00, double -1.000000e+00)
  %arrayidx4.peel = getelementptr inbounds nuw i8, ptr %zn_rad, i64 8
  store double %0, ptr %arrayidx4.peel, align 8, !tbaa !10
  %cmp.not.peel = icmp samesign ult i32 %n, 4
  br i1 %cmp.not.peel, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then.peel, %entry
  ret void

for.body:                                         ; preds = %for.body, %if.then.peel
  %p.034 = phi i32 [ %add51, %for.body ], [ 4, %if.then.peel ]
  %div = lshr exact i32 %p.034, 1
  %conv = uitofp nneg i32 %p.034 to double
  %mul6 = fmul double %conv, %conv
  %sub7 = add nsw i32 %p.034, -2
  %conv8 = sitofp i32 %sub7 to double
  %mul9 = fmul double %mul6, %conv8
  %div10 = fmul double %mul9, 5.000000e-01
  %mul11 = shl nuw nsw i32 %p.034, 1
  %sub12 = add nsw i32 %p.034, -1
  %mul13 = mul nsw i32 %mul11, %sub12
  %mul15 = mul nsw i32 %mul13, %sub7
  %conv16 = sitofp i32 %mul15 to double
  %conv19 = sitofp i32 %sub12 to double
  %mul22 = mul i32 %sub7, %sub12
  %mul24 = mul i32 %mul22, %p.034
  %conv25 = sitofp i32 %mul24 to double
  %neg26 = fneg double %conv25
  %1 = tail call double @llvm.fmuladd.f64(double %conv19, double -0.000000e+00, double %neg26)
  %sub27 = sub nsw i32 0, %p.034
  %conv28 = sitofp i32 %sub27 to double
  %mul32 = fmul double %conv28, %conv8
  %mul36 = fmul double %mul32, %conv8
  %div37 = fmul double %mul36, 5.000000e-01
  %mul38 = fmul double %rho, %conv16
  %2 = tail call double @llvm.fmuladd.f64(double %mul38, double %rho, double %1)
  %3 = zext nneg i32 %div to i64
  %4 = getelementptr double, ptr %zn_rad, i64 %3
  %arrayidx42 = getelementptr i8, ptr %4, i64 -8
  %5 = load double, ptr %arrayidx42, align 8, !tbaa !10
  %arrayidx46 = getelementptr i8, ptr %4, i64 -16
  %6 = load double, ptr %arrayidx46, align 8, !tbaa !10
  %mul47 = fmul double %div37, %6
  %7 = tail call double @llvm.fmuladd.f64(double %2, double %5, double %mul47)
  %div48 = fdiv double %7, %div10
  store double %div48, ptr %4, align 8, !tbaa !10
  %add51 = add nuw nsw i32 %p.034, 2
  %cmp.not = icmp sgt i32 %add51, %n
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !17
}

; Function Attrs: convergent mustprogress nounwind
define hidden %"struct.openmc::Position" @_ZN6openmc12rotate_angleENS_8PositionEdPKdPm(double %u.coerce0, double %u.coerce1, double %u.coerce2, double noundef %mu, ptr noundef readonly captures(address_is_null) %phi, ptr noundef %seed) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp eq ptr %phi, null
  br i1 %cmp.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %0 = load double, ptr %phi, align 8, !tbaa !10
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %mul = fmul double %call, 0x401921FB54442D28
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %phi_.0 = phi double [ %0, %if.then ], [ %mul, %if.else ]
  %1 = tail call double @llvm.fabs.f64(double %phi_.0) #7
  %2 = fcmp olt double %1, 0x41D0000000000000
  br i1 %2, label %3, label %22

3:                                                ; preds = %if.end
  %4 = fmul double %1, 0x3FE45F306DC9C883
  %5 = tail call double @llvm.rint.f64(double %4)
  %6 = tail call double @llvm.fma.f64(double %5, double 0xBFF921FB54442D18, double %1)
  %7 = tail call double @llvm.fma.f64(double %5, double 0xBC91A62633145C00, double %6)
  %8 = fmul double %5, 0x3C91A62633145C00
  %9 = fneg double %8
  %10 = tail call double @llvm.fma.f64(double %5, double 0x3C91A62633145C00, double %9)
  %11 = fsub double %6, %8
  %12 = fsub double %6, %11
  %13 = fsub double %12, %8
  %14 = fsub double %11, %7
  %15 = fadd double %14, %13
  %16 = fsub double %15, %10
  %17 = tail call double @llvm.fma.f64(double %5, double 0xB97B839A252049C0, double %16)
  %18 = fadd double %7, %17
  %19 = fsub double %18, %7
  %20 = fsub double %17, %19
  %21 = fptosi double %5 to i32
  br label %__ocml_sin_f64.exit

22:                                               ; preds = %if.end
  %23 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 0)
  %24 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 1)
  %25 = fcmp oge double %1, 0x7B00000000000000
  %26 = tail call double @llvm.ldexp.f64.i32(double %1, i32 -128)
  %27 = select i1 %25, double %26, double %1
  %28 = fmul double %24, %27
  %29 = fmul double %23, %27
  %30 = fneg double %29
  %31 = tail call double @llvm.fma.f64(double %23, double %27, double %30)
  %32 = fadd double %28, %31
  %33 = fadd double %29, %32
  %34 = tail call double @llvm.ldexp.f64.i32(double %33, i32 -2)
  %35 = tail call double @llvm.floor.f64(double %34)
  %36 = fsub double %34, %35
  %37 = tail call double @llvm.minnum.f64(double %36, double 0x3FEFFFFFFFFFFFFF)
  %38 = fcmp uno double %34, 0.000000e+00
  %39 = select i1 %38, double %34, double %37
  %40 = tail call double @llvm.fabs.f64(double %34)
  %41 = fcmp oeq double %40, 0x7FF0000000000000
  %42 = select i1 %41, double 0.000000e+00, double %39
  %43 = fsub double %32, %28
  %44 = fsub double %31, %43
  %45 = fsub double %32, %43
  %46 = fsub double %28, %45
  %47 = fadd double %44, %46
  %48 = fneg double %28
  %49 = tail call double @llvm.fma.f64(double %24, double %27, double %48)
  %50 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 2)
  %51 = fmul double %50, %27
  %52 = fadd double %51, %49
  %53 = fadd double %52, %47
  %54 = fsub double %33, %29
  %55 = fsub double %32, %54
  %56 = fadd double %55, %53
  %57 = fsub double %56, %55
  %58 = fsub double %53, %57
  %59 = fsub double %53, %52
  %60 = fsub double %47, %59
  %61 = fsub double %53, %59
  %62 = fsub double %52, %61
  %63 = fadd double %60, %62
  %64 = fsub double %52, %51
  %65 = fsub double %49, %64
  %66 = fsub double %52, %64
  %67 = fsub double %51, %66
  %68 = fadd double %65, %67
  %69 = fadd double %68, %63
  %70 = fneg double %51
  %71 = tail call double @llvm.fma.f64(double %50, double %27, double %70)
  %72 = fadd double %71, %69
  %73 = fadd double %58, %72
  %74 = tail call double @llvm.ldexp.f64.i32(double %42, i32 2)
  %75 = fadd double %56, %74
  %76 = fcmp olt double %75, 0.000000e+00
  %77 = select i1 %76, double 4.000000e+00, double 0.000000e+00
  %78 = fadd double %74, %77
  %79 = fadd double %56, %78
  %80 = fptosi double %79 to i32
  %81 = sitofp i32 %80 to double
  %82 = fsub double %78, %81
  %83 = fadd double %56, %82
  %84 = fsub double %83, %82
  %85 = fsub double %56, %84
  %86 = fadd double %73, %85
  %87 = fcmp oge double %83, 5.000000e-01
  %88 = zext i1 %87 to i32
  %89 = add nsw i32 %88, %80
  %90 = select i1 %87, double 1.000000e+00, double 0.000000e+00
  %91 = fsub double %83, %90
  %92 = fadd double %91, %86
  %93 = fsub double %92, %91
  %94 = fsub double %86, %93
  %95 = fmul double %92, 0x3FF921FB54442D18
  %96 = fneg double %95
  %97 = tail call double @llvm.fma.f64(double %92, double 0x3FF921FB54442D18, double %96)
  %98 = tail call double @llvm.fma.f64(double %92, double 0x3C91A62633145C07, double %97)
  %99 = tail call double @llvm.fma.f64(double %94, double 0x3FF921FB54442D18, double %98)
  %100 = fadd double %95, %99
  %101 = fsub double %100, %95
  %102 = fsub double %99, %101
  br label %__ocml_sin_f64.exit

__ocml_sin_f64.exit:                              ; preds = %22, %3
  %.pn5.i.i = phi double [ %20, %3 ], [ %102, %22 ]
  %.pn3.i.i = phi double [ %18, %3 ], [ %100, %22 ]
  %.pn1.in.i.i = phi i32 [ %21, %3 ], [ %89, %22 ]
  %103 = fmul double %.pn3.i.i, %.pn3.i.i
  %104 = fmul double %103, 5.000000e-01
  %105 = fsub double 1.000000e+00, %104
  %106 = fsub double 1.000000e+00, %105
  %107 = fsub double %106, %104
  %108 = fmul double %103, %103
  %109 = tail call double @llvm.fma.f64(double %103, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %110 = tail call double @llvm.fma.f64(double %103, double %109, double 0xBE927E4FA17F65F6)
  %111 = tail call double @llvm.fma.f64(double %103, double %110, double 0x3EFA01A019F4EC90)
  %112 = tail call double @llvm.fma.f64(double %103, double %111, double 0xBF56C16C16C16967)
  %113 = tail call double @llvm.fma.f64(double %103, double %112, double 0x3FA5555555555555)
  %114 = fneg double %.pn5.i.i
  %115 = tail call double @llvm.fma.f64(double %.pn3.i.i, double %114, double %107)
  %116 = tail call double @llvm.fma.f64(double %108, double %113, double %115)
  %117 = fadd double %105, %116
  %118 = tail call double @llvm.fma.f64(double %103, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %119 = tail call double @llvm.fma.f64(double %103, double %118, double 0x3EC71DE3796CDE01)
  %120 = tail call double @llvm.fma.f64(double %103, double %119, double 0xBF2A01A019E83E5C)
  %121 = tail call double @llvm.fma.f64(double %103, double %120, double 0x3F81111111110BB3)
  %122 = fneg double %103
  %123 = fmul double %.pn3.i.i, %122
  %124 = fmul double %.pn5.i.i, 5.000000e-01
  %125 = tail call double @llvm.fma.f64(double %123, double %121, double %124)
  %126 = tail call double @llvm.fma.f64(double %103, double %125, double %114)
  %127 = tail call double @llvm.fma.f64(double %123, double 0xBFC5555555555555, double %126)
  %128 = fsub double %.pn3.i.i, %127
  %129 = and i32 %.pn1.in.i.i, 1
  %130 = icmp eq i32 %129, 0
  %131 = select i1 %130, double %128, double %117
  %132 = bitcast double %131 to <2 x i32>
  %.pn1.i.i = shl i32 %.pn1.in.i.i, 30
  %133 = bitcast double %phi_.0 to <2 x i32>
  %134 = extractelement <2 x i32> %133, i64 1
  %135 = xor i32 %.pn1.i.i, %134
  %136 = and i32 %135, -2147483648
  %137 = extractelement <2 x i32> %132, i64 1
  %138 = xor i32 %137, %136
  %139 = insertelement <2 x i32> %132, i32 %138, i64 1
  %140 = fcmp one double %1, 0x7FF0000000000000
  %141 = select i1 %140, <2 x i32> %139, <2 x i32> <i32 0, i32 2146959360>
  %142 = bitcast <2 x i32> %141 to double
  br i1 %2, label %143, label %162

143:                                              ; preds = %__ocml_sin_f64.exit
  %144 = fmul double %1, 0x3FE45F306DC9C883
  %145 = tail call double @llvm.rint.f64(double %144)
  %146 = tail call double @llvm.fma.f64(double %145, double 0xBFF921FB54442D18, double %1)
  %147 = tail call double @llvm.fma.f64(double %145, double 0xBC91A62633145C00, double %146)
  %148 = fmul double %145, 0x3C91A62633145C00
  %149 = fneg double %148
  %150 = tail call double @llvm.fma.f64(double %145, double 0x3C91A62633145C00, double %149)
  %151 = fsub double %146, %148
  %152 = fsub double %146, %151
  %153 = fsub double %152, %148
  %154 = fsub double %151, %147
  %155 = fadd double %154, %153
  %156 = fsub double %155, %150
  %157 = tail call double @llvm.fma.f64(double %145, double 0xB97B839A252049C0, double %156)
  %158 = fadd double %147, %157
  %159 = fsub double %158, %147
  %160 = fsub double %157, %159
  %161 = fptosi double %145 to i32
  br label %__ocml_cos_f64.exit

162:                                              ; preds = %__ocml_sin_f64.exit
  %163 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 0)
  %164 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 1)
  %165 = fcmp oge double %1, 0x7B00000000000000
  %166 = tail call double @llvm.ldexp.f64.i32(double %1, i32 -128)
  %167 = select i1 %165, double %166, double %1
  %168 = fmul double %164, %167
  %169 = fmul double %163, %167
  %170 = fneg double %169
  %171 = tail call double @llvm.fma.f64(double %163, double %167, double %170)
  %172 = fadd double %168, %171
  %173 = fadd double %169, %172
  %174 = tail call double @llvm.ldexp.f64.i32(double %173, i32 -2)
  %175 = tail call double @llvm.floor.f64(double %174)
  %176 = fsub double %174, %175
  %177 = tail call double @llvm.minnum.f64(double %176, double 0x3FEFFFFFFFFFFFFF)
  %178 = fcmp uno double %174, 0.000000e+00
  %179 = select i1 %178, double %174, double %177
  %180 = tail call double @llvm.fabs.f64(double %174)
  %181 = fcmp oeq double %180, 0x7FF0000000000000
  %182 = select i1 %181, double 0.000000e+00, double %179
  %183 = fsub double %172, %168
  %184 = fsub double %171, %183
  %185 = fsub double %172, %183
  %186 = fsub double %168, %185
  %187 = fadd double %184, %186
  %188 = fneg double %168
  %189 = tail call double @llvm.fma.f64(double %164, double %167, double %188)
  %190 = tail call double @llvm.amdgcn.trig.preop.f64(double %1, i32 2)
  %191 = fmul double %190, %167
  %192 = fadd double %191, %189
  %193 = fadd double %192, %187
  %194 = fsub double %173, %169
  %195 = fsub double %172, %194
  %196 = fadd double %195, %193
  %197 = fsub double %196, %195
  %198 = fsub double %193, %197
  %199 = fsub double %193, %192
  %200 = fsub double %187, %199
  %201 = fsub double %193, %199
  %202 = fsub double %192, %201
  %203 = fadd double %200, %202
  %204 = fsub double %192, %191
  %205 = fsub double %189, %204
  %206 = fsub double %192, %204
  %207 = fsub double %191, %206
  %208 = fadd double %205, %207
  %209 = fadd double %208, %203
  %210 = fneg double %191
  %211 = tail call double @llvm.fma.f64(double %190, double %167, double %210)
  %212 = fadd double %211, %209
  %213 = fadd double %198, %212
  %214 = tail call double @llvm.ldexp.f64.i32(double %182, i32 2)
  %215 = fadd double %196, %214
  %216 = fcmp olt double %215, 0.000000e+00
  %217 = select i1 %216, double 4.000000e+00, double 0.000000e+00
  %218 = fadd double %214, %217
  %219 = fadd double %196, %218
  %220 = fptosi double %219 to i32
  %221 = sitofp i32 %220 to double
  %222 = fsub double %218, %221
  %223 = fadd double %196, %222
  %224 = fsub double %223, %222
  %225 = fsub double %196, %224
  %226 = fadd double %213, %225
  %227 = fcmp oge double %223, 5.000000e-01
  %228 = zext i1 %227 to i32
  %229 = add nsw i32 %228, %220
  %230 = select i1 %227, double 1.000000e+00, double 0.000000e+00
  %231 = fsub double %223, %230
  %232 = fadd double %231, %226
  %233 = fsub double %232, %231
  %234 = fsub double %226, %233
  %235 = fmul double %232, 0x3FF921FB54442D18
  %236 = fneg double %235
  %237 = tail call double @llvm.fma.f64(double %232, double 0x3FF921FB54442D18, double %236)
  %238 = tail call double @llvm.fma.f64(double %232, double 0x3C91A62633145C07, double %237)
  %239 = tail call double @llvm.fma.f64(double %234, double 0x3FF921FB54442D18, double %238)
  %240 = fadd double %235, %239
  %241 = fsub double %240, %235
  %242 = fsub double %239, %241
  br label %__ocml_cos_f64.exit

__ocml_cos_f64.exit:                              ; preds = %162, %143
  %.pn5.i.i49 = phi double [ %160, %143 ], [ %242, %162 ]
  %.pn3.i.i50 = phi double [ %158, %143 ], [ %240, %162 ]
  %.pn1.in.i.i51 = phi i32 [ %161, %143 ], [ %229, %162 ]
  %243 = fmul double %.pn3.i.i50, %.pn3.i.i50
  %244 = fmul double %243, 5.000000e-01
  %245 = fsub double 1.000000e+00, %244
  %246 = fsub double 1.000000e+00, %245
  %247 = fsub double %246, %244
  %248 = fmul double %243, %243
  %249 = tail call double @llvm.fma.f64(double %243, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %250 = tail call double @llvm.fma.f64(double %243, double %249, double 0xBE927E4FA17F65F6)
  %251 = tail call double @llvm.fma.f64(double %243, double %250, double 0x3EFA01A019F4EC90)
  %252 = tail call double @llvm.fma.f64(double %243, double %251, double 0xBF56C16C16C16967)
  %253 = tail call double @llvm.fma.f64(double %243, double %252, double 0x3FA5555555555555)
  %254 = fneg double %.pn5.i.i49
  %255 = tail call double @llvm.fma.f64(double %.pn3.i.i50, double %254, double %247)
  %256 = tail call double @llvm.fma.f64(double %248, double %253, double %255)
  %257 = fadd double %245, %256
  %258 = tail call double @llvm.fma.f64(double %243, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %259 = tail call double @llvm.fma.f64(double %243, double %258, double 0x3EC71DE3796CDE01)
  %260 = tail call double @llvm.fma.f64(double %243, double %259, double 0xBF2A01A019E83E5C)
  %261 = tail call double @llvm.fma.f64(double %243, double %260, double 0x3F81111111110BB3)
  %262 = fneg double %243
  %263 = fmul double %.pn3.i.i50, %262
  %264 = fmul double %.pn5.i.i49, 5.000000e-01
  %265 = tail call double @llvm.fma.f64(double %263, double %261, double %264)
  %266 = tail call double @llvm.fma.f64(double %243, double %265, double %254)
  %267 = tail call double @llvm.fma.f64(double %263, double 0xBFC5555555555555, double %266)
  %268 = fsub double %.pn3.i.i50, %267
  %269 = fneg double %268
  %270 = and i32 %.pn1.in.i.i51, 1
  %271 = icmp eq i32 %270, 0
  %272 = select i1 %271, double %257, double %269
  %273 = bitcast double %272 to <2 x i32>
  %.pn1.i.i52 = shl i32 %.pn1.in.i.i51, 30
  %274 = and i32 %.pn1.i.i52, -2147483648
  %275 = extractelement <2 x i32> %273, i64 1
  %276 = xor i32 %275, %274
  %277 = insertelement <2 x i32> %273, i32 %276, i64 1
  %278 = select i1 %140, <2 x i32> %277, <2 x i32> <i32 0, i32 2146959360>
  %279 = bitcast <2 x i32> %278 to double
  %neg = fneg double %mu
  %280 = tail call double @llvm.fmuladd.f64(double %neg, double %mu, double 1.000000e+00)
  %281 = tail call noundef double @llvm.maxnum.f64(double %280, double 0.000000e+00) #7
  %282 = tail call noundef double @llvm.sqrt.f64(double %281) #7
  %neg9 = fneg double %u.coerce2
  %283 = tail call double @llvm.fmuladd.f64(double %neg9, double %u.coerce2, double 1.000000e+00)
  %284 = tail call noundef double @llvm.maxnum.f64(double %283, double 0.000000e+00) #7
  %285 = tail call noundef double @llvm.sqrt.f64(double %284) #7
  %cmp12 = fcmp ogt double %285, 1.000000e-10
  br i1 %cmp12, label %if.then13, label %if.else37

if.then13:                                        ; preds = %__ocml_cos_f64.exit
  %mul17 = fmul double %u.coerce0, %u.coerce2
  %286 = fneg double %142
  %neg20 = fmul double %u.coerce1, %286
  %287 = tail call double @llvm.fmuladd.f64(double %mul17, double %279, double %neg20)
  %mul21 = fmul double %282, %287
  %div = fdiv double %mul21, %285
  %288 = tail call double @llvm.fmuladd.f64(double %mu, double %u.coerce0, double %div)
  %mul26 = fmul double %u.coerce1, %u.coerce2
  %mul29 = fmul double %u.coerce0, %142
  %289 = tail call double @llvm.fmuladd.f64(double %mul26, double %279, double %mul29)
  %mul30 = fmul double %282, %289
  %div31 = fdiv double %mul30, %285
  %290 = tail call double @llvm.fmuladd.f64(double %mu, double %u.coerce1, double %div31)
  %mul34 = fmul double %285, %282
  %291 = fneg double %279
  %neg36 = fmul double %mul34, %291
  br label %cleanup

if.else37:                                        ; preds = %__ocml_cos_f64.exit
  %neg41 = fneg double %u.coerce1
  %292 = tail call double @llvm.fmuladd.f64(double %neg41, double %u.coerce1, double 1.000000e+00)
  %293 = tail call noundef double @llvm.sqrt.f64(double %292) #7
  %mul47 = fmul double %u.coerce0, %u.coerce1
  %mul50 = fmul double %u.coerce2, %142
  %294 = tail call double @llvm.fmuladd.f64(double %mul47, double %279, double %mul50)
  %mul51 = fmul double %282, %294
  %div52 = fdiv double %mul51, %293
  %295 = tail call double @llvm.fmuladd.f64(double %mu, double %u.coerce0, double %div52)
  %mul55 = fmul double %293, %282
  %296 = fneg double %279
  %neg57 = fmul double %mul55, %296
  %297 = tail call double @llvm.fmuladd.f64(double %mu, double %u.coerce1, double %neg57)
  %mul62 = fmul double %u.coerce1, %u.coerce2
  %298 = fneg double %142
  %neg66 = fmul double %u.coerce0, %298
  %299 = tail call double @llvm.fmuladd.f64(double %mul62, double %279, double %neg66)
  %mul67 = fmul double %282, %299
  %div68 = fdiv double %mul67, %293
  br label %cleanup

cleanup:                                          ; preds = %if.else37, %if.then13
  %div68.sink = phi double [ %div68, %if.else37 ], [ %neg36, %if.then13 ]
  %retval.sroa.3.0 = phi double [ %297, %if.else37 ], [ %290, %if.then13 ]
  %retval.sroa.0.0 = phi double [ %295, %if.else37 ], [ %288, %if.then13 ]
  %300 = tail call double @llvm.fmuladd.f64(double %mu, double %u.coerce2, double %div68.sink)
  %.fca.0.insert = insertvalue %"struct.openmc::Position" poison, double %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue %"struct.openmc::Position" %.fca.0.insert, double %retval.sroa.3.0, 1
  %.fca.2.insert = insertvalue %"struct.openmc::Position" %.fca.1.insert, double %300, 2
  ret %"struct.openmc::Position" %.fca.2.insert
}

; Function Attrs: convergent
declare noundef double @_ZN6openmc3prnEPm(ptr noundef) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.maxnum.f64(double, double) #1

; Function Attrs: convergent mustprogress nounwind
define hidden double @maxwell_spectrum(double noundef %T, ptr noundef %seed) local_unnamed_addr #4 {
entry:
  %call = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %call1 = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %call2 = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %mul = fmul double %call2, 0x3FF921FB54442D28
  %0 = tail call double @llvm.fabs.f64(double %mul) #7
  %1 = fcmp olt double %0, 0x41D0000000000000
  br i1 %1, label %2, label %21

2:                                                ; preds = %entry
  %3 = fmul double %0, 0x3FE45F306DC9C883
  %4 = tail call double @llvm.rint.f64(double %3)
  %5 = tail call double @llvm.fma.f64(double %4, double 0xBFF921FB54442D18, double %0)
  %6 = tail call double @llvm.fma.f64(double %4, double 0xBC91A62633145C00, double %5)
  %7 = fmul double %4, 0x3C91A62633145C00
  %8 = fneg double %7
  %9 = tail call double @llvm.fma.f64(double %4, double 0x3C91A62633145C00, double %8)
  %10 = fsub double %5, %7
  %11 = fsub double %5, %10
  %12 = fsub double %11, %7
  %13 = fsub double %10, %6
  %14 = fadd double %13, %12
  %15 = fsub double %14, %9
  %16 = tail call double @llvm.fma.f64(double %4, double 0xB97B839A252049C0, double %15)
  %17 = fadd double %6, %16
  %18 = fsub double %17, %6
  %19 = fsub double %16, %18
  %20 = fptosi double %4 to i32
  br label %__ocml_cos_f64.exit

21:                                               ; preds = %entry
  %22 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 0)
  %23 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 1)
  %24 = fcmp oge double %0, 0x7B00000000000000
  %25 = tail call double @llvm.ldexp.f64.i32(double %0, i32 -128)
  %26 = select i1 %24, double %25, double %0
  %27 = fmul double %23, %26
  %28 = fmul double %22, %26
  %29 = fneg double %28
  %30 = tail call double @llvm.fma.f64(double %22, double %26, double %29)
  %31 = fadd double %27, %30
  %32 = fadd double %28, %31
  %33 = tail call double @llvm.ldexp.f64.i32(double %32, i32 -2)
  %34 = tail call double @llvm.floor.f64(double %33)
  %35 = fsub double %33, %34
  %36 = tail call double @llvm.minnum.f64(double %35, double 0x3FEFFFFFFFFFFFFF)
  %37 = fcmp uno double %33, 0.000000e+00
  %38 = select i1 %37, double %33, double %36
  %39 = tail call double @llvm.fabs.f64(double %33)
  %40 = fcmp oeq double %39, 0x7FF0000000000000
  %41 = select i1 %40, double 0.000000e+00, double %38
  %42 = fsub double %31, %27
  %43 = fsub double %30, %42
  %44 = fsub double %31, %42
  %45 = fsub double %27, %44
  %46 = fadd double %43, %45
  %47 = fneg double %27
  %48 = tail call double @llvm.fma.f64(double %23, double %26, double %47)
  %49 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 2)
  %50 = fmul double %49, %26
  %51 = fadd double %50, %48
  %52 = fadd double %51, %46
  %53 = fsub double %32, %28
  %54 = fsub double %31, %53
  %55 = fadd double %54, %52
  %56 = fsub double %55, %54
  %57 = fsub double %52, %56
  %58 = fsub double %52, %51
  %59 = fsub double %46, %58
  %60 = fsub double %52, %58
  %61 = fsub double %51, %60
  %62 = fadd double %59, %61
  %63 = fsub double %51, %50
  %64 = fsub double %48, %63
  %65 = fsub double %51, %63
  %66 = fsub double %50, %65
  %67 = fadd double %64, %66
  %68 = fadd double %67, %62
  %69 = fneg double %50
  %70 = tail call double @llvm.fma.f64(double %49, double %26, double %69)
  %71 = fadd double %70, %68
  %72 = fadd double %57, %71
  %73 = tail call double @llvm.ldexp.f64.i32(double %41, i32 2)
  %74 = fadd double %55, %73
  %75 = fcmp olt double %74, 0.000000e+00
  %76 = select i1 %75, double 4.000000e+00, double 0.000000e+00
  %77 = fadd double %73, %76
  %78 = fadd double %55, %77
  %79 = fptosi double %78 to i32
  %80 = sitofp i32 %79 to double
  %81 = fsub double %77, %80
  %82 = fadd double %55, %81
  %83 = fsub double %82, %81
  %84 = fsub double %55, %83
  %85 = fadd double %72, %84
  %86 = fcmp oge double %82, 5.000000e-01
  %87 = zext i1 %86 to i32
  %88 = add nsw i32 %87, %79
  %89 = select i1 %86, double 1.000000e+00, double 0.000000e+00
  %90 = fsub double %82, %89
  %91 = fadd double %90, %85
  %92 = fsub double %91, %90
  %93 = fsub double %85, %92
  %94 = fmul double %91, 0x3FF921FB54442D18
  %95 = fneg double %94
  %96 = tail call double @llvm.fma.f64(double %91, double 0x3FF921FB54442D18, double %95)
  %97 = tail call double @llvm.fma.f64(double %91, double 0x3C91A62633145C07, double %96)
  %98 = tail call double @llvm.fma.f64(double %93, double 0x3FF921FB54442D18, double %97)
  %99 = fadd double %94, %98
  %100 = fsub double %99, %94
  %101 = fsub double %98, %100
  br label %__ocml_cos_f64.exit

__ocml_cos_f64.exit:                              ; preds = %21, %2
  %.pn5.i.i = phi double [ %19, %2 ], [ %101, %21 ]
  %.pn3.i.i = phi double [ %17, %2 ], [ %99, %21 ]
  %.pn1.in.i.i = phi i32 [ %20, %2 ], [ %88, %21 ]
  %102 = fmul double %.pn3.i.i, %.pn3.i.i
  %103 = fmul double %102, 5.000000e-01
  %104 = fsub double 1.000000e+00, %103
  %105 = fsub double 1.000000e+00, %104
  %106 = fsub double %105, %103
  %107 = fmul double %102, %102
  %108 = tail call double @llvm.fma.f64(double %102, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %109 = tail call double @llvm.fma.f64(double %102, double %108, double 0xBE927E4FA17F65F6)
  %110 = tail call double @llvm.fma.f64(double %102, double %109, double 0x3EFA01A019F4EC90)
  %111 = tail call double @llvm.fma.f64(double %102, double %110, double 0xBF56C16C16C16967)
  %112 = tail call double @llvm.fma.f64(double %102, double %111, double 0x3FA5555555555555)
  %113 = fneg double %.pn5.i.i
  %114 = tail call double @llvm.fma.f64(double %.pn3.i.i, double %113, double %106)
  %115 = tail call double @llvm.fma.f64(double %107, double %112, double %114)
  %116 = fadd double %104, %115
  %117 = tail call double @llvm.fma.f64(double %102, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %118 = tail call double @llvm.fma.f64(double %102, double %117, double 0x3EC71DE3796CDE01)
  %119 = tail call double @llvm.fma.f64(double %102, double %118, double 0xBF2A01A019E83E5C)
  %120 = tail call double @llvm.fma.f64(double %102, double %119, double 0x3F81111111110BB3)
  %121 = fneg double %102
  %122 = fmul double %.pn3.i.i, %121
  %123 = fmul double %.pn5.i.i, 5.000000e-01
  %124 = tail call double @llvm.fma.f64(double %122, double %120, double %123)
  %125 = tail call double @llvm.fma.f64(double %102, double %124, double %113)
  %126 = tail call double @llvm.fma.f64(double %122, double 0xBFC5555555555555, double %125)
  %127 = fsub double %.pn3.i.i, %126
  %128 = fneg double %127
  %129 = and i32 %.pn1.in.i.i, 1
  %130 = icmp eq i32 %129, 0
  %131 = select i1 %130, double %116, double %128
  %132 = bitcast double %131 to <2 x i32>
  %.pn1.i.i = shl i32 %.pn1.in.i.i, 30
  %133 = and i32 %.pn1.i.i, -2147483648
  %134 = extractelement <2 x i32> %132, i64 1
  %135 = xor i32 %134, %133
  %136 = insertelement <2 x i32> %132, i32 %135, i64 1
  %137 = fcmp one double %0, 0x7FF0000000000000
  %138 = select i1 %137, <2 x i32> %136, <2 x i32> <i32 0, i32 2146959360>
  %139 = bitcast <2 x i32> %138 to double
  %fneg = fneg double %T
  %140 = tail call double @llvm.amdgcn.frexp.mant.f64(double %call)
  %141 = fcmp olt double %140, 0x3FE5555555555555
  %.neg.i = sext i1 %141 to i32
  %142 = select i1 %141, double 2.000000e+00, double 1.000000e+00
  %143 = fmul double %140, %142
  %144 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %call)
  %145 = add i32 %144, %.neg.i
  %146 = fadd double %143, -1.000000e+00
  %147 = fadd double %143, 1.000000e+00
  %148 = fadd double %147, -1.000000e+00
  %149 = fsub double %143, %148
  %150 = tail call double @llvm.amdgcn.rcp.f64(double %147)
  %151 = fneg double %147
  %152 = tail call double @llvm.fma.f64(double %151, double %150, double 1.000000e+00)
  %153 = tail call double @llvm.fma.f64(double %152, double %150, double %150)
  %154 = tail call double @llvm.fma.f64(double %151, double %153, double 1.000000e+00)
  %155 = tail call double @llvm.fma.f64(double %154, double %153, double %153)
  %156 = fmul double %146, %155
  %157 = fmul double %147, %156
  %158 = fneg double %157
  %159 = tail call double @llvm.fma.f64(double %156, double %147, double %158)
  %160 = tail call double @llvm.fma.f64(double %156, double %149, double %159)
  %161 = fadd double %157, %160
  %162 = fsub double %161, %157
  %163 = fsub double %146, %161
  %164 = fsub double %146, %163
  %165 = fsub double %164, %161
  %166 = fsub double %162, %160
  %167 = fadd double %166, %165
  %168 = fadd double %163, %167
  %169 = fmul double %155, %168
  %170 = fadd double %156, %169
  %171 = fsub double %170, %156
  %172 = fsub double %169, %171
  %173 = fmul double %170, %170
  %174 = tail call double @llvm.fma.f64(double %173, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %175 = tail call double @llvm.fma.f64(double %173, double %174, double 0x3FC7474DD7F4DF2E)
  %176 = tail call double @llvm.fma.f64(double %173, double %175, double 0x3FCC71C016291751)
  %177 = tail call double @llvm.fma.f64(double %173, double %176, double 0x3FD249249B27ACF1)
  %178 = tail call double @llvm.fma.f64(double %173, double %177, double 0x3FD99999998EF7B6)
  %179 = tail call double @llvm.fma.f64(double %173, double %178, double 0x3FE5555555555780)
  %180 = tail call double @llvm.ldexp.f64.i32(double %170, i32 1)
  %181 = tail call double @llvm.ldexp.f64.i32(double %172, i32 1)
  %182 = fmul double %170, %173
  %183 = fmul double %182, %179
  %184 = fadd double %180, %183
  %185 = fsub double %184, %180
  %186 = fsub double %183, %185
  %187 = fadd double %181, %186
  %188 = fadd double %184, %187
  %189 = fsub double %188, %184
  %190 = fsub double %187, %189
  %191 = sitofp i32 %145 to double
  %192 = fmul double %191, 0x3FE62E42FEFA39EF
  %193 = fneg double %192
  %194 = tail call double @llvm.fma.f64(double %191, double 0x3FE62E42FEFA39EF, double %193)
  %195 = tail call double @llvm.fma.f64(double %191, double 0x3C7ABC9E3B39803F, double %194)
  %196 = fadd double %192, %195
  %197 = fsub double %196, %192
  %198 = fsub double %195, %197
  %199 = fadd double %196, %188
  %200 = fsub double %199, %196
  %201 = fsub double %199, %200
  %202 = fsub double %196, %201
  %203 = fsub double %188, %200
  %204 = fadd double %203, %202
  %205 = fadd double %198, %190
  %206 = fsub double %205, %198
  %207 = fsub double %205, %206
  %208 = fsub double %198, %207
  %209 = fsub double %190, %206
  %210 = fadd double %209, %208
  %211 = fadd double %205, %204
  %212 = fadd double %199, %211
  %213 = fsub double %212, %199
  %214 = fsub double %211, %213
  %215 = fadd double %210, %214
  %216 = fadd double %212, %215
  %217 = tail call double @llvm.fabs.f64(double %call)
  %218 = fcmp oeq double %217, 0x7FF0000000000000
  %219 = select i1 %218, double %call, double %216
  %220 = fcmp olt double %call, 0.000000e+00
  %221 = select i1 %220, double 0x7FF8000000000000, double %219
  %222 = fcmp oeq double %call, 0.000000e+00
  %223 = select i1 %222, double 0xFFF0000000000000, double %221
  %224 = tail call double @llvm.amdgcn.frexp.mant.f64(double %call1)
  %225 = fcmp olt double %224, 0x3FE5555555555555
  %.neg.i6 = sext i1 %225 to i32
  %226 = select i1 %225, double 2.000000e+00, double 1.000000e+00
  %227 = fmul double %224, %226
  %228 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %call1)
  %229 = add i32 %228, %.neg.i6
  %230 = fadd double %227, -1.000000e+00
  %231 = fadd double %227, 1.000000e+00
  %232 = fadd double %231, -1.000000e+00
  %233 = fsub double %227, %232
  %234 = tail call double @llvm.amdgcn.rcp.f64(double %231)
  %235 = fneg double %231
  %236 = tail call double @llvm.fma.f64(double %235, double %234, double 1.000000e+00)
  %237 = tail call double @llvm.fma.f64(double %236, double %234, double %234)
  %238 = tail call double @llvm.fma.f64(double %235, double %237, double 1.000000e+00)
  %239 = tail call double @llvm.fma.f64(double %238, double %237, double %237)
  %240 = fmul double %230, %239
  %241 = fmul double %231, %240
  %242 = fneg double %241
  %243 = tail call double @llvm.fma.f64(double %240, double %231, double %242)
  %244 = tail call double @llvm.fma.f64(double %240, double %233, double %243)
  %245 = fadd double %241, %244
  %246 = fsub double %245, %241
  %247 = fsub double %230, %245
  %248 = fsub double %230, %247
  %249 = fsub double %248, %245
  %250 = fsub double %246, %244
  %251 = fadd double %250, %249
  %252 = fadd double %247, %251
  %253 = fmul double %239, %252
  %254 = fadd double %240, %253
  %255 = fsub double %254, %240
  %256 = fsub double %253, %255
  %257 = fmul double %254, %254
  %258 = tail call double @llvm.fma.f64(double %257, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %259 = tail call double @llvm.fma.f64(double %257, double %258, double 0x3FC7474DD7F4DF2E)
  %260 = tail call double @llvm.fma.f64(double %257, double %259, double 0x3FCC71C016291751)
  %261 = tail call double @llvm.fma.f64(double %257, double %260, double 0x3FD249249B27ACF1)
  %262 = tail call double @llvm.fma.f64(double %257, double %261, double 0x3FD99999998EF7B6)
  %263 = tail call double @llvm.fma.f64(double %257, double %262, double 0x3FE5555555555780)
  %264 = tail call double @llvm.ldexp.f64.i32(double %254, i32 1)
  %265 = tail call double @llvm.ldexp.f64.i32(double %256, i32 1)
  %266 = fmul double %254, %257
  %267 = fmul double %266, %263
  %268 = fadd double %264, %267
  %269 = fsub double %268, %264
  %270 = fsub double %267, %269
  %271 = fadd double %265, %270
  %272 = fadd double %268, %271
  %273 = fsub double %272, %268
  %274 = fsub double %271, %273
  %275 = sitofp i32 %229 to double
  %276 = fmul double %275, 0x3FE62E42FEFA39EF
  %277 = fneg double %276
  %278 = tail call double @llvm.fma.f64(double %275, double 0x3FE62E42FEFA39EF, double %277)
  %279 = tail call double @llvm.fma.f64(double %275, double 0x3C7ABC9E3B39803F, double %278)
  %280 = fadd double %276, %279
  %281 = fsub double %280, %276
  %282 = fsub double %279, %281
  %283 = fadd double %280, %272
  %284 = fsub double %283, %280
  %285 = fsub double %283, %284
  %286 = fsub double %280, %285
  %287 = fsub double %272, %284
  %288 = fadd double %287, %286
  %289 = fadd double %282, %274
  %290 = fsub double %289, %282
  %291 = fsub double %289, %290
  %292 = fsub double %282, %291
  %293 = fsub double %274, %290
  %294 = fadd double %293, %292
  %295 = fadd double %289, %288
  %296 = fadd double %283, %295
  %297 = fsub double %296, %283
  %298 = fsub double %295, %297
  %299 = fadd double %294, %298
  %300 = fadd double %296, %299
  %301 = tail call double @llvm.fabs.f64(double %call1)
  %302 = fcmp oeq double %301, 0x7FF0000000000000
  %303 = select i1 %302, double %call1, double %300
  %304 = fcmp olt double %call1, 0.000000e+00
  %305 = select i1 %304, double 0x7FF8000000000000, double %303
  %306 = fcmp oeq double %call1, 0.000000e+00
  %307 = select i1 %306, double 0xFFF0000000000000, double %305
  %mul6 = fmul double %307, %139
  %308 = tail call double @llvm.fmuladd.f64(double %mul6, double %139, double %223)
  %mul8 = fmul double %308, %fneg
  ret double %mul8
}

; Function Attrs: convergent mustprogress nounwind
define hidden double @watt_spectrum(double noundef %a, double noundef %b, ptr noundef %seed) local_unnamed_addr #4 {
entry:
  %call.i = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %call1.i = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %call2.i = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %mul.i = fmul double %call2.i, 0x3FF921FB54442D28
  %0 = tail call double @llvm.fabs.f64(double %mul.i) #7
  %1 = fcmp olt double %0, 0x41D0000000000000
  br i1 %1, label %2, label %21

2:                                                ; preds = %entry
  %3 = fmul double %0, 0x3FE45F306DC9C883
  %4 = tail call double @llvm.rint.f64(double %3)
  %5 = tail call double @llvm.fma.f64(double %4, double 0xBFF921FB54442D18, double %0)
  %6 = tail call double @llvm.fma.f64(double %4, double 0xBC91A62633145C00, double %5)
  %7 = fmul double %4, 0x3C91A62633145C00
  %8 = fneg double %7
  %9 = tail call double @llvm.fma.f64(double %4, double 0x3C91A62633145C00, double %8)
  %10 = fsub double %5, %7
  %11 = fsub double %5, %10
  %12 = fsub double %11, %7
  %13 = fsub double %10, %6
  %14 = fadd double %13, %12
  %15 = fsub double %14, %9
  %16 = tail call double @llvm.fma.f64(double %4, double 0xB97B839A252049C0, double %15)
  %17 = fadd double %6, %16
  %18 = fsub double %17, %6
  %19 = fsub double %16, %18
  %20 = fptosi double %4 to i32
  br label %maxwell_spectrum.internalized.exit

21:                                               ; preds = %entry
  %22 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 0)
  %23 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 1)
  %24 = fcmp oge double %0, 0x7B00000000000000
  %25 = tail call double @llvm.ldexp.f64.i32(double %0, i32 -128)
  %26 = select i1 %24, double %25, double %0
  %27 = fmul double %23, %26
  %28 = fmul double %22, %26
  %29 = fneg double %28
  %30 = tail call double @llvm.fma.f64(double %22, double %26, double %29)
  %31 = fadd double %27, %30
  %32 = fadd double %28, %31
  %33 = tail call double @llvm.ldexp.f64.i32(double %32, i32 -2)
  %34 = tail call double @llvm.floor.f64(double %33)
  %35 = fsub double %33, %34
  %36 = tail call double @llvm.minnum.f64(double %35, double 0x3FEFFFFFFFFFFFFF)
  %37 = fcmp uno double %33, 0.000000e+00
  %38 = select i1 %37, double %33, double %36
  %39 = tail call double @llvm.fabs.f64(double %33)
  %40 = fcmp oeq double %39, 0x7FF0000000000000
  %41 = select i1 %40, double 0.000000e+00, double %38
  %42 = fsub double %31, %27
  %43 = fsub double %30, %42
  %44 = fsub double %31, %42
  %45 = fsub double %27, %44
  %46 = fadd double %43, %45
  %47 = fneg double %27
  %48 = tail call double @llvm.fma.f64(double %23, double %26, double %47)
  %49 = tail call double @llvm.amdgcn.trig.preop.f64(double %0, i32 2)
  %50 = fmul double %49, %26
  %51 = fadd double %50, %48
  %52 = fadd double %51, %46
  %53 = fsub double %32, %28
  %54 = fsub double %31, %53
  %55 = fadd double %54, %52
  %56 = fsub double %55, %54
  %57 = fsub double %52, %56
  %58 = fsub double %52, %51
  %59 = fsub double %46, %58
  %60 = fsub double %52, %58
  %61 = fsub double %51, %60
  %62 = fadd double %59, %61
  %63 = fsub double %51, %50
  %64 = fsub double %48, %63
  %65 = fsub double %51, %63
  %66 = fsub double %50, %65
  %67 = fadd double %64, %66
  %68 = fadd double %67, %62
  %69 = fneg double %50
  %70 = tail call double @llvm.fma.f64(double %49, double %26, double %69)
  %71 = fadd double %70, %68
  %72 = fadd double %57, %71
  %73 = tail call double @llvm.ldexp.f64.i32(double %41, i32 2)
  %74 = fadd double %55, %73
  %75 = fcmp olt double %74, 0.000000e+00
  %76 = select i1 %75, double 4.000000e+00, double 0.000000e+00
  %77 = fadd double %73, %76
  %78 = fadd double %55, %77
  %79 = fptosi double %78 to i32
  %80 = sitofp i32 %79 to double
  %81 = fsub double %77, %80
  %82 = fadd double %55, %81
  %83 = fsub double %82, %81
  %84 = fsub double %55, %83
  %85 = fadd double %72, %84
  %86 = fcmp oge double %82, 5.000000e-01
  %87 = zext i1 %86 to i32
  %88 = add nsw i32 %87, %79
  %89 = select i1 %86, double 1.000000e+00, double 0.000000e+00
  %90 = fsub double %82, %89
  %91 = fadd double %90, %85
  %92 = fsub double %91, %90
  %93 = fsub double %85, %92
  %94 = fmul double %91, 0x3FF921FB54442D18
  %95 = fneg double %94
  %96 = tail call double @llvm.fma.f64(double %91, double 0x3FF921FB54442D18, double %95)
  %97 = tail call double @llvm.fma.f64(double %91, double 0x3C91A62633145C07, double %96)
  %98 = tail call double @llvm.fma.f64(double %93, double 0x3FF921FB54442D18, double %97)
  %99 = fadd double %94, %98
  %100 = fsub double %99, %94
  %101 = fsub double %98, %100
  br label %maxwell_spectrum.internalized.exit

maxwell_spectrum.internalized.exit:               ; preds = %21, %2
  %.pn5.i.i.i = phi double [ %19, %2 ], [ %101, %21 ]
  %.pn3.i.i.i = phi double [ %17, %2 ], [ %99, %21 ]
  %.pn1.in.i.i.i = phi i32 [ %20, %2 ], [ %88, %21 ]
  %102 = fmul double %.pn3.i.i.i, %.pn3.i.i.i
  %103 = fmul double %102, 5.000000e-01
  %104 = fsub double 1.000000e+00, %103
  %105 = fsub double 1.000000e+00, %104
  %106 = fsub double %105, %103
  %107 = fmul double %102, %102
  %108 = tail call double @llvm.fma.f64(double %102, double 0xBDA907DB46CC5E42, double 0x3E21EEB69037AB78)
  %109 = tail call double @llvm.fma.f64(double %102, double %108, double 0xBE927E4FA17F65F6)
  %110 = tail call double @llvm.fma.f64(double %102, double %109, double 0x3EFA01A019F4EC90)
  %111 = tail call double @llvm.fma.f64(double %102, double %110, double 0xBF56C16C16C16967)
  %112 = tail call double @llvm.fma.f64(double %102, double %111, double 0x3FA5555555555555)
  %113 = fneg double %.pn5.i.i.i
  %114 = tail call double @llvm.fma.f64(double %.pn3.i.i.i, double %113, double %106)
  %115 = tail call double @llvm.fma.f64(double %107, double %112, double %114)
  %116 = fadd double %104, %115
  %117 = tail call double @llvm.fma.f64(double %102, double 0x3DE5E0B2F9A43BB8, double 0xBE5AE600B42FDFA7)
  %118 = tail call double @llvm.fma.f64(double %102, double %117, double 0x3EC71DE3796CDE01)
  %119 = tail call double @llvm.fma.f64(double %102, double %118, double 0xBF2A01A019E83E5C)
  %120 = tail call double @llvm.fma.f64(double %102, double %119, double 0x3F81111111110BB3)
  %121 = fneg double %102
  %122 = fmul double %.pn3.i.i.i, %121
  %123 = fmul double %.pn5.i.i.i, 5.000000e-01
  %124 = tail call double @llvm.fma.f64(double %122, double %120, double %123)
  %125 = tail call double @llvm.fma.f64(double %102, double %124, double %113)
  %126 = tail call double @llvm.fma.f64(double %122, double 0xBFC5555555555555, double %125)
  %127 = fsub double %.pn3.i.i.i, %126
  %128 = fneg double %127
  %129 = and i32 %.pn1.in.i.i.i, 1
  %130 = icmp eq i32 %129, 0
  %131 = select i1 %130, double %116, double %128
  %132 = bitcast double %131 to <2 x i32>
  %.pn1.i.i.i = shl i32 %.pn1.in.i.i.i, 30
  %133 = and i32 %.pn1.i.i.i, -2147483648
  %134 = extractelement <2 x i32> %132, i64 1
  %135 = xor i32 %134, %133
  %136 = insertelement <2 x i32> %132, i32 %135, i64 1
  %137 = fcmp one double %0, 0x7FF0000000000000
  %138 = select i1 %137, <2 x i32> %136, <2 x i32> <i32 0, i32 2146959360>
  %139 = bitcast <2 x i32> %138 to double
  %fneg.i = fneg double %a
  %140 = tail call double @llvm.amdgcn.frexp.mant.f64(double %call.i)
  %141 = fcmp olt double %140, 0x3FE5555555555555
  %.neg.i.i = sext i1 %141 to i32
  %142 = select i1 %141, double 2.000000e+00, double 1.000000e+00
  %143 = fmul double %140, %142
  %144 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %call.i)
  %145 = add i32 %144, %.neg.i.i
  %146 = fadd double %143, -1.000000e+00
  %147 = fadd double %143, 1.000000e+00
  %148 = fadd double %147, -1.000000e+00
  %149 = fsub double %143, %148
  %150 = tail call double @llvm.amdgcn.rcp.f64(double %147)
  %151 = fneg double %147
  %152 = tail call double @llvm.fma.f64(double %151, double %150, double 1.000000e+00)
  %153 = tail call double @llvm.fma.f64(double %152, double %150, double %150)
  %154 = tail call double @llvm.fma.f64(double %151, double %153, double 1.000000e+00)
  %155 = tail call double @llvm.fma.f64(double %154, double %153, double %153)
  %156 = fmul double %146, %155
  %157 = fmul double %147, %156
  %158 = fneg double %157
  %159 = tail call double @llvm.fma.f64(double %156, double %147, double %158)
  %160 = tail call double @llvm.fma.f64(double %156, double %149, double %159)
  %161 = fadd double %157, %160
  %162 = fsub double %161, %157
  %163 = fsub double %146, %161
  %164 = fsub double %146, %163
  %165 = fsub double %164, %161
  %166 = fsub double %162, %160
  %167 = fadd double %166, %165
  %168 = fadd double %163, %167
  %169 = fmul double %155, %168
  %170 = fadd double %156, %169
  %171 = fsub double %170, %156
  %172 = fsub double %169, %171
  %173 = fmul double %170, %170
  %174 = tail call double @llvm.fma.f64(double %173, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %175 = tail call double @llvm.fma.f64(double %173, double %174, double 0x3FC7474DD7F4DF2E)
  %176 = tail call double @llvm.fma.f64(double %173, double %175, double 0x3FCC71C016291751)
  %177 = tail call double @llvm.fma.f64(double %173, double %176, double 0x3FD249249B27ACF1)
  %178 = tail call double @llvm.fma.f64(double %173, double %177, double 0x3FD99999998EF7B6)
  %179 = tail call double @llvm.fma.f64(double %173, double %178, double 0x3FE5555555555780)
  %180 = tail call double @llvm.ldexp.f64.i32(double %170, i32 1)
  %181 = tail call double @llvm.ldexp.f64.i32(double %172, i32 1)
  %182 = fmul double %170, %173
  %183 = fmul double %182, %179
  %184 = fadd double %180, %183
  %185 = fsub double %184, %180
  %186 = fsub double %183, %185
  %187 = fadd double %181, %186
  %188 = fadd double %184, %187
  %189 = fsub double %188, %184
  %190 = fsub double %187, %189
  %191 = sitofp i32 %145 to double
  %192 = fmul double %191, 0x3FE62E42FEFA39EF
  %193 = fneg double %192
  %194 = tail call double @llvm.fma.f64(double %191, double 0x3FE62E42FEFA39EF, double %193)
  %195 = tail call double @llvm.fma.f64(double %191, double 0x3C7ABC9E3B39803F, double %194)
  %196 = fadd double %192, %195
  %197 = fsub double %196, %192
  %198 = fsub double %195, %197
  %199 = fadd double %196, %188
  %200 = fsub double %199, %196
  %201 = fsub double %199, %200
  %202 = fsub double %196, %201
  %203 = fsub double %188, %200
  %204 = fadd double %203, %202
  %205 = fadd double %198, %190
  %206 = fsub double %205, %198
  %207 = fsub double %205, %206
  %208 = fsub double %198, %207
  %209 = fsub double %190, %206
  %210 = fadd double %209, %208
  %211 = fadd double %205, %204
  %212 = fadd double %199, %211
  %213 = fsub double %212, %199
  %214 = fsub double %211, %213
  %215 = fadd double %210, %214
  %216 = fadd double %212, %215
  %217 = tail call double @llvm.fabs.f64(double %call.i)
  %218 = fcmp oeq double %217, 0x7FF0000000000000
  %219 = select i1 %218, double %call.i, double %216
  %220 = fcmp olt double %call.i, 0.000000e+00
  %221 = select i1 %220, double 0x7FF8000000000000, double %219
  %222 = fcmp oeq double %call.i, 0.000000e+00
  %223 = select i1 %222, double 0xFFF0000000000000, double %221
  %224 = tail call double @llvm.amdgcn.frexp.mant.f64(double %call1.i)
  %225 = fcmp olt double %224, 0x3FE5555555555555
  %.neg.i3.i = sext i1 %225 to i32
  %226 = select i1 %225, double 2.000000e+00, double 1.000000e+00
  %227 = fmul double %224, %226
  %228 = tail call i32 @llvm.amdgcn.frexp.exp.i32.f64(double %call1.i)
  %229 = add i32 %228, %.neg.i3.i
  %230 = fadd double %227, -1.000000e+00
  %231 = fadd double %227, 1.000000e+00
  %232 = fadd double %231, -1.000000e+00
  %233 = fsub double %227, %232
  %234 = tail call double @llvm.amdgcn.rcp.f64(double %231)
  %235 = fneg double %231
  %236 = tail call double @llvm.fma.f64(double %235, double %234, double 1.000000e+00)
  %237 = tail call double @llvm.fma.f64(double %236, double %234, double %234)
  %238 = tail call double @llvm.fma.f64(double %235, double %237, double 1.000000e+00)
  %239 = tail call double @llvm.fma.f64(double %238, double %237, double %237)
  %240 = fmul double %230, %239
  %241 = fmul double %231, %240
  %242 = fneg double %241
  %243 = tail call double @llvm.fma.f64(double %240, double %231, double %242)
  %244 = tail call double @llvm.fma.f64(double %240, double %233, double %243)
  %245 = fadd double %241, %244
  %246 = fsub double %245, %241
  %247 = fsub double %230, %245
  %248 = fsub double %230, %247
  %249 = fsub double %248, %245
  %250 = fsub double %246, %244
  %251 = fadd double %250, %249
  %252 = fadd double %247, %251
  %253 = fmul double %239, %252
  %254 = fadd double %240, %253
  %255 = fsub double %254, %240
  %256 = fsub double %253, %255
  %257 = fmul double %254, %254
  %258 = tail call double @llvm.fma.f64(double %257, double 0x3FC3AB76BF559E2B, double 0x3FC385386B47B09A)
  %259 = tail call double @llvm.fma.f64(double %257, double %258, double 0x3FC7474DD7F4DF2E)
  %260 = tail call double @llvm.fma.f64(double %257, double %259, double 0x3FCC71C016291751)
  %261 = tail call double @llvm.fma.f64(double %257, double %260, double 0x3FD249249B27ACF1)
  %262 = tail call double @llvm.fma.f64(double %257, double %261, double 0x3FD99999998EF7B6)
  %263 = tail call double @llvm.fma.f64(double %257, double %262, double 0x3FE5555555555780)
  %264 = tail call double @llvm.ldexp.f64.i32(double %254, i32 1)
  %265 = tail call double @llvm.ldexp.f64.i32(double %256, i32 1)
  %266 = fmul double %254, %257
  %267 = fmul double %266, %263
  %268 = fadd double %264, %267
  %269 = fsub double %268, %264
  %270 = fsub double %267, %269
  %271 = fadd double %265, %270
  %272 = fadd double %268, %271
  %273 = fsub double %272, %268
  %274 = fsub double %271, %273
  %275 = sitofp i32 %229 to double
  %276 = fmul double %275, 0x3FE62E42FEFA39EF
  %277 = fneg double %276
  %278 = tail call double @llvm.fma.f64(double %275, double 0x3FE62E42FEFA39EF, double %277)
  %279 = tail call double @llvm.fma.f64(double %275, double 0x3C7ABC9E3B39803F, double %278)
  %280 = fadd double %276, %279
  %281 = fsub double %280, %276
  %282 = fsub double %279, %281
  %283 = fadd double %280, %272
  %284 = fsub double %283, %280
  %285 = fsub double %283, %284
  %286 = fsub double %280, %285
  %287 = fsub double %272, %284
  %288 = fadd double %287, %286
  %289 = fadd double %282, %274
  %290 = fsub double %289, %282
  %291 = fsub double %289, %290
  %292 = fsub double %282, %291
  %293 = fsub double %274, %290
  %294 = fadd double %293, %292
  %295 = fadd double %289, %288
  %296 = fadd double %283, %295
  %297 = fsub double %296, %283
  %298 = fsub double %295, %297
  %299 = fadd double %294, %298
  %300 = fadd double %296, %299
  %301 = tail call double @llvm.fabs.f64(double %call1.i)
  %302 = fcmp oeq double %301, 0x7FF0000000000000
  %303 = select i1 %302, double %call1.i, double %300
  %304 = fcmp olt double %call1.i, 0.000000e+00
  %305 = select i1 %304, double 0x7FF8000000000000, double %303
  %306 = fcmp oeq double %call1.i, 0.000000e+00
  %307 = select i1 %306, double 0xFFF0000000000000, double %305
  %mul6.i = fmul double %307, %139
  %308 = tail call double @llvm.fmuladd.f64(double %mul6.i, double %139, double %223)
  %mul8.i = fmul double %308, %fneg.i
  %mul = fmul double %a, 2.500000e-01
  %mul1 = fmul double %a, %mul
  %309 = tail call double @llvm.fmuladd.f64(double %mul1, double %b, double %mul8.i)
  %call3 = tail call noundef double @_ZN6openmc3prnEPm(ptr noundef %seed) #8
  %310 = tail call double @llvm.fmuladd.f64(double %call3, double 2.000000e+00, double -1.000000e+00)
  %mul5 = fmul double %a, %a
  %mul6 = fmul double %mul5, %b
  %mul7 = fmul double %mul6, %mul8.i
  %311 = tail call noundef double @llvm.sqrt.f64(double %mul7) #7
  %312 = tail call double @llvm.fmuladd.f64(double %310, double %311, double %309)
  ret double %312
}

; Function Attrs: mustprogress nounwind
define hidden %"class.std::complex" @_ZN6openmc8faddeevaESt7complexIdE({ double, double } %z.coerce) local_unnamed_addr #6 {
entry:
  %0 = extractvalue { double, double } %z.coerce, 1
  %cmp = fcmp ogt double %0, 0.000000e+00
  %1 = extractvalue { double, double } %z.coerce, 0
  %add.r.i.i = fadd double %1, 0.000000e+00
  %mul_ac.i.i.i = fmul double %add.r.i.i, %add.r.i.i
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %add.i.i.i = fadd double %0, 9.000000e-01
  %mul_bd.i.i.i = fmul double %add.i.i.i, %add.i.i.i
  %mul_ad.i.i.i = fmul double %add.i.i.i, %add.r.i.i
  %mul_r.i.i.i = fsub double %mul_ac.i.i.i, %mul_bd.i.i.i
  %mul_i.i.i.i = fadd double %mul_ad.i.i.i, %mul_ad.i.i.i
  %isnan_cmp.i.i.i = fcmp uno double %mul_r.i.i.i, 0.000000e+00
  br i1 %isnan_cmp.i.i.i, label %complex_mul_imag_nan.i.i.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i, !prof !19

complex_mul_imag_nan.i.i.i:                       ; preds = %cond.true
  %isnan_cmp4.i.i.i = fcmp uno double %mul_i.i.i.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i.i, label %complex_mul_libcall.i.i.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i, !prof !19

complex_mul_libcall.i.i.i:                        ; preds = %complex_mul_imag_nan.i.i.i
  %call5.i.i.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i, double noundef %add.i.i.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %2 = extractvalue { double, double } %call5.i.i.i, 0
  %3 = extractvalue { double, double } %call5.i.i.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i: ; preds = %complex_mul_libcall.i.i.i, %complex_mul_imag_nan.i.i.i, %cond.true
  %real_mul_phi.i.i.i = phi double [ %mul_r.i.i.i, %cond.true ], [ %mul_r.i.i.i, %complex_mul_imag_nan.i.i.i ], [ %2, %complex_mul_libcall.i.i.i ]
  %imag_mul_phi.i.i.i = phi double [ %mul_i.i.i.i, %cond.true ], [ %mul_i.i.i.i, %complex_mul_imag_nan.i.i.i ], [ %3, %complex_mul_libcall.i.i.i ]
  %mul_ac.i.i40.i = fmul double %add.r.i.i, 0.000000e+00
  %mul_bd.i.i41.i = fmul double %add.i.i.i, 0x3FE20DD725F5D729
  %mul_ad.i.i42.i = fmul double %add.i.i.i, 0.000000e+00
  %mul_bc.i.i43.i = fmul double %add.r.i.i, 0x3FE20DD725F5D729
  %mul_r.i.i44.i = fsub double %mul_ac.i.i40.i, %mul_bd.i.i41.i
  %mul_i.i.i45.i = fadd double %mul_ad.i.i42.i, %mul_bc.i.i43.i
  %isnan_cmp.i.i46.i = fcmp uno double %mul_r.i.i44.i, 0.000000e+00
  br i1 %isnan_cmp.i.i46.i, label %complex_mul_imag_nan.i.i51.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i, !prof !19

complex_mul_imag_nan.i.i51.i:                     ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i
  %isnan_cmp4.i.i52.i = fcmp uno double %mul_i.i.i45.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i52.i, label %complex_mul_libcall.i.i53.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i, !prof !19

complex_mul_libcall.i.i53.i:                      ; preds = %complex_mul_imag_nan.i.i51.i
  %call5.i.i54.i = tail call noundef { double, double } @__muldc3(double noundef 0.000000e+00, double noundef 0x3FE20DD725F5D729, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %4 = extractvalue { double, double } %call5.i.i54.i, 0
  %5 = extractvalue { double, double } %call5.i.i54.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i: ; preds = %complex_mul_libcall.i.i53.i, %complex_mul_imag_nan.i.i51.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i
  %real_mul_phi.i.i47.i = phi double [ %mul_r.i.i44.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i ], [ %mul_r.i.i44.i, %complex_mul_imag_nan.i.i51.i ], [ %4, %complex_mul_libcall.i.i53.i ]
  %imag_mul_phi.i.i48.i = phi double [ %mul_i.i.i45.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i ], [ %mul_i.i.i45.i, %complex_mul_imag_nan.i.i51.i ], [ %5, %complex_mul_libcall.i.i53.i ]
  %add.r.i.i.i = fadd double %real_mul_phi.i.i47.i, 0xBFE03FA9947C808F
  %add.i.i.i.i = fadd double %imag_mul_phi.i.i48.i, 0.000000e+00
  %mul_ac.i.i63.i = fmul double %add.r.i.i, %add.r.i.i.i
  %mul_bd.i.i64.i = fmul double %add.i.i.i, %add.i.i.i.i
  %mul_ad.i.i65.i = fmul double %add.i.i.i, %add.r.i.i.i
  %mul_bc.i.i66.i = fmul double %add.r.i.i, %add.i.i.i.i
  %mul_r.i.i67.i = fsub double %mul_ac.i.i63.i, %mul_bd.i.i64.i
  %mul_i.i.i68.i = fadd double %mul_ad.i.i65.i, %mul_bc.i.i66.i
  %isnan_cmp.i.i69.i = fcmp uno double %mul_r.i.i67.i, 0.000000e+00
  br i1 %isnan_cmp.i.i69.i, label %complex_mul_imag_nan.i.i74.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i, !prof !19

complex_mul_imag_nan.i.i74.i:                     ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i
  %isnan_cmp4.i.i75.i = fcmp uno double %mul_i.i.i68.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i75.i, label %complex_mul_libcall.i.i76.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i, !prof !19

complex_mul_libcall.i.i76.i:                      ; preds = %complex_mul_imag_nan.i.i74.i
  %call5.i.i77.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i.i, double noundef %add.i.i.i.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %6 = extractvalue { double, double } %call5.i.i77.i, 0
  %7 = extractvalue { double, double } %call5.i.i77.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i: ; preds = %complex_mul_libcall.i.i76.i, %complex_mul_imag_nan.i.i74.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i
  %real_mul_phi.i.i70.i = phi double [ %mul_r.i.i67.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i ], [ %mul_r.i.i67.i, %complex_mul_imag_nan.i.i74.i ], [ %6, %complex_mul_libcall.i.i76.i ]
  %imag_mul_phi.i.i71.i = phi double [ %mul_i.i.i68.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i ], [ %mul_i.i.i68.i, %complex_mul_imag_nan.i.i74.i ], [ %7, %complex_mul_libcall.i.i76.i ]
  %add.i.i.i84.i = fadd double %imag_mul_phi.i.i71.i, 0xC02025A7E69A687B
  %mul_ac.i.i90.i = fmul double %add.r.i.i, %real_mul_phi.i.i70.i
  %mul_bd.i.i91.i = fmul double %add.i.i.i, %add.i.i.i84.i
  %mul_ad.i.i92.i = fmul double %add.i.i.i, %real_mul_phi.i.i70.i
  %mul_bc.i.i93.i = fmul double %add.r.i.i, %add.i.i.i84.i
  %mul_r.i.i94.i = fsub double %mul_ac.i.i90.i, %mul_bd.i.i91.i
  %mul_i.i.i95.i = fadd double %mul_ad.i.i92.i, %mul_bc.i.i93.i
  %isnan_cmp.i.i96.i = fcmp uno double %mul_r.i.i94.i, 0.000000e+00
  br i1 %isnan_cmp.i.i96.i, label %complex_mul_imag_nan.i.i101.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i, !prof !19

complex_mul_imag_nan.i.i101.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i
  %isnan_cmp4.i.i102.i = fcmp uno double %mul_i.i.i95.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i102.i, label %complex_mul_libcall.i.i103.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i, !prof !19

complex_mul_libcall.i.i103.i:                     ; preds = %complex_mul_imag_nan.i.i101.i
  %call5.i.i104.i = tail call noundef { double, double } @__muldc3(double noundef %real_mul_phi.i.i70.i, double noundef %add.i.i.i84.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %8 = extractvalue { double, double } %call5.i.i104.i, 0
  %9 = extractvalue { double, double } %call5.i.i104.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i: ; preds = %complex_mul_libcall.i.i103.i, %complex_mul_imag_nan.i.i101.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i
  %real_mul_phi.i.i97.i = phi double [ %mul_r.i.i94.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i ], [ %mul_r.i.i94.i, %complex_mul_imag_nan.i.i101.i ], [ %8, %complex_mul_libcall.i.i103.i ]
  %imag_mul_phi.i.i98.i = phi double [ %mul_i.i.i95.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i ], [ %mul_i.i.i95.i, %complex_mul_imag_nan.i.i101.i ], [ %9, %complex_mul_libcall.i.i103.i ]
  %add.r.i.i110.i = fadd double %real_mul_phi.i.i97.i, 0x401B08AD71E14CA6
  %add.i.i.i111.i = fadd double %imag_mul_phi.i.i98.i, 0.000000e+00
  %mul_ac.i.i117.i = fmul double %add.r.i.i, %add.r.i.i110.i
  %mul_bd.i.i118.i = fmul double %add.i.i.i, %add.i.i.i111.i
  %mul_ad.i.i119.i = fmul double %add.i.i.i, %add.r.i.i110.i
  %mul_bc.i.i120.i = fmul double %add.r.i.i, %add.i.i.i111.i
  %mul_r.i.i121.i = fsub double %mul_ac.i.i117.i, %mul_bd.i.i118.i
  %mul_i.i.i122.i = fadd double %mul_ad.i.i119.i, %mul_bc.i.i120.i
  %isnan_cmp.i.i123.i = fcmp uno double %mul_r.i.i121.i, 0.000000e+00
  br i1 %isnan_cmp.i.i123.i, label %complex_mul_imag_nan.i.i128.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i, !prof !19

complex_mul_imag_nan.i.i128.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i
  %isnan_cmp4.i.i129.i = fcmp uno double %mul_i.i.i122.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i129.i, label %complex_mul_libcall.i.i130.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i, !prof !19

complex_mul_libcall.i.i130.i:                     ; preds = %complex_mul_imag_nan.i.i128.i
  %call5.i.i131.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i110.i, double noundef %add.i.i.i111.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %10 = extractvalue { double, double } %call5.i.i131.i, 0
  %11 = extractvalue { double, double } %call5.i.i131.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i: ; preds = %complex_mul_libcall.i.i130.i, %complex_mul_imag_nan.i.i128.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i
  %real_mul_phi.i.i124.i = phi double [ %mul_r.i.i121.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i ], [ %mul_r.i.i121.i, %complex_mul_imag_nan.i.i128.i ], [ %10, %complex_mul_libcall.i.i130.i ]
  %imag_mul_phi.i.i125.i = phi double [ %mul_i.i.i122.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i ], [ %mul_i.i.i122.i, %complex_mul_imag_nan.i.i128.i ], [ %11, %complex_mul_libcall.i.i130.i ]
  %add.r.i.i137.i = fadd double %real_mul_phi.i.i124.i, 0.000000e+00
  %add.i.i.i138.i = fadd double %imag_mul_phi.i.i125.i, 0x403F7D93C6FE0D60
  %mul_ac.i.i144.i = fmul double %add.r.i.i, %add.r.i.i137.i
  %mul_bd.i.i145.i = fmul double %add.i.i.i, %add.i.i.i138.i
  %mul_ad.i.i146.i = fmul double %add.i.i.i, %add.r.i.i137.i
  %mul_bc.i.i147.i = fmul double %add.r.i.i, %add.i.i.i138.i
  %mul_r.i.i148.i = fsub double %mul_ac.i.i144.i, %mul_bd.i.i145.i
  %mul_i.i.i149.i = fadd double %mul_ad.i.i146.i, %mul_bc.i.i147.i
  %isnan_cmp.i.i150.i = fcmp uno double %mul_r.i.i148.i, 0.000000e+00
  br i1 %isnan_cmp.i.i150.i, label %complex_mul_imag_nan.i.i155.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i, !prof !19

complex_mul_imag_nan.i.i155.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i
  %isnan_cmp4.i.i156.i = fcmp uno double %mul_i.i.i149.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i156.i, label %complex_mul_libcall.i.i157.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i, !prof !19

complex_mul_libcall.i.i157.i:                     ; preds = %complex_mul_imag_nan.i.i155.i
  %call5.i.i158.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i137.i, double noundef %add.i.i.i138.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %12 = extractvalue { double, double } %call5.i.i158.i, 0
  %13 = extractvalue { double, double } %call5.i.i158.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i: ; preds = %complex_mul_libcall.i.i157.i, %complex_mul_imag_nan.i.i155.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i
  %real_mul_phi.i.i151.i = phi double [ %mul_r.i.i148.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i ], [ %mul_r.i.i148.i, %complex_mul_imag_nan.i.i155.i ], [ %12, %complex_mul_libcall.i.i157.i ]
  %imag_mul_phi.i.i152.i = phi double [ %mul_i.i.i149.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i ], [ %mul_i.i.i149.i, %complex_mul_imag_nan.i.i155.i ], [ %13, %complex_mul_libcall.i.i157.i ]
  %add.r.i.i164.i = fadd double %real_mul_phi.i.i151.i, 0xC035EF8D07342F5E
  %add.i.i.i165.i = fadd double %imag_mul_phi.i.i152.i, 0.000000e+00
  %mul_ac.i.i171.i = fmul double %add.r.i.i, %add.r.i.i164.i
  %mul_bd.i.i172.i = fmul double %add.i.i.i, %add.i.i.i165.i
  %mul_ad.i.i173.i = fmul double %add.i.i.i, %add.r.i.i164.i
  %mul_bc.i.i174.i = fmul double %add.r.i.i, %add.i.i.i165.i
  %mul_r.i.i175.i = fsub double %mul_ac.i.i171.i, %mul_bd.i.i172.i
  %mul_i.i.i176.i = fadd double %mul_ad.i.i173.i, %mul_bc.i.i174.i
  %isnan_cmp.i.i177.i = fcmp uno double %mul_r.i.i175.i, 0.000000e+00
  br i1 %isnan_cmp.i.i177.i, label %complex_mul_imag_nan.i.i182.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i, !prof !19

complex_mul_imag_nan.i.i182.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i
  %isnan_cmp4.i.i183.i = fcmp uno double %mul_i.i.i176.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i183.i, label %complex_mul_libcall.i.i184.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i, !prof !19

complex_mul_libcall.i.i184.i:                     ; preds = %complex_mul_imag_nan.i.i182.i
  %call5.i.i185.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i164.i, double noundef %add.i.i.i165.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %14 = extractvalue { double, double } %call5.i.i185.i, 0
  %15 = extractvalue { double, double } %call5.i.i185.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i: ; preds = %complex_mul_libcall.i.i184.i, %complex_mul_imag_nan.i.i182.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i
  %real_mul_phi.i.i178.i = phi double [ %mul_r.i.i175.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i ], [ %mul_r.i.i175.i, %complex_mul_imag_nan.i.i182.i ], [ %14, %complex_mul_libcall.i.i184.i ]
  %imag_mul_phi.i.i179.i = phi double [ %mul_i.i.i176.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i ], [ %mul_i.i.i176.i, %complex_mul_imag_nan.i.i182.i ], [ %15, %complex_mul_libcall.i.i184.i ]
  %add.i.i.i192.i = fadd double %imag_mul_phi.i.i179.i, 0xC04027B4A033A7EC
  %mul_ac.i.i198.i = fmul double %add.r.i.i, %real_mul_phi.i.i178.i
  %mul_bd.i.i199.i = fmul double %add.i.i.i, %add.i.i.i192.i
  %mul_ad.i.i200.i = fmul double %add.i.i.i, %real_mul_phi.i.i178.i
  %mul_bc.i.i201.i = fmul double %add.r.i.i, %add.i.i.i192.i
  %mul_r.i.i202.i = fsub double %mul_ac.i.i198.i, %mul_bd.i.i199.i
  %mul_i.i.i203.i = fadd double %mul_ad.i.i200.i, %mul_bc.i.i201.i
  %isnan_cmp.i.i204.i = fcmp uno double %mul_r.i.i202.i, 0.000000e+00
  br i1 %isnan_cmp.i.i204.i, label %complex_mul_imag_nan.i.i209.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i, !prof !19

complex_mul_imag_nan.i.i209.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i
  %isnan_cmp4.i.i210.i = fcmp uno double %mul_i.i.i203.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i210.i, label %complex_mul_libcall.i.i211.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i, !prof !19

complex_mul_libcall.i.i211.i:                     ; preds = %complex_mul_imag_nan.i.i209.i
  %call5.i.i212.i = tail call noundef { double, double } @__muldc3(double noundef %real_mul_phi.i.i178.i, double noundef %add.i.i.i192.i, double noundef %add.r.i.i, double noundef %add.i.i.i) #9
  %16 = extractvalue { double, double } %call5.i.i212.i, 0
  %17 = extractvalue { double, double } %call5.i.i212.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i: ; preds = %complex_mul_libcall.i.i211.i, %complex_mul_imag_nan.i.i209.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i
  %real_mul_phi.i.i205.i = phi double [ %mul_r.i.i202.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i ], [ %mul_r.i.i202.i, %complex_mul_imag_nan.i.i209.i ], [ %16, %complex_mul_libcall.i.i211.i ]
  %imag_mul_phi.i.i206.i = phi double [ %mul_i.i.i203.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i ], [ %mul_i.i.i203.i, %complex_mul_imag_nan.i.i209.i ], [ %17, %complex_mul_libcall.i.i211.i ]
  %mul_bd.i.i227.i = fmul double %imag_mul_phi.i.i.i, 0.000000e+00
  %mul_bc.i.i229.i = fmul double %real_mul_phi.i.i.i, 0.000000e+00
  %mul_r.i.i230.i = fsub double %real_mul_phi.i.i.i, %mul_bd.i.i227.i
  %mul_i.i.i231.i = fadd double %imag_mul_phi.i.i.i, %mul_bc.i.i229.i
  %isnan_cmp.i.i232.i = fcmp uno double %mul_r.i.i230.i, 0.000000e+00
  br i1 %isnan_cmp.i.i232.i, label %complex_mul_imag_nan.i.i237.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i, !prof !19

complex_mul_imag_nan.i.i237.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i
  %isnan_cmp4.i.i238.i = fcmp uno double %mul_i.i.i231.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i238.i, label %complex_mul_libcall.i.i239.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i, !prof !19

complex_mul_libcall.i.i239.i:                     ; preds = %complex_mul_imag_nan.i.i237.i
  %call5.i.i240.i = tail call noundef { double, double } @__muldc3(double noundef 1.000000e+00, double noundef 0.000000e+00, double noundef %real_mul_phi.i.i.i, double noundef %imag_mul_phi.i.i.i) #9
  %18 = extractvalue { double, double } %call5.i.i240.i, 0
  %19 = extractvalue { double, double } %call5.i.i240.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i: ; preds = %complex_mul_libcall.i.i239.i, %complex_mul_imag_nan.i.i237.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i
  %real_mul_phi.i.i233.i = phi double [ %mul_r.i.i230.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i ], [ %mul_r.i.i230.i, %complex_mul_imag_nan.i.i237.i ], [ %18, %complex_mul_libcall.i.i239.i ]
  %imag_mul_phi.i.i234.i = phi double [ %mul_i.i.i231.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i ], [ %mul_i.i.i231.i, %complex_mul_imag_nan.i.i237.i ], [ %19, %complex_mul_libcall.i.i239.i ]
  %add.r.i.i246.i = fadd double %real_mul_phi.i.i233.i, -1.400000e+01
  %add.i.i.i247.i = fadd double %imag_mul_phi.i.i234.i, 0.000000e+00
  %mul_ac.i.i253.i = fmul double %real_mul_phi.i.i.i, %add.r.i.i246.i
  %mul_bd.i.i254.i = fmul double %imag_mul_phi.i.i.i, %add.i.i.i247.i
  %mul_ad.i.i255.i = fmul double %imag_mul_phi.i.i.i, %add.r.i.i246.i
  %mul_bc.i.i256.i = fmul double %real_mul_phi.i.i.i, %add.i.i.i247.i
  %mul_r.i.i257.i = fsub double %mul_ac.i.i253.i, %mul_bd.i.i254.i
  %mul_i.i.i258.i = fadd double %mul_ad.i.i255.i, %mul_bc.i.i256.i
  %isnan_cmp.i.i259.i = fcmp uno double %mul_r.i.i257.i, 0.000000e+00
  br i1 %isnan_cmp.i.i259.i, label %complex_mul_imag_nan.i.i264.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i, !prof !19

complex_mul_imag_nan.i.i264.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i
  %isnan_cmp4.i.i265.i = fcmp uno double %mul_i.i.i258.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i265.i, label %complex_mul_libcall.i.i266.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i, !prof !19

complex_mul_libcall.i.i266.i:                     ; preds = %complex_mul_imag_nan.i.i264.i
  %call5.i.i267.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i246.i, double noundef %add.i.i.i247.i, double noundef %real_mul_phi.i.i.i, double noundef %imag_mul_phi.i.i.i) #9
  %20 = extractvalue { double, double } %call5.i.i267.i, 0
  %21 = extractvalue { double, double } %call5.i.i267.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i: ; preds = %complex_mul_libcall.i.i266.i, %complex_mul_imag_nan.i.i264.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i
  %real_mul_phi.i.i260.i = phi double [ %mul_r.i.i257.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i ], [ %mul_r.i.i257.i, %complex_mul_imag_nan.i.i264.i ], [ %20, %complex_mul_libcall.i.i266.i ]
  %imag_mul_phi.i.i261.i = phi double [ %mul_i.i.i258.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i ], [ %mul_i.i.i258.i, %complex_mul_imag_nan.i.i264.i ], [ %21, %complex_mul_libcall.i.i266.i ]
  %add.r.i.i273.i = fadd double %real_mul_phi.i.i260.i, 5.250000e+01
  %add.i.i.i274.i = fadd double %imag_mul_phi.i.i261.i, 0.000000e+00
  %mul_ac.i.i280.i = fmul double %real_mul_phi.i.i.i, %add.r.i.i273.i
  %mul_bd.i.i281.i = fmul double %imag_mul_phi.i.i.i, %add.i.i.i274.i
  %mul_ad.i.i282.i = fmul double %imag_mul_phi.i.i.i, %add.r.i.i273.i
  %mul_bc.i.i283.i = fmul double %real_mul_phi.i.i.i, %add.i.i.i274.i
  %mul_r.i.i284.i = fsub double %mul_ac.i.i280.i, %mul_bd.i.i281.i
  %mul_i.i.i285.i = fadd double %mul_ad.i.i282.i, %mul_bc.i.i283.i
  %isnan_cmp.i.i286.i = fcmp uno double %mul_r.i.i284.i, 0.000000e+00
  br i1 %isnan_cmp.i.i286.i, label %complex_mul_imag_nan.i.i291.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i, !prof !19

complex_mul_imag_nan.i.i291.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i
  %isnan_cmp4.i.i292.i = fcmp uno double %mul_i.i.i285.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i292.i, label %complex_mul_libcall.i.i293.i, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i, !prof !19

complex_mul_libcall.i.i293.i:                     ; preds = %complex_mul_imag_nan.i.i291.i
  %call5.i.i294.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i273.i, double noundef %add.i.i.i274.i, double noundef %real_mul_phi.i.i.i, double noundef %imag_mul_phi.i.i.i) #9
  %22 = extractvalue { double, double } %call5.i.i294.i, 0
  %23 = extractvalue { double, double } %call5.i.i294.i, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i: ; preds = %complex_mul_libcall.i.i293.i, %complex_mul_imag_nan.i.i291.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i
  %real_mul_phi.i.i287.i = phi double [ %mul_r.i.i284.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i ], [ %mul_r.i.i284.i, %complex_mul_imag_nan.i.i291.i ], [ %22, %complex_mul_libcall.i.i293.i ]
  %imag_mul_phi.i.i288.i = phi double [ %mul_i.i.i285.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i ], [ %mul_i.i.i285.i, %complex_mul_imag_nan.i.i291.i ], [ %23, %complex_mul_libcall.i.i293.i ]
  %add.r.i.i300.i = fadd double %real_mul_phi.i.i287.i, -5.250000e+01
  %add.i.i.i301.i = fadd double %imag_mul_phi.i.i288.i, 0.000000e+00
  %mul_ac.i.i307.i = fmul double %real_mul_phi.i.i.i, %add.r.i.i300.i
  %mul_bd.i.i308.i = fmul double %imag_mul_phi.i.i.i, %add.i.i.i301.i
  %mul_ad.i.i309.i = fmul double %imag_mul_phi.i.i.i, %add.r.i.i300.i
  %mul_bc.i.i310.i = fmul double %real_mul_phi.i.i.i, %add.i.i.i301.i
  %mul_r.i.i311.i = fsub double %mul_ac.i.i307.i, %mul_bd.i.i308.i
  %mul_i.i.i312.i = fadd double %mul_ad.i.i309.i, %mul_bc.i.i310.i
  %isnan_cmp.i.i313.i = fcmp uno double %mul_r.i.i311.i, 0.000000e+00
  br i1 %isnan_cmp.i.i313.i, label %complex_mul_imag_nan.i.i318.i, label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit, !prof !19

complex_mul_imag_nan.i.i318.i:                    ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i
  %isnan_cmp4.i.i319.i = fcmp uno double %mul_i.i.i312.i, 0.000000e+00
  br i1 %isnan_cmp4.i.i319.i, label %complex_mul_libcall.i.i320.i, label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit, !prof !19

complex_mul_libcall.i.i320.i:                     ; preds = %complex_mul_imag_nan.i.i318.i
  %call5.i.i321.i = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i300.i, double noundef %add.i.i.i301.i, double noundef %real_mul_phi.i.i.i, double noundef %imag_mul_phi.i.i.i) #9
  %24 = extractvalue { double, double } %call5.i.i321.i, 0
  %25 = extractvalue { double, double } %call5.i.i321.i, 1
  br label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit

_ZN6openmc5zpf8hESt7complexIdE.internalized.exit: ; preds = %complex_mul_libcall.i.i320.i, %complex_mul_imag_nan.i.i318.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i
  %real_mul_phi.i.i314.i = phi double [ %mul_r.i.i311.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i ], [ %mul_r.i.i311.i, %complex_mul_imag_nan.i.i318.i ], [ %24, %complex_mul_libcall.i.i320.i ]
  %imag_mul_phi.i.i315.i = phi double [ %mul_i.i.i312.i, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i ], [ %mul_i.i.i312.i, %complex_mul_imag_nan.i.i318.i ], [ %25, %complex_mul_libcall.i.i320.i ]
  %add.i.i.i219.i = fadd double %imag_mul_phi.i.i206.i, 0.000000e+00
  %add.r.i.i218.i = fadd double %real_mul_phi.i.i205.i, 0x4027830642DA00A6
  %add.r.i.i327.i = fadd double %real_mul_phi.i.i314.i, 6.562500e+00
  %add.i.i.i328.i = fadd double %imag_mul_phi.i.i315.i, 0.000000e+00
  %call4.i.i.i = tail call noundef { double, double } @__divdc3(double noundef %add.r.i.i218.i, double noundef %add.i.i.i219.i, double noundef %add.r.i.i327.i, double noundef %add.i.i.i328.i) #9
  %.fca.0.extract89.i = extractvalue { double, double } %call4.i.i.i, 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %add.i.i.i29 = fsub double 9.000000e-01, %0
  %mul_bd.i.i.i31 = fmul double %add.i.i.i29, %add.i.i.i29
  %mul_ad.i.i.i32 = fmul double %add.i.i.i29, %add.r.i.i
  %mul_r.i.i.i33 = fsub double %mul_ac.i.i.i, %mul_bd.i.i.i31
  %mul_i.i.i.i34 = fadd double %mul_ad.i.i.i32, %mul_ad.i.i.i32
  %isnan_cmp.i.i.i35 = fcmp uno double %mul_r.i.i.i33, 0.000000e+00
  br i1 %isnan_cmp.i.i.i35, label %complex_mul_imag_nan.i.i.i215, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36, !prof !19

complex_mul_imag_nan.i.i.i215:                    ; preds = %cond.false
  %isnan_cmp4.i.i.i216 = fcmp uno double %mul_i.i.i.i34, 0.000000e+00
  br i1 %isnan_cmp4.i.i.i216, label %complex_mul_libcall.i.i.i217, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36, !prof !19

complex_mul_libcall.i.i.i217:                     ; preds = %complex_mul_imag_nan.i.i.i215
  %call5.i.i.i218 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i, double noundef %add.i.i.i29, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %26 = extractvalue { double, double } %call5.i.i.i218, 0
  %27 = extractvalue { double, double } %call5.i.i.i218, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36: ; preds = %complex_mul_libcall.i.i.i217, %complex_mul_imag_nan.i.i.i215, %cond.false
  %real_mul_phi.i.i.i37 = phi double [ %mul_r.i.i.i33, %cond.false ], [ %mul_r.i.i.i33, %complex_mul_imag_nan.i.i.i215 ], [ %26, %complex_mul_libcall.i.i.i217 ]
  %imag_mul_phi.i.i.i38 = phi double [ %mul_i.i.i.i34, %cond.false ], [ %mul_i.i.i.i34, %complex_mul_imag_nan.i.i.i215 ], [ %27, %complex_mul_libcall.i.i.i217 ]
  %mul_ac.i.i40.i39 = fmul double %add.r.i.i, 0.000000e+00
  %mul_bd.i.i41.i40 = fmul double %add.i.i.i29, 0x3FE20DD725F5D729
  %mul_ad.i.i42.i41 = fmul double %add.i.i.i29, 0.000000e+00
  %mul_bc.i.i43.i42 = fmul double %add.r.i.i, 0x3FE20DD725F5D729
  %mul_r.i.i44.i43 = fsub double %mul_ac.i.i40.i39, %mul_bd.i.i41.i40
  %mul_i.i.i45.i44 = fadd double %mul_ad.i.i42.i41, %mul_bc.i.i43.i42
  %isnan_cmp.i.i46.i45 = fcmp uno double %mul_r.i.i44.i43, 0.000000e+00
  br i1 %isnan_cmp.i.i46.i45, label %complex_mul_imag_nan.i.i51.i211, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46, !prof !19

complex_mul_imag_nan.i.i51.i211:                  ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36
  %isnan_cmp4.i.i52.i212 = fcmp uno double %mul_i.i.i45.i44, 0.000000e+00
  br i1 %isnan_cmp4.i.i52.i212, label %complex_mul_libcall.i.i53.i213, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46, !prof !19

complex_mul_libcall.i.i53.i213:                   ; preds = %complex_mul_imag_nan.i.i51.i211
  %call5.i.i54.i214 = tail call noundef { double, double } @__muldc3(double noundef 0.000000e+00, double noundef 0x3FE20DD725F5D729, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %28 = extractvalue { double, double } %call5.i.i54.i214, 0
  %29 = extractvalue { double, double } %call5.i.i54.i214, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46: ; preds = %complex_mul_libcall.i.i53.i213, %complex_mul_imag_nan.i.i51.i211, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36
  %real_mul_phi.i.i47.i47 = phi double [ %mul_r.i.i44.i43, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36 ], [ %mul_r.i.i44.i43, %complex_mul_imag_nan.i.i51.i211 ], [ %28, %complex_mul_libcall.i.i53.i213 ]
  %imag_mul_phi.i.i48.i48 = phi double [ %mul_i.i.i45.i44, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit.i36 ], [ %mul_i.i.i45.i44, %complex_mul_imag_nan.i.i51.i211 ], [ %29, %complex_mul_libcall.i.i53.i213 ]
  %add.r.i.i.i49 = fadd double %real_mul_phi.i.i47.i47, 0xBFE03FA9947C808F
  %add.i.i.i.i50 = fadd double %imag_mul_phi.i.i48.i48, 0.000000e+00
  %mul_ac.i.i63.i51 = fmul double %add.r.i.i, %add.r.i.i.i49
  %mul_bd.i.i64.i52 = fmul double %add.i.i.i29, %add.i.i.i.i50
  %mul_ad.i.i65.i53 = fmul double %add.i.i.i29, %add.r.i.i.i49
  %mul_bc.i.i66.i54 = fmul double %add.r.i.i, %add.i.i.i.i50
  %mul_r.i.i67.i55 = fsub double %mul_ac.i.i63.i51, %mul_bd.i.i64.i52
  %mul_i.i.i68.i56 = fadd double %mul_ad.i.i65.i53, %mul_bc.i.i66.i54
  %isnan_cmp.i.i69.i57 = fcmp uno double %mul_r.i.i67.i55, 0.000000e+00
  br i1 %isnan_cmp.i.i69.i57, label %complex_mul_imag_nan.i.i74.i207, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58, !prof !19

complex_mul_imag_nan.i.i74.i207:                  ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46
  %isnan_cmp4.i.i75.i208 = fcmp uno double %mul_i.i.i68.i56, 0.000000e+00
  br i1 %isnan_cmp4.i.i75.i208, label %complex_mul_libcall.i.i76.i209, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58, !prof !19

complex_mul_libcall.i.i76.i209:                   ; preds = %complex_mul_imag_nan.i.i74.i207
  %call5.i.i77.i210 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i.i49, double noundef %add.i.i.i.i50, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %30 = extractvalue { double, double } %call5.i.i77.i210, 0
  %31 = extractvalue { double, double } %call5.i.i77.i210, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58: ; preds = %complex_mul_libcall.i.i76.i209, %complex_mul_imag_nan.i.i74.i207, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46
  %real_mul_phi.i.i70.i59 = phi double [ %mul_r.i.i67.i55, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46 ], [ %mul_r.i.i67.i55, %complex_mul_imag_nan.i.i74.i207 ], [ %30, %complex_mul_libcall.i.i76.i209 ]
  %imag_mul_phi.i.i71.i60 = phi double [ %mul_i.i.i68.i56, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit55.i46 ], [ %mul_i.i.i68.i56, %complex_mul_imag_nan.i.i74.i207 ], [ %31, %complex_mul_libcall.i.i76.i209 ]
  %add.i.i.i84.i61 = fadd double %imag_mul_phi.i.i71.i60, 0xC02025A7E69A687B
  %mul_ac.i.i90.i62 = fmul double %add.r.i.i, %real_mul_phi.i.i70.i59
  %mul_bd.i.i91.i63 = fmul double %add.i.i.i29, %add.i.i.i84.i61
  %mul_ad.i.i92.i64 = fmul double %add.i.i.i29, %real_mul_phi.i.i70.i59
  %mul_bc.i.i93.i65 = fmul double %add.r.i.i, %add.i.i.i84.i61
  %mul_r.i.i94.i66 = fsub double %mul_ac.i.i90.i62, %mul_bd.i.i91.i63
  %mul_i.i.i95.i67 = fadd double %mul_ad.i.i92.i64, %mul_bc.i.i93.i65
  %isnan_cmp.i.i96.i68 = fcmp uno double %mul_r.i.i94.i66, 0.000000e+00
  br i1 %isnan_cmp.i.i96.i68, label %complex_mul_imag_nan.i.i101.i203, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69, !prof !19

complex_mul_imag_nan.i.i101.i203:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58
  %isnan_cmp4.i.i102.i204 = fcmp uno double %mul_i.i.i95.i67, 0.000000e+00
  br i1 %isnan_cmp4.i.i102.i204, label %complex_mul_libcall.i.i103.i205, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69, !prof !19

complex_mul_libcall.i.i103.i205:                  ; preds = %complex_mul_imag_nan.i.i101.i203
  %call5.i.i104.i206 = tail call noundef { double, double } @__muldc3(double noundef %real_mul_phi.i.i70.i59, double noundef %add.i.i.i84.i61, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %32 = extractvalue { double, double } %call5.i.i104.i206, 0
  %33 = extractvalue { double, double } %call5.i.i104.i206, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69: ; preds = %complex_mul_libcall.i.i103.i205, %complex_mul_imag_nan.i.i101.i203, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58
  %real_mul_phi.i.i97.i70 = phi double [ %mul_r.i.i94.i66, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58 ], [ %mul_r.i.i94.i66, %complex_mul_imag_nan.i.i101.i203 ], [ %32, %complex_mul_libcall.i.i103.i205 ]
  %imag_mul_phi.i.i98.i71 = phi double [ %mul_i.i.i95.i67, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit78.i58 ], [ %mul_i.i.i95.i67, %complex_mul_imag_nan.i.i101.i203 ], [ %33, %complex_mul_libcall.i.i103.i205 ]
  %add.r.i.i110.i72 = fadd double %real_mul_phi.i.i97.i70, 0x401B08AD71E14CA6
  %add.i.i.i111.i73 = fadd double %imag_mul_phi.i.i98.i71, 0.000000e+00
  %mul_ac.i.i117.i74 = fmul double %add.r.i.i, %add.r.i.i110.i72
  %mul_bd.i.i118.i75 = fmul double %add.i.i.i29, %add.i.i.i111.i73
  %mul_ad.i.i119.i76 = fmul double %add.i.i.i29, %add.r.i.i110.i72
  %mul_bc.i.i120.i77 = fmul double %add.r.i.i, %add.i.i.i111.i73
  %mul_r.i.i121.i78 = fsub double %mul_ac.i.i117.i74, %mul_bd.i.i118.i75
  %mul_i.i.i122.i79 = fadd double %mul_ad.i.i119.i76, %mul_bc.i.i120.i77
  %isnan_cmp.i.i123.i80 = fcmp uno double %mul_r.i.i121.i78, 0.000000e+00
  br i1 %isnan_cmp.i.i123.i80, label %complex_mul_imag_nan.i.i128.i199, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81, !prof !19

complex_mul_imag_nan.i.i128.i199:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69
  %isnan_cmp4.i.i129.i200 = fcmp uno double %mul_i.i.i122.i79, 0.000000e+00
  br i1 %isnan_cmp4.i.i129.i200, label %complex_mul_libcall.i.i130.i201, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81, !prof !19

complex_mul_libcall.i.i130.i201:                  ; preds = %complex_mul_imag_nan.i.i128.i199
  %call5.i.i131.i202 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i110.i72, double noundef %add.i.i.i111.i73, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %34 = extractvalue { double, double } %call5.i.i131.i202, 0
  %35 = extractvalue { double, double } %call5.i.i131.i202, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81: ; preds = %complex_mul_libcall.i.i130.i201, %complex_mul_imag_nan.i.i128.i199, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69
  %real_mul_phi.i.i124.i82 = phi double [ %mul_r.i.i121.i78, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69 ], [ %mul_r.i.i121.i78, %complex_mul_imag_nan.i.i128.i199 ], [ %34, %complex_mul_libcall.i.i130.i201 ]
  %imag_mul_phi.i.i125.i83 = phi double [ %mul_i.i.i122.i79, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit105.i69 ], [ %mul_i.i.i122.i79, %complex_mul_imag_nan.i.i128.i199 ], [ %35, %complex_mul_libcall.i.i130.i201 ]
  %add.r.i.i137.i84 = fadd double %real_mul_phi.i.i124.i82, 0.000000e+00
  %add.i.i.i138.i85 = fadd double %imag_mul_phi.i.i125.i83, 0x403F7D93C6FE0D60
  %mul_ac.i.i144.i86 = fmul double %add.r.i.i, %add.r.i.i137.i84
  %mul_bd.i.i145.i87 = fmul double %add.i.i.i29, %add.i.i.i138.i85
  %mul_ad.i.i146.i88 = fmul double %add.i.i.i29, %add.r.i.i137.i84
  %mul_bc.i.i147.i89 = fmul double %add.r.i.i, %add.i.i.i138.i85
  %mul_r.i.i148.i90 = fsub double %mul_ac.i.i144.i86, %mul_bd.i.i145.i87
  %mul_i.i.i149.i91 = fadd double %mul_ad.i.i146.i88, %mul_bc.i.i147.i89
  %isnan_cmp.i.i150.i92 = fcmp uno double %mul_r.i.i148.i90, 0.000000e+00
  br i1 %isnan_cmp.i.i150.i92, label %complex_mul_imag_nan.i.i155.i195, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93, !prof !19

complex_mul_imag_nan.i.i155.i195:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81
  %isnan_cmp4.i.i156.i196 = fcmp uno double %mul_i.i.i149.i91, 0.000000e+00
  br i1 %isnan_cmp4.i.i156.i196, label %complex_mul_libcall.i.i157.i197, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93, !prof !19

complex_mul_libcall.i.i157.i197:                  ; preds = %complex_mul_imag_nan.i.i155.i195
  %call5.i.i158.i198 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i137.i84, double noundef %add.i.i.i138.i85, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %36 = extractvalue { double, double } %call5.i.i158.i198, 0
  %37 = extractvalue { double, double } %call5.i.i158.i198, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93: ; preds = %complex_mul_libcall.i.i157.i197, %complex_mul_imag_nan.i.i155.i195, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81
  %real_mul_phi.i.i151.i94 = phi double [ %mul_r.i.i148.i90, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81 ], [ %mul_r.i.i148.i90, %complex_mul_imag_nan.i.i155.i195 ], [ %36, %complex_mul_libcall.i.i157.i197 ]
  %imag_mul_phi.i.i152.i95 = phi double [ %mul_i.i.i149.i91, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit132.i81 ], [ %mul_i.i.i149.i91, %complex_mul_imag_nan.i.i155.i195 ], [ %37, %complex_mul_libcall.i.i157.i197 ]
  %add.r.i.i164.i96 = fadd double %real_mul_phi.i.i151.i94, 0xC035EF8D07342F5E
  %add.i.i.i165.i97 = fadd double %imag_mul_phi.i.i152.i95, 0.000000e+00
  %mul_ac.i.i171.i98 = fmul double %add.r.i.i, %add.r.i.i164.i96
  %mul_bd.i.i172.i99 = fmul double %add.i.i.i29, %add.i.i.i165.i97
  %mul_ad.i.i173.i100 = fmul double %add.i.i.i29, %add.r.i.i164.i96
  %mul_bc.i.i174.i101 = fmul double %add.r.i.i, %add.i.i.i165.i97
  %mul_r.i.i175.i102 = fsub double %mul_ac.i.i171.i98, %mul_bd.i.i172.i99
  %mul_i.i.i176.i103 = fadd double %mul_ad.i.i173.i100, %mul_bc.i.i174.i101
  %isnan_cmp.i.i177.i104 = fcmp uno double %mul_r.i.i175.i102, 0.000000e+00
  br i1 %isnan_cmp.i.i177.i104, label %complex_mul_imag_nan.i.i182.i191, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105, !prof !19

complex_mul_imag_nan.i.i182.i191:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93
  %isnan_cmp4.i.i183.i192 = fcmp uno double %mul_i.i.i176.i103, 0.000000e+00
  br i1 %isnan_cmp4.i.i183.i192, label %complex_mul_libcall.i.i184.i193, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105, !prof !19

complex_mul_libcall.i.i184.i193:                  ; preds = %complex_mul_imag_nan.i.i182.i191
  %call5.i.i185.i194 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i164.i96, double noundef %add.i.i.i165.i97, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %38 = extractvalue { double, double } %call5.i.i185.i194, 0
  %39 = extractvalue { double, double } %call5.i.i185.i194, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105: ; preds = %complex_mul_libcall.i.i184.i193, %complex_mul_imag_nan.i.i182.i191, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93
  %real_mul_phi.i.i178.i106 = phi double [ %mul_r.i.i175.i102, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93 ], [ %mul_r.i.i175.i102, %complex_mul_imag_nan.i.i182.i191 ], [ %38, %complex_mul_libcall.i.i184.i193 ]
  %imag_mul_phi.i.i179.i107 = phi double [ %mul_i.i.i176.i103, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit159.i93 ], [ %mul_i.i.i176.i103, %complex_mul_imag_nan.i.i182.i191 ], [ %39, %complex_mul_libcall.i.i184.i193 ]
  %add.i.i.i192.i108 = fadd double %imag_mul_phi.i.i179.i107, 0xC04027B4A033A7EC
  %mul_ac.i.i198.i109 = fmul double %add.r.i.i, %real_mul_phi.i.i178.i106
  %mul_bd.i.i199.i110 = fmul double %add.i.i.i29, %add.i.i.i192.i108
  %mul_ad.i.i200.i111 = fmul double %add.i.i.i29, %real_mul_phi.i.i178.i106
  %mul_bc.i.i201.i112 = fmul double %add.r.i.i, %add.i.i.i192.i108
  %mul_r.i.i202.i113 = fsub double %mul_ac.i.i198.i109, %mul_bd.i.i199.i110
  %mul_i.i.i203.i114 = fadd double %mul_ad.i.i200.i111, %mul_bc.i.i201.i112
  %isnan_cmp.i.i204.i115 = fcmp uno double %mul_r.i.i202.i113, 0.000000e+00
  br i1 %isnan_cmp.i.i204.i115, label %complex_mul_imag_nan.i.i209.i187, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116, !prof !19

complex_mul_imag_nan.i.i209.i187:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105
  %isnan_cmp4.i.i210.i188 = fcmp uno double %mul_i.i.i203.i114, 0.000000e+00
  br i1 %isnan_cmp4.i.i210.i188, label %complex_mul_libcall.i.i211.i189, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116, !prof !19

complex_mul_libcall.i.i211.i189:                  ; preds = %complex_mul_imag_nan.i.i209.i187
  %call5.i.i212.i190 = tail call noundef { double, double } @__muldc3(double noundef %real_mul_phi.i.i178.i106, double noundef %add.i.i.i192.i108, double noundef %add.r.i.i, double noundef %add.i.i.i29) #9
  %40 = extractvalue { double, double } %call5.i.i212.i190, 0
  %41 = extractvalue { double, double } %call5.i.i212.i190, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116: ; preds = %complex_mul_libcall.i.i211.i189, %complex_mul_imag_nan.i.i209.i187, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105
  %real_mul_phi.i.i205.i117 = phi double [ %mul_r.i.i202.i113, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105 ], [ %mul_r.i.i202.i113, %complex_mul_imag_nan.i.i209.i187 ], [ %40, %complex_mul_libcall.i.i211.i189 ]
  %imag_mul_phi.i.i206.i118 = phi double [ %mul_i.i.i203.i114, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit186.i105 ], [ %mul_i.i.i203.i114, %complex_mul_imag_nan.i.i209.i187 ], [ %41, %complex_mul_libcall.i.i211.i189 ]
  %mul_bd.i.i227.i119 = fmul double %imag_mul_phi.i.i.i38, 0.000000e+00
  %mul_bc.i.i229.i120 = fmul double %real_mul_phi.i.i.i37, 0.000000e+00
  %mul_r.i.i230.i121 = fsub double %real_mul_phi.i.i.i37, %mul_bd.i.i227.i119
  %mul_i.i.i231.i122 = fadd double %imag_mul_phi.i.i.i38, %mul_bc.i.i229.i120
  %isnan_cmp.i.i232.i123 = fcmp uno double %mul_r.i.i230.i121, 0.000000e+00
  br i1 %isnan_cmp.i.i232.i123, label %complex_mul_imag_nan.i.i237.i183, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124, !prof !19

complex_mul_imag_nan.i.i237.i183:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116
  %isnan_cmp4.i.i238.i184 = fcmp uno double %mul_i.i.i231.i122, 0.000000e+00
  br i1 %isnan_cmp4.i.i238.i184, label %complex_mul_libcall.i.i239.i185, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124, !prof !19

complex_mul_libcall.i.i239.i185:                  ; preds = %complex_mul_imag_nan.i.i237.i183
  %call5.i.i240.i186 = tail call noundef { double, double } @__muldc3(double noundef 1.000000e+00, double noundef 0.000000e+00, double noundef %real_mul_phi.i.i.i37, double noundef %imag_mul_phi.i.i.i38) #9
  %42 = extractvalue { double, double } %call5.i.i240.i186, 0
  %43 = extractvalue { double, double } %call5.i.i240.i186, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124: ; preds = %complex_mul_libcall.i.i239.i185, %complex_mul_imag_nan.i.i237.i183, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116
  %real_mul_phi.i.i233.i125 = phi double [ %mul_r.i.i230.i121, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116 ], [ %mul_r.i.i230.i121, %complex_mul_imag_nan.i.i237.i183 ], [ %42, %complex_mul_libcall.i.i239.i185 ]
  %imag_mul_phi.i.i234.i126 = phi double [ %mul_i.i.i231.i122, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit213.i116 ], [ %mul_i.i.i231.i122, %complex_mul_imag_nan.i.i237.i183 ], [ %43, %complex_mul_libcall.i.i239.i185 ]
  %add.r.i.i246.i127 = fadd double %real_mul_phi.i.i233.i125, -1.400000e+01
  %add.i.i.i247.i128 = fadd double %imag_mul_phi.i.i234.i126, 0.000000e+00
  %mul_ac.i.i253.i129 = fmul double %real_mul_phi.i.i.i37, %add.r.i.i246.i127
  %mul_bd.i.i254.i130 = fmul double %imag_mul_phi.i.i.i38, %add.i.i.i247.i128
  %mul_ad.i.i255.i131 = fmul double %imag_mul_phi.i.i.i38, %add.r.i.i246.i127
  %mul_bc.i.i256.i132 = fmul double %real_mul_phi.i.i.i37, %add.i.i.i247.i128
  %mul_r.i.i257.i133 = fsub double %mul_ac.i.i253.i129, %mul_bd.i.i254.i130
  %mul_i.i.i258.i134 = fadd double %mul_ad.i.i255.i131, %mul_bc.i.i256.i132
  %isnan_cmp.i.i259.i135 = fcmp uno double %mul_r.i.i257.i133, 0.000000e+00
  br i1 %isnan_cmp.i.i259.i135, label %complex_mul_imag_nan.i.i264.i179, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136, !prof !19

complex_mul_imag_nan.i.i264.i179:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124
  %isnan_cmp4.i.i265.i180 = fcmp uno double %mul_i.i.i258.i134, 0.000000e+00
  br i1 %isnan_cmp4.i.i265.i180, label %complex_mul_libcall.i.i266.i181, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136, !prof !19

complex_mul_libcall.i.i266.i181:                  ; preds = %complex_mul_imag_nan.i.i264.i179
  %call5.i.i267.i182 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i246.i127, double noundef %add.i.i.i247.i128, double noundef %real_mul_phi.i.i.i37, double noundef %imag_mul_phi.i.i.i38) #9
  %44 = extractvalue { double, double } %call5.i.i267.i182, 0
  %45 = extractvalue { double, double } %call5.i.i267.i182, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136: ; preds = %complex_mul_libcall.i.i266.i181, %complex_mul_imag_nan.i.i264.i179, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124
  %real_mul_phi.i.i260.i137 = phi double [ %mul_r.i.i257.i133, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124 ], [ %mul_r.i.i257.i133, %complex_mul_imag_nan.i.i264.i179 ], [ %44, %complex_mul_libcall.i.i266.i181 ]
  %imag_mul_phi.i.i261.i138 = phi double [ %mul_i.i.i258.i134, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit241.i124 ], [ %mul_i.i.i258.i134, %complex_mul_imag_nan.i.i264.i179 ], [ %45, %complex_mul_libcall.i.i266.i181 ]
  %add.r.i.i273.i139 = fadd double %real_mul_phi.i.i260.i137, 5.250000e+01
  %add.i.i.i274.i140 = fadd double %imag_mul_phi.i.i261.i138, 0.000000e+00
  %mul_ac.i.i280.i141 = fmul double %real_mul_phi.i.i.i37, %add.r.i.i273.i139
  %mul_bd.i.i281.i142 = fmul double %imag_mul_phi.i.i.i38, %add.i.i.i274.i140
  %mul_ad.i.i282.i143 = fmul double %imag_mul_phi.i.i.i38, %add.r.i.i273.i139
  %mul_bc.i.i283.i144 = fmul double %real_mul_phi.i.i.i37, %add.i.i.i274.i140
  %mul_r.i.i284.i145 = fsub double %mul_ac.i.i280.i141, %mul_bd.i.i281.i142
  %mul_i.i.i285.i146 = fadd double %mul_ad.i.i282.i143, %mul_bc.i.i283.i144
  %isnan_cmp.i.i286.i147 = fcmp uno double %mul_r.i.i284.i145, 0.000000e+00
  br i1 %isnan_cmp.i.i286.i147, label %complex_mul_imag_nan.i.i291.i175, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148, !prof !19

complex_mul_imag_nan.i.i291.i175:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136
  %isnan_cmp4.i.i292.i176 = fcmp uno double %mul_i.i.i285.i146, 0.000000e+00
  br i1 %isnan_cmp4.i.i292.i176, label %complex_mul_libcall.i.i293.i177, label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148, !prof !19

complex_mul_libcall.i.i293.i177:                  ; preds = %complex_mul_imag_nan.i.i291.i175
  %call5.i.i294.i178 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i273.i139, double noundef %add.i.i.i274.i140, double noundef %real_mul_phi.i.i.i37, double noundef %imag_mul_phi.i.i.i38) #9
  %46 = extractvalue { double, double } %call5.i.i294.i178, 0
  %47 = extractvalue { double, double } %call5.i.i294.i178, 1
  br label %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148

_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148: ; preds = %complex_mul_libcall.i.i293.i177, %complex_mul_imag_nan.i.i291.i175, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136
  %real_mul_phi.i.i287.i149 = phi double [ %mul_r.i.i284.i145, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136 ], [ %mul_r.i.i284.i145, %complex_mul_imag_nan.i.i291.i175 ], [ %46, %complex_mul_libcall.i.i293.i177 ]
  %imag_mul_phi.i.i288.i150 = phi double [ %mul_i.i.i285.i146, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit268.i136 ], [ %mul_i.i.i285.i146, %complex_mul_imag_nan.i.i291.i175 ], [ %47, %complex_mul_libcall.i.i293.i177 ]
  %add.r.i.i300.i151 = fadd double %real_mul_phi.i.i287.i149, -5.250000e+01
  %add.i.i.i301.i152 = fadd double %imag_mul_phi.i.i288.i150, 0.000000e+00
  %mul_ac.i.i307.i153 = fmul double %real_mul_phi.i.i.i37, %add.r.i.i300.i151
  %mul_bd.i.i308.i154 = fmul double %imag_mul_phi.i.i.i38, %add.i.i.i301.i152
  %mul_ad.i.i309.i155 = fmul double %imag_mul_phi.i.i.i38, %add.r.i.i300.i151
  %mul_bc.i.i310.i156 = fmul double %real_mul_phi.i.i.i37, %add.i.i.i301.i152
  %mul_r.i.i311.i157 = fsub double %mul_ac.i.i307.i153, %mul_bd.i.i308.i154
  %mul_i.i.i312.i158 = fadd double %mul_ad.i.i309.i155, %mul_bc.i.i310.i156
  %isnan_cmp.i.i313.i159 = fcmp uno double %mul_r.i.i311.i157, 0.000000e+00
  br i1 %isnan_cmp.i.i313.i159, label %complex_mul_imag_nan.i.i318.i171, label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219, !prof !19

complex_mul_imag_nan.i.i318.i171:                 ; preds = %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148
  %isnan_cmp4.i.i319.i172 = fcmp uno double %mul_i.i.i312.i158, 0.000000e+00
  br i1 %isnan_cmp4.i.i319.i172, label %complex_mul_libcall.i.i320.i173, label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219, !prof !19

complex_mul_libcall.i.i320.i173:                  ; preds = %complex_mul_imag_nan.i.i318.i171
  %call5.i.i321.i174 = tail call noundef { double, double } @__muldc3(double noundef %add.r.i.i300.i151, double noundef %add.i.i.i301.i152, double noundef %real_mul_phi.i.i.i37, double noundef %imag_mul_phi.i.i.i38) #9
  %48 = extractvalue { double, double } %call5.i.i321.i174, 0
  %49 = extractvalue { double, double } %call5.i.i321.i174, 1
  br label %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219

_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219: ; preds = %complex_mul_libcall.i.i320.i173, %complex_mul_imag_nan.i.i318.i171, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148
  %real_mul_phi.i.i314.i160 = phi double [ %mul_r.i.i311.i157, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148 ], [ %mul_r.i.i311.i157, %complex_mul_imag_nan.i.i318.i171 ], [ %48, %complex_mul_libcall.i.i320.i173 ]
  %imag_mul_phi.i.i315.i161 = phi double [ %mul_i.i.i312.i158, %_ZStmlIdESt7complexIT_ERKS2_S4_.internalized.exit295.i148 ], [ %mul_i.i.i312.i158, %complex_mul_imag_nan.i.i318.i171 ], [ %49, %complex_mul_libcall.i.i320.i173 ]
  %add.i.i.i219.i162 = fadd double %imag_mul_phi.i.i206.i118, 0.000000e+00
  %add.r.i.i218.i163 = fadd double %real_mul_phi.i.i205.i117, 0x4027830642DA00A6
  %add.r.i.i327.i164 = fadd double %real_mul_phi.i.i314.i160, 6.562500e+00
  %add.i.i.i328.i165 = fadd double %imag_mul_phi.i.i315.i161, 0.000000e+00
  %call4.i.i.i166 = tail call noundef { double, double } @__divdc3(double noundef %add.r.i.i218.i163, double noundef %add.i.i.i219.i162, double noundef %add.r.i.i327.i164, double noundef %add.i.i.i328.i165) #9
  %.fca.0.extract5 = extractvalue { double, double } %call4.i.i.i166, 0
  %fneg.i223 = fneg double %.fca.0.extract5
  br label %cond.end

cond.end:                                         ; preds = %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219, %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit
  %.fca.0.extract89.i.pn = phi double [ %.fca.0.extract89.i, %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit ], [ %fneg.i223, %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219 ]
  %call4.i.i.i.pn = phi { double, double } [ %call4.i.i.i, %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit ], [ %call4.i.i.i166, %_ZN6openmc5zpf8hESt7complexIdE.internalized.exit219 ]
  %.fca.1.extract91.i.pn = extractvalue { double, double } %call4.i.i.i.pn, 1
  %.fca.0.0.insert = insertvalue %"class.std::complex" poison, double %.fca.0.extract89.i.pn, 0, 0
  %.fca.0.1.insert = insertvalue %"class.std::complex" %.fca.0.0.insert, double %.fca.1.extract91.i.pn, 0, 1
  ret %"class.std::complex" %.fca.0.1.insert
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.minnum.f64(double, double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fma.f64(double, double, double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.amdgcn.trig.preop.f64(double, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ldexp.f64.i32(double, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.rint.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.amdgcn.frexp.mant.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.frexp.exp.i32.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.amdgcn.rcp.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.frexp.exp.i32.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.trunc.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.ldexp.f32.i32(float, i32) #1

attributes #0 = { cold mustprogress noinline nounwind optsize "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { mustprogress nofree norecurse nosync nounwind memory(argmem: readwrite) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #3 = { mustprogress nofree norecurse nosync nounwind memory(argmem: write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #4 = { convergent mustprogress nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #5 = { convergent "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #6 = { mustprogress nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx942" "target-features"="+16-bit-insts,+atomic-buffer-global-pk-add-f16-insts,+atomic-ds-pk-add-16-insts,+atomic-fadd-rtn-insts,+atomic-flat-pk-add-16-insts,+atomic-global-pk-add-bf16-inst,+ci-insts,+dl-insts,+dot1-insts,+dot10-insts,+dot2-insts,+dot3-insts,+dot4-insts,+dot5-insts,+dot6-insts,+dot7-insts,+dpp,+fp8-conversion-insts,+fp8-insts,+gfx8-insts,+gfx9-insts,+gfx90a-insts,+gfx940-insts,+mai-insts,+s-memrealtime,+s-memtime-inst,+wavefrontsize64,+xf32-insts" }
attributes #7 = { nosync }
attributes #8 = { convergent nounwind }
attributes #9 = { nounwind }

!omp_offload.info = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4, !5, !6}
!opencl.ocl.version = !{!7}
!llvm.ident = !{!8, !9}

!0 = !{i32 1, !"_ZN6openmcL12DEPLETION_RXE", i32 0, i32 0}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 600}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"openmp", i32 51}
!4 = !{i32 7, !"openmp-device", i32 51}
!5 = !{i32 8, !"PIC Level", i32 2}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!7 = !{i32 2, i32 0}
!8 = !{!"clang version 21.0.0git (https://github.com/llvm/llvm-project.git da17ced11b1cf44b433cb2b850978df4b6bff279)"}
!9 = !{!"AMD clang version 18.0.0git (https://github.com/RadeonOpenCompute/llvm-project roc-6.3.1 24491 1e0fda770a2079fbd71e4b70974d74f62fd3af10)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"double", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !15, !18}
!18 = !{!"llvm.loop.peeled.count", i32 1}
!19 = !{!"branch_weights", i32 1, i32 1048575}
